<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>51单片机-蜂鸣器</title>
      <link href="/p/1d1f58e9.html"/>
      <url>/p/1d1f58e9.html</url>
      
        <content type="html"><![CDATA[<h1 id="蜂鸣器"><a href="#蜂鸣器" class="headerlink" title="蜂鸣器"></a>蜂鸣器</h1><h2 id="蜂鸣器介绍"><a href="#蜂鸣器介绍" class="headerlink" title="蜂鸣器介绍"></a>蜂鸣器介绍</h2><ul><li><p>蜂鸣器是一种将电信号转换为声音信号的器件，常用来产生设备的按键音、报警音等提示信号</p></li><li><p>蜂鸣器按驱动方式可分为有源蜂鸣器和无源蜂鸣器</p></li><li><p>有源蜂鸣器：内部自带振荡源，将正负极接上直流电压即可持续发声，频率固定</p></li><li><p>无源蜂鸣器：内部不带振荡源，需要控制器提供振荡脉冲才可发声，调整提供振荡脉冲的频率，可发出不同频率的声音</p></li></ul><h2 id="驱动电路"><a href="#驱动电路" class="headerlink" title="驱动电路"></a>驱动电路</h2><h3 id="三极管驱动"><a href="#三极管驱动" class="headerlink" title="三极管驱动"></a>三极管驱动</h3><p><img src="https://cdn.jsdelivr.net/gh/jiejie081/pic/img/202205030958298.png" alt="image-20220503095822752"></p><blockquote><p>NPN 高电平闭合</p><p>PNP 低电平闭合</p></blockquote><h3 id="集成芯片驱动"><a href="#集成芯片驱动" class="headerlink" title="集成芯片驱动"></a>集成芯片驱动</h3><p><img src="https://cdn.jsdelivr.net/gh/jiejie081/pic/img/202205031001455.png" alt="image-20220503100059287"></p><blockquote><p>开发变采用了集成芯片 ULN2003D （达林顿晶体管阵列）来驱动</p><p>此电路存在一点缺陷：</p><p>由于1单片机的IO口默认是高电平，蜂鸣器一直有电流流过，而无源蜂鸣器是靠震荡电平发声的，这时候电能转化为机械能，但是一直通电就会，不发声，会导致电流过大，而烧坏蜂鸣器。</p></blockquote><h4 id="ULN2003D"><a href="#ULN2003D" class="headerlink" title="ULN2003D"></a>ULN2003D</h4><p><img src="https://cdn.jsdelivr.net/gh/jiejie081/pic/img/202205031105776.png" alt="image-20220503101015759"></p><p><img src="https://cdn.jsdelivr.net/gh/jiejie081/pic/img/202205031105835.png" alt="image-20220503101154793"></p><blockquote><p>UNL2003 芯片 又叫反向驱动芯片 又逻辑框图可以知道 内部含有非门</p><p>给0 输出 1 没有驱动能力  相当于高阻态 </p><p>给1 输出 0 有驱动能力</p><p>具体数据参考数据手册</p></blockquote><h2 id="定时器控制频率重装值计算"><a href="#定时器控制频率重装值计算" class="headerlink" title="定时器控制频率重装值计算"></a>定时器控制频率重装值计算</h2><p>​     <img src="https://cdn.jsdelivr.net/gh/jiejie081/pic/img/202205031105631.png" alt="image-20220503105057293" style="zoom: 33%;" />                                      <img src="https://cdn.jsdelivr.net/gh/jiejie081/pic/img/202205031105918.png" alt="image-20220503105120068" style="zoom:60%;" />  </p><blockquote><p>频率(Hz) :每秒震动多少次</p><p>周期：震动一次多少秒 （1s&#x3D;1000ms&#x3D;1000000us）</p><p>一个周期两个状态 响与不响</p></blockquote><h2 id="代码演示"><a href="#代码演示" class="headerlink" title="代码演示"></a>代码演示</h2><h3 id="按下按键发出提示音"><a href="#按下按键发出提示音" class="headerlink" title="按下按键发出提示音"></a>按下按键发出提示音</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;REGX52.H&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;INTRINS.H&gt;</span></span></span><br><span class="line"><span class="comment">//蜂鸣器标准提示音1000Hz 代码省略按键模块代码</span></span><br><span class="line"><span class="comment">//蜂鸣器端口：</span></span><br><span class="line">sbit Buzzer=P1^<span class="number">5</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">  * @brief  蜂鸣器私有延时函数，延时500us</span></span><br><span class="line"><span class="comment">  * @param  无</span></span><br><span class="line"><span class="comment">  * @retval 无</span></span><br><span class="line"><span class="comment">  */</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Buzzer_Delay500us</span><span class="params">()</span><span class="comment">//@12.000MHz</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">unsigned</span> <span class="keyword">char</span> i;</span><br><span class="line"></span><br><span class="line">_nop_();</span><br><span class="line">i = <span class="number">247</span>;</span><br><span class="line"><span class="keyword">while</span> (--i);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">  * @brief  蜂鸣器发声</span></span><br><span class="line"><span class="comment">  * @param  ms 发声的时长，范围：0~32767</span></span><br><span class="line"><span class="comment">  * @retval 无</span></span><br><span class="line"><span class="comment">  */</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Buzzer_Time</span><span class="params">(<span class="keyword">unsigned</span> <span class="keyword">int</span> ms)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">unsigned</span> <span class="keyword">int</span> i;</span><br><span class="line"><span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;ms*<span class="number">2</span>;i++)</span><br><span class="line">&#123;</span><br><span class="line">Buzzer=!Buzzer;</span><br><span class="line">Buzzer_Delay500us();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">unsigned</span> <span class="keyword">char</span> KeyNum;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">while</span>(<span class="number">1</span>)</span><br><span class="line">&#123;</span><br><span class="line">KeyNum=Key();</span><br><span class="line"><span class="keyword">if</span>(KeyNum)</span><br><span class="line">&#123;</span><br><span class="line">Buzzer_Time(<span class="number">100</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="蜂鸣器播放音乐"><a href="#蜂鸣器播放音乐" class="headerlink" title="蜂鸣器播放音乐"></a>蜂鸣器播放音乐</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;REGX52.H&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&quot;Delay.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&quot;Timer0.h&quot;</span></span></span><br><span class="line"><span class="comment">//这里省略定时器与延时函数（1ms）模块代码</span></span><br><span class="line"><span class="comment">//蜂鸣器端口定义</span></span><br><span class="line">sbit Buzzer=P1^<span class="number">5</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//播放速度，值为四分音符的时长(ms)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> SPEED500</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//音符与索引对应表，P：休止符，L：低音，M：中音，H：高音，下划线：升半音符号#</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> P0</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> L11</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> L1_2</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> L23</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> L2_4</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> L35</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> L46</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> L4_7</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> L58</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> L5_9</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> L610</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> L6_11</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> L712</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> M113</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> M1_14</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> M215</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> M2_16</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> M317</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> M418</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> M4_19</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> M520</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> M5_21</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> M622</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> M6_23</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> M724</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> H125</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> H1_26</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> H227</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> H2_28</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> H329</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> H430</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> H4_31</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> H532</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> H5_33</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> H634</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> H6_35</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> H736</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//索引与频率对照表</span></span><br><span class="line"><span class="keyword">unsigned</span> <span class="keyword">int</span> FreqTable[]=&#123;</span><br><span class="line"><span class="number">0</span>,</span><br><span class="line"><span class="number">63628</span>,<span class="number">63731</span>,<span class="number">63835</span>,<span class="number">63928</span>,<span class="number">64021</span>,<span class="number">64103</span>,<span class="number">64185</span>,<span class="number">64260</span>,<span class="number">64331</span>,<span class="number">64400</span>,<span class="number">64463</span>,<span class="number">64528</span>,</span><br><span class="line"><span class="number">64580</span>,<span class="number">64633</span>,<span class="number">64684</span>,<span class="number">64732</span>,<span class="number">64777</span>,<span class="number">64820</span>,<span class="number">64860</span>,<span class="number">64898</span>,<span class="number">64934</span>,<span class="number">64968</span>,<span class="number">65000</span>,<span class="number">65030</span>,</span><br><span class="line"><span class="number">65058</span>,<span class="number">65085</span>,<span class="number">65110</span>,<span class="number">65134</span>,<span class="number">65157</span>,<span class="number">65178</span>,<span class="number">65198</span>,<span class="number">65217</span>,<span class="number">65235</span>,<span class="number">65252</span>,<span class="number">65268</span>,<span class="number">65283</span>,</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">//乐谱</span></span><br><span class="line"><span class="keyword">unsigned</span> <span class="keyword">char</span> code Music[]=&#123;</span><br><span class="line"><span class="comment">//音符,时值,</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//1</span></span><br><span class="line">P,<span class="number">4</span>,</span><br><span class="line">P,<span class="number">4</span>,</span><br><span class="line">P,<span class="number">4</span>,</span><br><span class="line">M6,<span class="number">2</span>,</span><br><span class="line">M7,<span class="number">2</span>,</span><br><span class="line"></span><br><span class="line">H1,<span class="number">4</span>+<span class="number">2</span>,</span><br><span class="line">M7,<span class="number">2</span>,</span><br><span class="line">H1,<span class="number">4</span>,</span><br><span class="line">H3,<span class="number">4</span>,</span><br><span class="line"></span><br><span class="line">M7,<span class="number">4</span>+<span class="number">4</span>+<span class="number">4</span>,</span><br><span class="line">M3,<span class="number">2</span>,</span><br><span class="line">M3,<span class="number">2</span>,</span><br><span class="line"></span><br><span class="line"><span class="comment">//2</span></span><br><span class="line">M6,<span class="number">4</span>+<span class="number">2</span>,</span><br><span class="line">M5,<span class="number">2</span>,</span><br><span class="line">M6, <span class="number">4</span>,</span><br><span class="line">H1,<span class="number">4</span>,</span><br><span class="line"></span><br><span class="line">M5,<span class="number">4</span>+<span class="number">4</span>+<span class="number">4</span>,</span><br><span class="line">M3,<span class="number">4</span>,</span><br><span class="line"></span><br><span class="line">M4,<span class="number">4</span>+<span class="number">2</span>,</span><br><span class="line">M3,<span class="number">2</span>,</span><br><span class="line">M4,<span class="number">4</span>,</span><br><span class="line">H1,<span class="number">4</span>,</span><br><span class="line"></span><br><span class="line"><span class="comment">//3</span></span><br><span class="line">M3,<span class="number">4</span>+<span class="number">4</span>,</span><br><span class="line">P,<span class="number">2</span>,</span><br><span class="line">H1,<span class="number">2</span>,</span><br><span class="line">H1,<span class="number">2</span>,</span><br><span class="line">H1,<span class="number">2</span>,</span><br><span class="line"></span><br><span class="line">M7,<span class="number">4</span>+<span class="number">2</span>,</span><br><span class="line">M4_,<span class="number">2</span>,</span><br><span class="line">M4_,<span class="number">4</span>,</span><br><span class="line">M7,<span class="number">4</span>,</span><br><span class="line"></span><br><span class="line">M7,<span class="number">8</span>,</span><br><span class="line">P,<span class="number">4</span>,</span><br><span class="line">M6,<span class="number">2</span>,</span><br><span class="line">M7,<span class="number">2</span>,</span><br><span class="line"></span><br><span class="line"><span class="comment">//4</span></span><br><span class="line">H1,<span class="number">4</span>+<span class="number">2</span>,</span><br><span class="line">M7,<span class="number">2</span>,</span><br><span class="line">H1,<span class="number">4</span>,</span><br><span class="line">H3,<span class="number">4</span>,</span><br><span class="line"></span><br><span class="line">M7,<span class="number">4</span>+<span class="number">4</span>+<span class="number">4</span>,</span><br><span class="line">M3,<span class="number">2</span>,</span><br><span class="line">M3,<span class="number">2</span>,</span><br><span class="line"></span><br><span class="line">M6,<span class="number">4</span>+<span class="number">2</span>,</span><br><span class="line">M5,<span class="number">2</span>,</span><br><span class="line">M6, <span class="number">4</span>,</span><br><span class="line">H1,<span class="number">4</span>,</span><br><span class="line"></span><br><span class="line"><span class="comment">//5</span></span><br><span class="line">M5,<span class="number">4</span>+<span class="number">4</span>+<span class="number">4</span>,</span><br><span class="line">M2,<span class="number">2</span>,</span><br><span class="line">M3,<span class="number">2</span>,</span><br><span class="line"></span><br><span class="line">M4,<span class="number">4</span>,</span><br><span class="line">H1,<span class="number">2</span>,</span><br><span class="line">M7,<span class="number">2</span>+<span class="number">2</span>,</span><br><span class="line">H1,<span class="number">2</span>+<span class="number">4</span>,</span><br><span class="line"></span><br><span class="line">H2,<span class="number">2</span>,</span><br><span class="line">H2,<span class="number">2</span>,</span><br><span class="line">H3,<span class="number">2</span>,</span><br><span class="line">H1,<span class="number">2</span>+<span class="number">4</span>+<span class="number">4</span>,</span><br><span class="line"></span><br><span class="line"><span class="comment">//6</span></span><br><span class="line">H1,<span class="number">2</span>,</span><br><span class="line">M7,<span class="number">2</span>,</span><br><span class="line">M6,<span class="number">2</span>,</span><br><span class="line">M6,<span class="number">2</span>,</span><br><span class="line">M7,<span class="number">4</span>,</span><br><span class="line">M5_,<span class="number">4</span>,</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">M6,<span class="number">4</span>+<span class="number">4</span>+<span class="number">4</span>,</span><br><span class="line">H1,<span class="number">2</span>,</span><br><span class="line">H2,<span class="number">2</span>,</span><br><span class="line"></span><br><span class="line">H3,<span class="number">4</span>+<span class="number">2</span>,</span><br><span class="line">H2,<span class="number">2</span>,</span><br><span class="line">H3,<span class="number">4</span>,</span><br><span class="line">H5,<span class="number">4</span>,</span><br><span class="line"></span><br><span class="line"><span class="comment">//7</span></span><br><span class="line">H2,<span class="number">4</span>+<span class="number">4</span>+<span class="number">4</span>,</span><br><span class="line">M5,<span class="number">2</span>,</span><br><span class="line">M5,<span class="number">2</span>,</span><br><span class="line"></span><br><span class="line">H1,<span class="number">4</span>+<span class="number">2</span>,</span><br><span class="line">M7,<span class="number">2</span>,</span><br><span class="line">H1,<span class="number">4</span>,</span><br><span class="line">H3,<span class="number">4</span>,</span><br><span class="line"></span><br><span class="line">H3,<span class="number">4</span>+<span class="number">4</span>+<span class="number">4</span>+<span class="number">4</span>,</span><br><span class="line"></span><br><span class="line"><span class="comment">//8</span></span><br><span class="line">M6,<span class="number">2</span>,</span><br><span class="line">M7,<span class="number">2</span>,</span><br><span class="line">H1,<span class="number">4</span>,</span><br><span class="line">M7,<span class="number">4</span>,</span><br><span class="line">H2,<span class="number">2</span>,</span><br><span class="line">H2,<span class="number">2</span>,</span><br><span class="line"></span><br><span class="line">H1,<span class="number">4</span>+<span class="number">2</span>,</span><br><span class="line">M5,<span class="number">2</span>+<span class="number">4</span>+<span class="number">4</span>,</span><br><span class="line"></span><br><span class="line">H4,<span class="number">4</span>,</span><br><span class="line">H3,<span class="number">4</span>,</span><br><span class="line">H3,<span class="number">4</span>,</span><br><span class="line">H1,<span class="number">4</span>,</span><br><span class="line"></span><br><span class="line"><span class="comment">//9</span></span><br><span class="line">H3,<span class="number">4</span>+<span class="number">4</span>+<span class="number">4</span>,</span><br><span class="line">H3,<span class="number">4</span>,</span><br><span class="line"></span><br><span class="line">H6,<span class="number">4</span>+<span class="number">4</span>,</span><br><span class="line">H5,<span class="number">4</span>,</span><br><span class="line">H5,<span class="number">4</span>,</span><br><span class="line"></span><br><span class="line">H3,<span class="number">2</span>,</span><br><span class="line">H2,<span class="number">2</span>,</span><br><span class="line">H1,<span class="number">4</span>+<span class="number">4</span>,</span><br><span class="line">P,<span class="number">2</span>,</span><br><span class="line">H1,<span class="number">2</span>,</span><br><span class="line"></span><br><span class="line"><span class="comment">//10</span></span><br><span class="line">H2,<span class="number">4</span>,</span><br><span class="line">H1,<span class="number">2</span>,</span><br><span class="line">H2,<span class="number">2</span>,</span><br><span class="line">H2,<span class="number">4</span>,</span><br><span class="line">H5,<span class="number">4</span>,</span><br><span class="line"></span><br><span class="line">H3,<span class="number">4</span>+<span class="number">4</span>+<span class="number">4</span>,</span><br><span class="line">H3,<span class="number">4</span>,</span><br><span class="line"></span><br><span class="line">H6,<span class="number">4</span>+<span class="number">4</span>,</span><br><span class="line">H5,<span class="number">4</span>+<span class="number">4</span>,</span><br><span class="line"></span><br><span class="line"><span class="comment">//11</span></span><br><span class="line">H3,<span class="number">2</span>,</span><br><span class="line">H2,<span class="number">2</span>,</span><br><span class="line">H1,<span class="number">4</span>+<span class="number">4</span>,</span><br><span class="line">P,<span class="number">2</span>,</span><br><span class="line">H1,<span class="number">2</span>,</span><br><span class="line"></span><br><span class="line">H2,<span class="number">4</span>,</span><br><span class="line">H1,<span class="number">2</span>,</span><br><span class="line">H2,<span class="number">2</span>+<span class="number">4</span>,</span><br><span class="line">M7,<span class="number">4</span>,</span><br><span class="line"></span><br><span class="line">M6,<span class="number">4</span>+<span class="number">4</span>+<span class="number">4</span>,</span><br><span class="line">P,<span class="number">4</span>,</span><br><span class="line"></span><br><span class="line"><span class="number">0xFF</span><span class="comment">//终止标志</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">unsigned</span> <span class="keyword">char</span> FreqSelect,MusicSelect;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">Timer0Init();</span><br><span class="line"><span class="keyword">while</span>(<span class="number">1</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(Music[MusicSelect]!=<span class="number">0xFF</span>)<span class="comment">//如果不是停止标志位</span></span><br><span class="line">&#123;</span><br><span class="line">FreqSelect=Music[MusicSelect];<span class="comment">//选择音符对应的频率</span></span><br><span class="line">MusicSelect++;</span><br><span class="line">Delay(SPEED/<span class="number">4</span>*Music[MusicSelect]);<span class="comment">//选择音符对应的时值</span></span><br><span class="line">MusicSelect++;</span><br><span class="line">TR0=<span class="number">0</span>;</span><br><span class="line">Delay(<span class="number">5</span>);<span class="comment">//音符间短暂停顿</span></span><br><span class="line">TR0=<span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span><span class="comment">//如果是停止标志位</span></span><br><span class="line">&#123;</span><br><span class="line">TR0=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">while</span>(<span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Timer0_Routine</span><span class="params">()</span> interrupt 1</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(FreqTable[FreqSelect])<span class="comment">//如果不是休止符</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">/*取对应频率值的重装载值到定时器*/</span></span><br><span class="line">TL0 = FreqTable[FreqSelect]%<span class="number">256</span>;<span class="comment">//设置定时初值</span></span><br><span class="line">TH0 = FreqTable[FreqSelect]/<span class="number">256</span>;<span class="comment">//设置定时初值</span></span><br><span class="line">Buzzer=!Buzzer;<span class="comment">//翻转蜂鸣器IO口</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 51单片机 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 51单片机 </tag>
            
            <tag> Keil </tag>
            
            <tag> STC </tag>
            
            <tag> 蜂鸣器 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>51单片机-串口通讯（新）</title>
      <link href="/p/c9a26e84.html"/>
      <url>/p/c9a26e84.html</url>
      
        <content type="html"><![CDATA[<h1 id="串口通讯🔌"><a href="#串口通讯🔌" class="headerlink" title="串口通讯🔌"></a>串口通讯🔌</h1><h2 id="计算机通信💻"><a href="#计算机通信💻" class="headerlink" title="计算机通信💻"></a>计算机通信💻</h2><ul><li><p>计算机通信是指计算机与外部设备或计算机与计算机之间的信息交换。</p></li><li><p>通信有<strong>并行通信</strong>和<strong>串行通信</strong>两种方式。在多微机系统以及现代测控系统中信息的交换多采用<strong>串行通信</strong>方式。</p></li><li><p><strong>并行通信</strong>通常是将数据字节的各位用多条数据线同时进行传送。</p></li><li><p><strong>并行通信的特点</strong>控制简单、传输速度快；由于传输线较多，长距离传送时成本高且接收方的各位同时接收存在困难。</p></li><li><p><strong>串行通信</strong>是将数据字节分成一位一位的形式在一条传输线上逐个地传送。</p></li><li><p><strong>串行通信的特点</strong>：传输线少，长距离传送时成本低，且可以利用电话网等现成的设备，但数据的传送控制比并行通信复杂。</p></li></ul><h2 id="串行通讯的基本概念📶"><a href="#串行通讯的基本概念📶" class="headerlink" title="串行通讯的基本概念📶"></a>串行通讯的基本概念📶</h2><h3 id="异步通信与同步通信"><a href="#异步通信与同步通信" class="headerlink" title="异步通信与同步通信"></a>异步通信与同步通信</h3><ul><li><p><strong>异步通信</strong>是指通信的发送与接收设备&#x3D;&#x3D;使用各自的时钟&#x3D;&#x3D;控制数据的发送和接收过程。为使双方的收发协调，要求发送和接收设备的时钟尽可能一致。（通信双方各自约定通信速率，需要设定一样的波特率）</p></li><li><p><strong>异步通信的特点</strong>：不要求收发双方时钟的严格一致，实现容易，设备开销较小，但每个字符要附加 2～3 位用于起止位，各帧之间还有间隔，因此传输效率不高。</p></li><li><p><strong>同步通信</strong>时要建立发送方时钟对接收方时钟的直接控制，使双方达到完全同步。发送方对接收方的同步可以通过两种方法实现。（左图：外同步；右图：自同步）（&#x3D;&#x3D;通过规定电平上升沿下降沿发送接收数据&#x3D;&#x3D;）</p></li></ul><p><img src="https://cdn.jsdelivr.net/gh/jiejie081/pic/img/202204181627133.png"></p><h3 id="串行通信的传输方向"><a href="#串行通信的传输方向" class="headerlink" title="串行通信的传输方向"></a>串行通信的传输方向</h3><ul><li><p><strong>单工</strong>是指数据传输仅能沿一个方向，不能实现反向传输。</p></li><li><p><strong>半双工</strong>是指数据传输可以沿两个方向，但需要分时进行。</p></li><li><p><strong>全双工</strong>是指数据可以同时进行双向传输**</p></li></ul><p><img src="https://cdn.jsdelivr.net/gh/jiejie081/pic/img/202204181627700.png"></p><h3 id="传输速率"><a href="#传输速率" class="headerlink" title="传输速率"></a>传输速率</h3><p><strong>比特率</strong>：每秒钟传输二进制代码的位数</p><blockquote><p>单位是：位／秒（bps）。如每秒钟传送 240 个字符，而每个字符格式包含 10 位( 1 个起始位、1 个停止位、8 个数据位)，</p><p>这时的比特率为：  10位×240个&#x2F;秒 &#x3D; 2400 bps</p></blockquote><p><strong>波特率</strong>：波特率表示单位时间内传送的码元符号的个数（发送和接收各数据位的间隔时间）</p><blockquote><p>每秒传送 240 个字符，波特率就是 240</p></blockquote><h2 id="波特率的计算"><a href="#波特率的计算" class="headerlink" title="波特率的计算"></a>波特率的计算</h2><p>溢出率➗2（通过控制倍速与不倍速）➗16</p><blockquote><p>以后面代码中4800为例</p><pre><code>PCON &amp;= 0x7F;        //波特率不倍速SCON = 0x50;        //8位数据,可变波特率TMOD &amp;= 0x0F;        //设置定时器模式TMOD |= 0x20;        //设置定时器模式TL1 = 0xF3;        //设置定时初始值TH1 = 0xF3;        //设置定时重载值</code></pre><p>不倍速，溢出率为1&#x2F;13 us</p><p>波特率 1&#x2F;13÷16*1000000 &#x3D; 4800 Hz（存在误差）</p></blockquote><h3 id="传输距离与传输速率关系"><a href="#传输距离与传输速率关系" class="headerlink" title="传输距离与传输速率关系"></a>传输距离与传输速率关系</h3><p>串行接口或终端直接传送串行信息位流的最大距离与传输速率及传输线的电气特性有关。当传输线使用每 0.3m（约1英尺）有 50PF 电容的非平衡屏蔽双绞线时，传输距离随传输速率的增加而减小。当比特率超过 1000 bps  时，最大传输距离迅速下降，如 9600 bps  时最大距离下降到只有 76m （约 250 英尺）。</p><p>&#x3D;&#x3D;传输距离与传输速率成反比&#x3D;&#x3D;</p><h3 id="总线（BUS）"><a href="#总线（BUS）" class="headerlink" title="总线（BUS）"></a>总线（BUS）</h3><ul><li><p>总线（Bus）是计算机各种功能部件之间传送信息的公共通信干线</p></li><li><p>连接各个设备的数据传输线路（类似于一条马路，把路边各住户连接起来，使住户可以相互交流）</p></li></ul><h3 id="常用通信接口比较"><a href="#常用通信接口比较" class="headerlink" title="常用通信接口比较"></a>常用通信接口比较</h3><table><thead><tr><th><strong>名称</strong></th><th><strong>引脚定义</strong></th><th><strong>通信方式</strong></th><th><strong>特点</strong></th></tr></thead><tbody><tr><td>UART</td><td>TXD、RXD</td><td>全双工、异步</td><td>点对点通信</td></tr><tr><td>I²C</td><td>SCL、SDA</td><td>半双工、同步</td><td>可挂载多个设备</td></tr><tr><td>SPI</td><td>SCLK、MOSI、MISO、CS</td><td>全双工、同步</td><td>可挂载多个设备</td></tr><tr><td>1-Wire</td><td>DQ</td><td>半双工、异步</td><td>可挂载多个设备</td></tr></tbody></table><h2 id="串行接口"><a href="#串行接口" class="headerlink" title="串行接口"></a>串行接口</h2><p>串行接口简称串口，也称串行通信接口或串行通讯接口。串行接口（Serial Interface）是指数据一位一位地顺序传送。其特点是通信线路]简单，只要一对传输线就可以实现双向通信（可以直接利用电话线作为传输线），从而大大降低了成本，特别适用于远距离通信，但传送速度较慢。</p><ul><li><p>串口是一种应用十分广泛的通讯接口，串口成本低、容易使用、通信线路简单，可实现两个设备的互相通信。</p></li><li><p>单片机的串口可以使单片机与单片机、单片机与电脑、单片机与各式各样的模块互相通信，极大的扩展了单片机的应用范围，增强了单片机系统的硬件实力。</p></li><li><p>51单片机内部自带UART（Universal Asynchronous Receiver Transmitter，通用异步收发器），可实现单片机的串口通信。</p></li></ul><h3 id="接口以引脚定义"><a href="#接口以引脚定义" class="headerlink" title="接口以引脚定义"></a>接口以引脚定义</h3><p><img src="https://cdn.jsdelivr.net/gh/jiejie081/pic/img/202204181627104.png"></p><h3 id="接口划分标准"><a href="#接口划分标准" class="headerlink" title="接口划分标准"></a>接口划分标准</h3><ul><li>RS-232</li><li>RS-422</li><li>RS-485</li><li>详细参考：<a href="https://baike.baidu.com/item/%E4%B8%B2%E8%A1%8C%E6%8E%A5%E5%8F%A3/2909564">串行接口</a></li></ul><h3 id="硬件电路"><a href="#硬件电路" class="headerlink" title="硬件电路"></a>硬件电路</h3><ul><li><p>简单双向串口通信有两根通信线（发送端TXD和接收端RXD）</p></li><li><p>TXD与RXD要交叉连接</p></li><li><p>当只需单向的数据传输时，可以直接一根通信线</p></li><li><p>当电平标准不一致时，需要加电平转换芯片</p></li></ul><img src="https://cdn.jsdelivr.net/gh/jiejie081/pic/img/image-20220209200625310.png" alt="开漏模式内部电路" width="60%" height="50%" align="middle"/><h3 id="电平标准"><a href="#电平标准" class="headerlink" title="电平标准"></a>电平标准</h3><ul><li><p>电平标准是数据1和数据0的表达方式，是传输线缆中人为规定的电压与数据的对应关系，串口常用的电平标准有如下三种：</p></li><li><p>TTL电平：+5V 表示 1，0V 表示 0</p></li><li><p>RS232电平：-3 <em>~</em> 15V 表示 1，+3 <em>~</em> +15V 表示 0</p></li><li><p>RS485电平：两线压差+2 <em>~</em> +6V 表示 1，-2 <em>~</em> -6V 表示 0（差分信号）</p></li></ul><h3 id="串口时序"><a href="#串口时序" class="headerlink" title="串口时序"></a>串口时序</h3><p><img src="https://cdn.jsdelivr.net/gh/jiejie081/pic/img/202204181628786.png" alt="8位数据格式"></p><p><img src="https://cdn.jsdelivr.net/gh/jiejie081/pic/img/202204181628099.png" alt="9位数据格式"></p><h3 id="串行通信常见错误校验"><a href="#串行通信常见错误校验" class="headerlink" title="*串行通信常见错误校验"></a>*串行通信常见错误校验</h3><h4 id="奇偶校验"><a href="#奇偶校验" class="headerlink" title="奇偶校验"></a>奇偶校验</h4><p>在发送数据时，数据位尾随的 1 位为奇偶校验位（1 或0 ）。奇校验时，数据中“1”的个数与校验位“1”的个数之和应为奇数；偶校验时，数据中“1”的个数与校验位“1”的个数之和应为偶数。接收字符时，对“1”的个数进行校验，若发现不一致，则说明传输数据过程中出现了差错。</p><blockquote><p>若为奇校验： 发送 1111 1100 1 第九位为“1”表示接收正确；“0”表示传输出现错误</p><p>若为偶校验： 发送 1111 1100 0 第九位为“0”表示接收正确；“1”表示传输出现错误</p><p>奇偶校验存在一定的局限性，若数据发生两位错误，如： 奇校验：发送1111 1100 1，传输成1111 0011 1 则校验仍然是成功的</p></blockquote><h4 id="0校验与1校验"><a href="#0校验与1校验" class="headerlink" title="0校验与1校验"></a>0校验与1校验</h4><p>设置为1校验，校验位始终为1，接收方接收到数据发现检验位为1就判断数据正确，这种方法简陋。</p><p>设置为0校验，校验位始终为0，接收方接收到数据发现检验位为0就判断数据正确，这种方法简陋。</p><h4 id="代码和校验"><a href="#代码和校验" class="headerlink" title="代码和校验"></a>代码和校验</h4><p>代码和校验是发送方将所发数据块求和（或各字节异或），产生一个字节的校验字符（校验和）附加到数据块末尾。接收方接收数据同时对数据块（除校验字节外）求和（或各字节异或），将所得的结果与发送方的“校验和”进行比较，相符则无差错，否则即认为传送过程中出现了差错。</p><h4 id="循环冗余校验"><a href="#循环冗余校验" class="headerlink" title="循环冗余校验"></a>循环冗余校验</h4><p>这种校验是通过某种数学运算实现有效信息与校验位之间的循环校验，常用于对磁盘信息的传输、存储区的完整性校验等。这种校验方法纠错能力强，广泛应用于同步通信中。</p><h2 id="51单片机的UART"><a href="#51单片机的UART" class="headerlink" title="51单片机的UART"></a>51单片机的UART</h2><ul><li><p>STC89C52有1个UART</p></li><li><p>STC89C52的UART有四种工作模式：</p><p>模式0：同步移位寄存器</p><p>模式1：8位UART，波特率可变（常用）</p><p>模式2：9位UART，波特率固定</p><p>模式3：9位UART，波特率可变</p></li></ul><img src="https://cdn.jsdelivr.net/gh/jiejie081/pic/img/image-20220209200512692.png" alt="开漏模式内部电路" width="30%" height="50%" align="middle"/><h3 id="串口模式图"><a href="#串口模式图" class="headerlink" title="串口模式图"></a>串口模式图</h3><img src="https://cdn.jsdelivr.net/gh/jiejie081/pic/img/image-20220209200828681.png" alt="开漏模式内部电路" width="80%" height="50%" align="middle"/><ul><li>SBUF：串口数据缓存寄存器，物理上是两个独立的寄存器，但占用相同的地址。写操作时，写入的是发送寄存器，读操作时，读出的是接收寄存器。</li></ul><h3 id="串口与中断"><a href="#串口与中断" class="headerlink" title="串口与中断"></a>串口与中断</h3><img src="https://cdn.jsdelivr.net/gh/jiejie081/pic/img/202204181635021.png" alt="开漏模式内部电路" width="80%" height="50%" align="middle"/><h3 id="相关寄存器"><a href="#相关寄存器" class="headerlink" title="相关寄存器"></a>相关寄存器</h3><img src="https://cdn.jsdelivr.net/gh/jiejie081/pic/img/image-20220209201518988.png" alt="开漏模式内部电路" width="80%" height="50%" align="middle"/><p>参考数据手册</p><h2 id="代码示例"><a href="#代码示例" class="headerlink" title="代码示例"></a>代码示例</h2><h3 id="仅发送"><a href="#仅发送" class="headerlink" title="仅发送"></a>仅发送</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;REGX52.H&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">UART_Init</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">SCON=<span class="number">0x40</span>;</span><br><span class="line">PCON |= <span class="number">0x80</span>;</span><br><span class="line">TMOD &amp;= <span class="number">0x0F</span>;<span class="comment">//设置定时器模式</span></span><br><span class="line">TMOD |= <span class="number">0x20</span>;<span class="comment">//设置定时器模式</span></span><br><span class="line">TL1 = <span class="number">0xF3</span>;<span class="comment">//设定定时初值</span></span><br><span class="line">TH1 = <span class="number">0xF3</span>;<span class="comment">//设定定时器重装值</span></span><br><span class="line">ET1 = <span class="number">0</span>;<span class="comment">//禁止定时器1中断</span></span><br><span class="line">TR1 = <span class="number">1</span>;<span class="comment">//启动定时器1</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">UART_SendByte</span><span class="params">(<span class="keyword">unsigned</span> <span class="keyword">char</span> Byte)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">SBUF=Byte;</span><br><span class="line"><span class="keyword">while</span>(TI==<span class="number">0</span>);</span><br><span class="line">TI=<span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Delay</span><span class="params">(<span class="keyword">unsigned</span> <span class="keyword">int</span> xms)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">unsigned</span> <span class="keyword">char</span> i, j;</span><br><span class="line"><span class="keyword">while</span>(xms--)</span><br><span class="line">&#123;</span><br><span class="line">i = <span class="number">2</span>;</span><br><span class="line">j = <span class="number">239</span>;</span><br><span class="line"><span class="keyword">do</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">while</span> (--j);</span><br><span class="line">&#125; <span class="keyword">while</span> (--i);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">unsigned</span> <span class="keyword">char</span> Sec;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">UART_Init();<span class="comment">//串口初始化</span></span><br><span class="line"><span class="keyword">while</span>(<span class="number">1</span>)</span><br><span class="line">&#123;</span><br><span class="line">UART_SendByte(Sec);<span class="comment">//串口发送一个字节</span></span><br><span class="line">Sec++;<span class="comment">//Sec自增</span></span><br><span class="line">Delay(<span class="number">1000</span>);<span class="comment">//延时1秒</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="接收-x2F-串口控制LED"><a href="#接收-x2F-串口控制LED" class="headerlink" title="接收&#x2F;串口控制LED"></a>接收&#x2F;串口控制LED</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;REGX52.H&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Delay</span><span class="params">(<span class="keyword">unsigned</span> <span class="keyword">int</span> xms)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">unsigned</span> <span class="keyword">char</span> i, j;</span><br><span class="line"><span class="keyword">while</span>(xms--)</span><br><span class="line">&#123;</span><br><span class="line">i = <span class="number">2</span>;</span><br><span class="line">j = <span class="number">239</span>;</span><br><span class="line"><span class="keyword">do</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">while</span> (--j);</span><br><span class="line">&#125; <span class="keyword">while</span> (--i);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">UART_Init</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">PCON &amp;= <span class="number">0x7F</span>;<span class="comment">//波特率不倍速</span></span><br><span class="line">SCON = <span class="number">0x50</span>;<span class="comment">//8位数据,可变波特率</span></span><br><span class="line">TMOD &amp;= <span class="number">0x0F</span>;<span class="comment">//设置定时器模式</span></span><br><span class="line">TMOD |= <span class="number">0x20</span>;<span class="comment">//设置定时器模式</span></span><br><span class="line">TL1 = <span class="number">0xF3</span>;<span class="comment">//设置定时初始值</span></span><br><span class="line">TH1 = <span class="number">0xF3</span>;<span class="comment">//设置定时重载值</span></span><br><span class="line">ET1 = <span class="number">0</span>;<span class="comment">//禁止定时器%d中断</span></span><br><span class="line">TR1 = <span class="number">1</span>;<span class="comment">//定时器1开始计时</span></span><br><span class="line">EA=<span class="number">1</span>;</span><br><span class="line">ES=<span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">UART_SendByte</span><span class="params">(<span class="keyword">unsigned</span> <span class="keyword">char</span> Byte)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">SBUF=Byte;</span><br><span class="line"><span class="keyword">while</span>(TI==<span class="number">0</span>);</span><br><span class="line">TI=<span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*串口中断函数模板</span></span><br><span class="line"><span class="comment">void UART_Routine() interrupt 4</span></span><br><span class="line"><span class="comment">&#123;</span></span><br><span class="line"><span class="comment">if(RI==1)</span></span><br><span class="line"><span class="comment">&#123;</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">RI=0;</span></span><br><span class="line"><span class="comment">&#125;</span></span><br><span class="line"><span class="comment">&#125;</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">UART_Init();<span class="comment">//串口初始化</span></span><br><span class="line"><span class="keyword">while</span>(<span class="number">1</span>)</span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">UART_Routine</span><span class="params">()</span> interrupt 4</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(RI==<span class="number">1</span>)<span class="comment">//如果接收标志位为1，接收到了数据</span></span><br><span class="line">&#123;</span><br><span class="line">P2=~SBUF;<span class="comment">//读取数据，取反后输出到LED</span></span><br><span class="line">UART_SendByte(SBUF);<span class="comment">//将受到的数据发回串口</span></span><br><span class="line">RI=<span class="number">0</span>;<span class="comment">//接收标志位清0</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="注意："><a href="#注意：" class="headerlink" title="注意："></a>注意：</h2><p>关于串口通信这里只讲了点对点通信，关于多机通信以后有时间补上</p><p>关于定时器的12T与1T，关系到单片机的机器周期。在传统8051都是12T。可参考<a href="https://blog.csdn.net/u010568345/article/details/36429713">STC单片机 定时器时钟FOSC 1T 12T、定时器模式_</a></p>]]></content>
      
      
      <categories>
          
          <category> 51单片机 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 51单片机 </tag>
            
            <tag> Keil </tag>
            
            <tag> STC </tag>
            
            <tag> 串口通信 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>51单片机-关于I/O口</title>
      <link href="/p/91217364.html"/>
      <url>/p/91217364.html</url>
      
        <content type="html"><![CDATA[<h1 id="关于51单片机的I-x2F-O口"><a href="#关于51单片机的I-x2F-O口" class="headerlink" title="关于51单片机的I&#x2F;O口"></a>关于51单片机的I&#x2F;O口</h1><p>传统的51单片机的I&#x2F;O口有两种工作模式&#x3D;&#x3D;开漏输出模式&#x3D;&#x3D;和&#x3D;&#x3D;准双向口&#x2F;弱上拉模式&#x3D;&#x3D;</p><p>在将这两个模式之前要先了解一下上拉电阻与下拉电阻 还有 TTL电平</p><h2 id="上拉电阻与下拉电阻"><a href="#上拉电阻与下拉电阻" class="headerlink" title="上拉电阻与下拉电阻"></a>上拉电阻与下拉电阻</h2><p><img src="https://cdn.jsdelivr.net/gh/jiejie081/pic/img/image-20220118172159102.png" alt="上拉电阻与下拉电阻"></p><p>Q:为什么需要上拉电阻与下拉电阻</p><blockquote><p>INPUT 输入引脚在没有连接任何外部元器件的时候是处于&#x3D;&#x3D;悬空状态&#x3D;&#x3D;</p><p>受到周围其他电磁干扰，INPUT会是忽高忽低，处于&#x3D;&#x3D;不稳定的状态&#x3D;&#x3D;</p><p>下拉电阻可以使得在开关不闭合的时候，引脚的电压下拉到稳定的0 V，在开关闭合的时候，引脚又被上拉到稳定的高电平。</p><p>上拉电阻可以使得在开关不闭合的时候，引脚的电压上拉到稳定的高电平，在开关闭合的时候，引脚又被下拉到稳定的0V.</p></blockquote><h2 id="TTL电平"><a href="#TTL电平" class="headerlink" title="TTL电平"></a>TTL电平</h2><ul><li>TTL集成电路的主要形式为晶体管—晶体管逻辑门，TTL大部分都采用5V电源。电流控制&#x3D;&#x3D;速度快，成本低，适合芯片间的通讯，传输距离短&#x3D;&#x3D;</li><li>VCC &#x3D; 5V 时</li></ul><ol><li><p>输出高电平Uoh和输出低电平Uol</p><p>Uoh ≥ 2.4V， Uol ≤0.4V</p></li><li><p>输入高电平Uih和输入低电平Uil</p><p>Uih ≥ 2.0V， Uil ≤ 0.8V</p></li></ol><h2 id="开漏输出模式"><a href="#开漏输出模式" class="headerlink" title="开漏输出模式"></a>开漏输出模式</h2><ul><li><p>传统51单片机 P0 口为开漏输出模式。</p></li><li><p>当端口输出为“1”时候驱动电流 P0 为 0uA.。 若做I&#x2F;O口用必须加上拉电阻（4.7-10K）。</p></li><li><p>当端口输出为“0”时候驱动灌电流 P0 为 12mA。</p></li><li><p>开漏输出模式可用于I2C通讯中，确保在与某个设备通讯中，不受到总线上其他设备的干扰。</p></li></ul><img src="https://cdn.jsdelivr.net/gh/jiejie081/pic/img/202204151909797.png" alt="开漏模式内部电路" width="30%" height="30%" align="middle"/><h2 id="准双向-x2F-弱上拉模式"><a href="#准双向-x2F-弱上拉模式" class="headerlink" title="准双向&#x2F;弱上拉模式"></a>准双向&#x2F;弱上拉模式</h2><ul><li>传统51单片机 P1、P2、P3 口为准双向&#x2F;弱上拉模式。</li><li>当端口输出为“1”时，驱动电流为220 uA 。允许外部装置将其拉低。</li><li>当端口输出为“1”时，驱动灌电流为6 mA 。允许外部装置将其拉低。</li><li>这就是为什么一般选择用单片机的端口输出“0”低电平来驱动外部设备。</li></ul><img src="https://cdn.jsdelivr.net/gh/jiejie081/pic/img/202204151933038.png" alt="开漏模式内部电路" width="30%" height="30%" align="middle"/><h2 id="单片机I-x2F-O口其他模式"><a href="#单片机I-x2F-O口其他模式" class="headerlink" title="单片机I&#x2F;O口其他模式"></a>单片机I&#x2F;O口其他模式</h2><p>单片机的I&#x2F;O口还有&#x3D;&#x3D;推挽输出模式&#x3D;&#x3D;、&#x3D;&#x3D;高阻输入模式&#x3D;&#x3D;</p><p>现在我对这还不是很了解，这里就不写了，以后这方面知识了解清楚了再来补充。</p><h2 id="关于单片机的GPIO模式"><a href="#关于单片机的GPIO模式" class="headerlink" title="关于单片机的GPIO模式"></a>关于单片机的GPIO模式</h2><blockquote><p>以上是之前看 STC89C52 数据手册的写的</p><p>最近看到视频将单片机GPIO有两种工作模式一种是 <code>推挽输出</code> ,另一种是 <code>高阻态输出</code></p><p>举例是用STM32单片机举例，由于 ARM架构的STM32单片机 还没有学习，不是很了解，所以这里还是先把视频贴出来，后面学习了再过来更新。</p></blockquote><iframe  src="//player.bilibili.com/player.html?aid=768540508&bvid=BV1Pr4y1n74J&cid=584968614&page=1"  scrolling="no" border="0" frameborder="no" framespacing="0" allowfullscreen="true" height="480" width="800"> </iframe>]]></content>
      
      
      <categories>
          
          <category> 51单片机 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 51单片机 </tag>
            
            <tag> Keil </tag>
            
            <tag> STC </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>51单片机-定时器</title>
      <link href="/p/aa8994ba.html"/>
      <url>/p/aa8994ba.html</url>
      
        <content type="html"><![CDATA[<h1 id="定时器-x2F-计数器⏰"><a href="#定时器-x2F-计数器⏰" class="headerlink" title="定时器&#x2F;计数器⏰"></a>定时器&#x2F;计数器⏰</h1><h2 id="CPU时序的相关知识时间⌛"><a href="#CPU时序的相关知识时间⌛" class="headerlink" title="CPU时序的相关知识时间⌛"></a>CPU时序的相关知识时间⌛</h2><ul><li><p>&#x3D;&#x3D;振荡周期&#x3D;&#x3D;：为单片机提供定时信号的振荡源的周期（晶振周期或外加振荡周期）</p></li><li><p>&#x3D;&#x3D;状态周期&#x3D;&#x3D;：2个振荡周期为1个状态周期，用S表示。振荡周期又称S周期或时钟周期。</p></li><li><p>&#x3D;&#x3D;机器周期&#x3D;&#x3D;：1个机器周期含6个状态周期，12个振荡周期。</p></li><li><p>&#x3D;&#x3D;指令周期&#x3D;&#x3D;：完成1条指令所占用的全部时间，它以机器周期为单位。</p></li></ul><blockquote><p>例如：外接晶振为12 MHz时，51单片机相关周期的具体值为：</p><ul><li><p>Hz 是赫兹,频率单位, 1 MHz(兆赫) &#x3D; 1000 KHz (千赫)&#x3D; 1000000 HZ</p></li><li><p>振荡周期&#x3D;1&#x2F;12 us;</p></li><li><p>状态周期&#x3D;1&#x2F;6 us;</p></li><li><p>机器周期&#x3D;1 us;</p></li><li><p>指令周期&#x3D;1~4 us;</p></li></ul></blockquote><h2 id="定时器介绍📃"><a href="#定时器介绍📃" class="headerlink" title="定时器介绍📃"></a>定时器介绍📃</h2><ul><li><p>传统51单片机有两组定时器&#x2F;计数器，因为既可以定时，又可以计数，故称之为&#x3D;&#x3D;定时器&#x2F;计数器&#x3D;&#x3D;。</p></li><li><p>定时器&#x2F;计数器和单片机的CPU是相互独立的。定时器&#x2F;计数器工作的过程是&#x3D;&#x3D;自动完成的&#x3D;&#x3D;，不需要CPU的参与。</p></li><li><p>51单片机中的定时器&#x2F;计数器是根据&#x3D;&#x3D;机器内部的时钟&#x3D;&#x3D;或者是&#x3D;&#x3D;外部的脉冲信号&#x3D;&#x3D;对寄存器中的数据加1。</p></li><li><p>有了定时器&#x2F;计数器之后，可以增加单片机的效率，一些&#x3D;&#x3D;简单的重复加1&#x3D;&#x3D;的工作可以交给定时器&#x2F;计数器处理。CPU转而处理一些复杂的事情。同时可以实现精确定时作用。</p></li><li><p>定时器作用：</p><p>（1）用于计时系统，可实现软件计时，或者使程序每隔一固定时间完成一项操作</p><p>（2）替代长时间的Delay，提高CPU的运行效率和处理速度</p><p>（3）…</p></li></ul><h2 id="STC89C52定时器资源⛽"><a href="#STC89C52定时器资源⛽" class="headerlink" title="STC89C52定时器资源⛽"></a>STC89C52定时器资源⛽</h2><ul><li><p>定时器个数：3个（T0、T1、T2），T0和T1与传统的51单片机兼容，T2是此型号单片机增加的资源</p></li><li><p>注意：定时器的资源和单片机的型号是关联在一起的，不同的型号可能会有不同的定时器个数和操作方式，但一般来说，T0和T1的操作方式是所有51单片机所共有的</p></li></ul><h2 id="定时器原理📳"><a href="#定时器原理📳" class="headerlink" title="定时器原理📳"></a>定时器原理📳</h2><ul><li><p>定时&#x2F;计数器实质上是一个加1计数器。它随着计数器的输入脉冲进行自加1，也就是每来一个脉冲，计数器就自动加1,当加到计数器为全1时，再输入一个脉冲就使计数器回零，且计数器的溢出使相应的中断标志位置1，向CPU发出中断请求（定时&#x2F;计数器中断允许时）。如果定时&#x2F;计数器工作于定时模式，则表示定时时间已到；如果工作于计数模式，则表示计数值已满。</p><p>&#x3D;&#x3D;可见，由溢出时计数器的值减去计数初值才是加1计数器的计数值。&#x3D;&#x3D;</p></li><li><p>简单的说定时器在单片机内部就像一个小闹钟一样，根据时钟的输出信号，每隔“一秒”，计数单元的数值就增加一，当计数单元数值增加到“设定的闹钟提醒时间”时，计数单元就会向中断系统发出中断申请，产生“响铃提醒”，使程序跳转到中断服务函数中执行。</p></li></ul><p><img src="https://cdn.jsdelivr.net/gh/jiejie081/pic/img/image-20220208152101573.png" alt="定时器框图"></p><h2 id="定时器的工作模式💼"><a href="#定时器的工作模式💼" class="headerlink" title="定时器的工作模式💼"></a>定时器的工作模式💼</h2><p>STC89C52 的 T0 和 T1 均有四种工作模式：</p><ul><li><p>模式0：13位定时器&#x2F;计数器</p></li><li><p>模式1：16位定时器&#x2F;计数器&#x3D;&#x3D;（常用）&#x3D;&#x3D;</p></li><li><p>模式2：8位自动重装模式</p></li><li><p>模式3：两个8位计数器</p></li></ul><h2 id="定时器的结构⚙"><a href="#定时器的结构⚙" class="headerlink" title="定时器的结构⚙"></a>定时器的结构⚙</h2><p>这里我分析一下<code>定时器0</code>最常用的模式1，关于其他模式可以再数据手册查看</p><p><img src="https://cdn.jsdelivr.net/gh/jiejie081/pic/img/202204021327481.png" alt="工作模式1"></p><p>定时器部分：</p><ul><li>SYSclk是系统时钟就是晶振周期。</li><li>定时器可以由 <code>0Pin</code> 外部计数脉冲触发，也可以通过通过机器周期来触发。</li></ul><p><img src="https://cdn.jsdelivr.net/gh/jiejie081/pic/img/202204161614905.png" alt="分频模式"></p><p>门控端部分：</p><ul><li><p>门控位GATE具有特殊的作用。</p></li><li><p>当GATE&#x3D;0时，经反相后使或门输出为1，此时仅由TR0控制与门的开启，与门输出1时，控制开关接通，计数开始；</p></li><li><p>当GATE&#x3D;1时，由外中断引脚信号控制或门的输出，此时控制与门的开启由外中断引脚信号和TR0共同控制。当TR0&#x3D;1时，外中断引脚信号引脚的高电平启动计数，外中断引脚信号引脚的低电平停止计数。</p><p>这种方式常用来测量外中断引脚上正脉冲的宽度。</p></li><li><p>所以我们一般情况下将GATE配置为0，TR0配置为0</p></li></ul><p>计数器部分：</p><ul><li>方式1的计数位数是16位，由<code>TL0</code>作为低8位，<code>TH0</code>作为高8位，组成了16位加1计数器 。</li><li>&#x3D;&#x3D;计数个数与计数初值的关系为：X&#x3D;2^16－N&#x3D;&#x3D;</li></ul><p>中断系统部分：</p><img src="https://cdn.jsdelivr.net/gh/jiejie081/pic/img/202204161634371.png" alt="开漏模式内部电路" width="80%" height="50%" align="middle"/><ul><li>我们需要把ET和EA配置为1</li></ul><h2 id="相关寄存器📕"><a href="#相关寄存器📕" class="headerlink" title="相关寄存器📕"></a>相关寄存器📕</h2><p><img src="https://cdn.jsdelivr.net/gh/jiejie081/pic/img/202204021327884.png"></p><h3 id="定时器控制寄存器TCON"><a href="#定时器控制寄存器TCON" class="headerlink" title="定时器控制寄存器TCON"></a>定时器控制寄存器TCON</h3><p><img src="https://cdn.jsdelivr.net/gh/jiejie081/pic/img/202204161643517.png" alt="image-20220416164317506"></p><h3 id="定时器模式寄存器"><a href="#定时器模式寄存器" class="headerlink" title="定时器模式寄存器"></a>定时器模式寄存器</h3><p><img src="https://cdn.jsdelivr.net/gh/jiejie081/pic/img/202204161644363.png" alt="image-20220416164424998"></p><p><strong>M1、M0</strong> ：控制定时器模式。”00“为模式0，”01“为模式1，”10“为模式2，”11“为模式3</p><h2 id="定时器初始化🚩"><a href="#定时器初始化🚩" class="headerlink" title="定时器初始化🚩"></a>定时器初始化🚩</h2><p><strong>初始化程序应完成如下工作：</strong></p><ul><li><p>对TMOD赋值，以确定T0和T1的工作方式。</p></li><li><p>计算初值,并将其写入TH0、TL0或TH1、TL1。</p></li><li><p>中断方式时，则对EA赋值，开放定时器中断。</p></li><li><p>使TR0或TR1置位，启动定时&#x2F;计数器定时或计数。</p></li></ul><h2 id="代码实例📝"><a href="#代码实例📝" class="headerlink" title="代码实例📝"></a>代码实例📝</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;REGX52.H&gt;</span></span></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">  * @brief  定时器0初始化，1毫秒@11.0592MHz</span></span><br><span class="line"><span class="comment">  * @param  无</span></span><br><span class="line"><span class="comment">  * @retval 无</span></span><br><span class="line"><span class="comment">  */</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Timer0Init</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="comment">//TMOD = 0x01;   这种方式后面配定时器1的时候，定时器0就会受到影响</span></span><br><span class="line">TMOD &amp;= <span class="number">0xF0</span>;<span class="comment">//设置定时器模式 与运算使得前四位保留，后四位清除</span></span><br><span class="line">TMOD |= <span class="number">0x01</span>;<span class="comment">//设置定时器模式 或运算使得前四位保留，最低位置1</span></span><br><span class="line">TL0 = <span class="number">0x66</span>;<span class="comment">//设置定时初始值</span></span><br><span class="line">TH0 = <span class="number">0xFC</span>;<span class="comment">//设置定时初始值</span></span><br><span class="line">TF0 = <span class="number">0</span>;<span class="comment">//清除TF0标志</span></span><br><span class="line">TR0 = <span class="number">1</span>;<span class="comment">//定时器0开始计时</span></span><br><span class="line">ET0=<span class="number">1</span>;<span class="comment">//中断配置Timer0开关</span></span><br><span class="line">EA=<span class="number">1</span>;<span class="comment">//中断配置总开关</span></span><br><span class="line">PT0=<span class="number">0</span>;<span class="comment">//优先级</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*定时器中断函数模板</span></span><br><span class="line"><span class="comment">void Timer0_Routine() interrupt 1</span></span><br><span class="line"><span class="comment">&#123;</span></span><br><span class="line"><span class="comment">static unsigned int T0Count;</span></span><br><span class="line"><span class="comment">TL0 = 0x66;//设置定时初始值</span></span><br><span class="line"><span class="comment">TH0 = 0xFC;//设置定时初始值</span></span><br><span class="line"><span class="comment">T0Count++;//T0Count计次，对中断频率进行分频</span></span><br><span class="line"><span class="comment">if(T0Count&gt;=1000)//分频1000次，1000ms</span></span><br><span class="line"><span class="comment">&#123;</span></span><br><span class="line"><span class="comment">T0Count=0;</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">&#125;</span></span><br><span class="line"><span class="comment">&#125;</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 51单片机 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 51单片机 </tag>
            
            <tag> Keil </tag>
            
            <tag> STC </tag>
            
            <tag> 定时器 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>51单片机-中断系统</title>
      <link href="/p/74294b4.html"/>
      <url>/p/74294b4.html</url>
      
        <content type="html"><![CDATA[<h1 id="中断系统"><a href="#中断系统" class="headerlink" title="中断系统"></a>中断系统</h1><h2 id="📔前言"><a href="#📔前言" class="headerlink" title="📔前言"></a>📔前言</h2><p>今天复习📚了以下中断系统与定时器，复习中也到一些知识有了更加深入的理解💪下面分两篇文章梳理😝一下51单片机的中断系统</p><h2 id="🔣概念"><a href="#🔣概念" class="headerlink" title="🔣概念"></a>🔣概念</h2><h3 id="中断与中断系统"><a href="#中断与中断系统" class="headerlink" title="中断与中断系统"></a>中断与中断系统</h3><ul><li><p>中断系统是为使CPU具有对外界紧急事件的实时处理能力而设置的。</p></li><li><p>当中央处理器CPU正在处理某件事的时候外界发生了紧急事件请求，要求CPU暂停当前的工作，转而去处理这个紧急事件，处理完以后，再回到原来被中断的地方，继续原来的工作，这样的过程称为**<font color=red>中断</font><strong>。实现这种功能的部件称为</strong><font color=red >中断系统</font><strong>，请示CPU中断的请求源称为</strong><font color=red >中断源</font>**。</p></li></ul><p><img src="https://cdn.jsdelivr.net/gh/jiejie081/pic/img/202205022229204.png" alt="中断程序流程"></p><h3 id="中断的优先级"><a href="#中断的优先级" class="headerlink" title="中断的优先级"></a>中断的优先级</h3><h3 id="中断的优先级别与中断嵌套"><a href="#中断的优先级别与中断嵌套" class="headerlink" title="中断的优先级别与中断嵌套"></a>中断的优先级别与中断嵌套</h3><ul><li>微型机的中断系统一般允许多个中断源，当几个中断源同时向CPU请求中断，要求为它服务的时候，这就存在CPU优先响应哪一个中断源请求的问题。通常根据中断源的轻重缓急排队，优先处理最紧急事件的中断请求源，即规定每一个中断源有一个**<font color=red >优先级别</font><strong>。</strong>CPU总是先响应优先级别最高的中断请求**。</li><li>当CPU正在处理一个中断源请求的时候（执行相应的中断服务程序)，发生了另外一个优先级比它还高的中断源请求。如果CPU能够皙停对原来中断源的程序服务，转而去处理级别更高的中断请求源，处理完以后，再回到原低级中断服务程序，这样的过程称为**<font color=red >中断嵌套</font>**。这样的中断系统称为多级中断系统，没有中断嵌套功能的中断系统称为单级中断系统。</li></ul><h3 id="51单片机中断优先级的四条原则"><a href="#51单片机中断优先级的四条原则" class="headerlink" title="51单片机中断优先级的四条原则"></a>51单片机中断优先级的四条原则</h3><ol><li><p>CPU同时接收到几个中断时，<strong>首先响应优先级别最高的中断请求</strong>。</p></li><li><p>正在进行的中断过程<strong>不能被新的同级或低优先级的中断请求所中断</strong>。</p></li><li><p>正在进行的低优先级中断服务，<strong>能被高优先级中断请求所中断</strong>。</p></li><li><p>当两个相同优先级的中断同时产生时，<strong>将由查询次序来决定系统先响应哪个中断</strong>。</p></li></ol><blockquote><p>为了实现上述后两条原则，二级中断的中断系统内部设有两个用户不能寻址的优先级状态触发器。其中一个置1，表示正在响应高优先级的中断，它将阻断后来所有的中断请求；另一个置1，表示正在响应低优先级中断，它将阻断后来所有的低优先级中断请求。</p><p>STC89C52系列单片机中断系统具有四个优先级。由低到高分别为优先级0、优先级1、优先级2、优先级3。</p></blockquote><h2 id="STC89C52的中断资源"><a href="#STC89C52的中断资源" class="headerlink" title="STC89C52的中断资源"></a>STC89C52的中断资源</h2><ul><li><p>具有8个中断源。 <strong>INT0</strong>(外部中断0)、<strong>Timer0</strong>（定时器0中断）、<strong>INT1</strong>（外部中断1）、<strong>Timer1</strong>(定时器1中断)、<strong>UART</strong>（串口中断）、<strong>Timer2</strong>（定时器2中断）、<strong>INT2</strong>（外部中断2）、<strong>INT3</strong>(外部中断3）</p></li><li><p>具有四个优先级。由低到高分别为优先级0、优先级1、优先级2、优先级3。</p></li><li><p>中断号：</p><p><img src="https://cdn.jsdelivr.net/gh/jiejie081/pic/img/image-20220208154415829.png" alt="中断号"></p></li><li><p>注意：中断的资源和单片机的型号是关联在一起的，不同的型号可能会有不同的中断资源，例如中断源个数不同、中断优先级个数不同等等</p></li></ul><h2 id="STC89C52的中断系统结构"><a href="#STC89C52的中断系统结构" class="headerlink" title="STC89C52的中断系统结构"></a>STC89C52的中断系统结构</h2><h3 id="中断结构"><a href="#中断结构" class="headerlink" title="中断结构"></a>中断结构</h3><p><img src="https://cdn.jsdelivr.net/gh/jiejie081/pic/img/202205022230269.png" alt="中断结构">、</p><h3 id="中断触发条件"><a href="#中断触发条件" class="headerlink" title="中断触发条件"></a>中断触发条件</h3><p><img src="https://cdn.jsdelivr.net/gh/jiejie081/pic/img/202205022231545.png" alt="中断触发条件"></p><h2 id="STC89C52的中断相关寄存器"><a href="#STC89C52的中断相关寄存器" class="headerlink" title="STC89C52的中断相关寄存器"></a>STC89C52的中断相关寄存器</h2><ul><li><p>寄存器是连接软硬件的媒介</p></li><li><p>在单片机中寄存器就是一段特殊的RAM存储器，一方面，寄存器可以存储和读取数据，另一方面，每一个寄存器背后都连接了一根导线，控制着电路的连接方式</p></li><li><p>寄存器相当于一个复杂机器的“操作按钮”</p></li></ul><h3 id="中断允许寄存器IE和XICON"><a href="#中断允许寄存器IE和XICON" class="headerlink" title="中断允许寄存器IE和XICON"></a>中断允许寄存器IE和XICON</h3><p><img src="https://cdn.jsdelivr.net/gh/jiejie081/pic/img/202205022231582.png" alt="中断允许寄存器IE"></p><ul><li><p>简单说就是中断的开关 </p></li><li><p><strong>EA</strong> 为总开关 <strong>ET0</strong> 为定时&#x2F;计数器0的开关 ,<strong>ES</strong> 为串行口中断开关,<strong>EX0</strong> 为外部中断0的开关</p></li><li><p>置1表示打开  ；置0表示关闭</p></li><li><p>因为TSC89C52有8个中断源，还有还有两个中断源的开关在辅助中断控制寄存器XICON</p></li></ul><h3 id="定时-x2F-计数器中断控制寄存器TCON"><a href="#定时-x2F-计数器中断控制寄存器TCON" class="headerlink" title="定时&#x2F;计数器中断控制寄存器TCON"></a>定时&#x2F;计数器中断控制寄存器TCON</h3><p><img src="https://cdn.jsdelivr.net/gh/jiejie081/pic/img/202205022231317.png" alt="定时/计数器中断控制寄存器TCON"></p><ul><li><strong>IT0</strong>  控制外部中断0的触发方式【置0：为低电平触发方式；置1为下降沿触发方式】</li><li><strong>IE0</strong>  为外部中断0中断请求标志位 【硬件置1，硬件置0，可查询】</li><li><strong>TF0</strong>  为定时&#x2F;计数器0中断请求标志位【硬件置1，硬件置0，可查询】</li></ul><blockquote><p>还有优先级别的相关寄存器这里就不写了，数据手册里面写得非常清楚</p></blockquote><h2 id="中断相应条件"><a href="#中断相应条件" class="headerlink" title="中断相应条件"></a>中断相应条件</h2><ul><li><p>中断源有中断请求；【硬件将中断请求标志位置1】</p></li><li><p>此中断源的中断允许位为1；【中断开关打开】</p></li><li><p>CPU开中断（即<strong>EA&#x3D;1</strong>）；【中断总开关打开】</p></li></ul><h2 id="实验：外部中断0控制LED状态"><a href="#实验：外部中断0控制LED状态" class="headerlink" title="实验：外部中断0控制LED状态"></a>实验：外部中断0控制LED状态</h2><p>让 LED 1~7实现流水灯 而K3控制 LED 8的状态 </p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;REGX52.H&gt;</span></span></span><br><span class="line"></span><br><span class="line">sbit K3=P3^<span class="number">2</span>;</span><br><span class="line">sbit LED=P2^<span class="number">7</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">delay</span><span class="params">(<span class="keyword">unsigned</span> <span class="keyword">int</span> i)</span> <span class="comment">//延时函数，i=1，大约延时10us</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">while</span>(i--);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">INT0_Init</span><span class="params">()</span><span class="comment">//外部中断0初始化</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">IT0=<span class="number">1</span>;<span class="comment">//设置为下降沿触发方式</span></span><br><span class="line">EX0=<span class="number">1</span>;<span class="comment">//打开INT0的中断允许</span></span><br><span class="line">EA=<span class="number">1</span>;<span class="comment">//打开总中断开关</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">INT0_Init();</span><br><span class="line"><span class="keyword">while</span>(<span class="number">1</span>)</span><br><span class="line">&#123;</span><br><span class="line">P2_0 = <span class="number">0</span>;</span><br><span class="line">delay(<span class="number">50000</span>);</span><br><span class="line">P2_0 = <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">P2_1 = <span class="number">0</span>;</span><br><span class="line">delay(<span class="number">50000</span>);</span><br><span class="line">P2_1 = <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">P2_2 = <span class="number">0</span>;</span><br><span class="line">delay(<span class="number">50000</span>);</span><br><span class="line">P2_2 = <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">P2_3 = <span class="number">0</span>;</span><br><span class="line">delay(<span class="number">50000</span>);</span><br><span class="line">P2_3 = <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">P2_4 = <span class="number">0</span>;</span><br><span class="line">delay(<span class="number">50000</span>);</span><br><span class="line">P2_4 = <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">P2_5 = <span class="number">0</span>;</span><br><span class="line">delay(<span class="number">50000</span>);</span><br><span class="line">P2_5 = <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">P2_6 = <span class="number">0</span>;</span><br><span class="line">delay(<span class="number">50000</span>);</span><br><span class="line">P2_6 = <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">INT0</span><span class="params">()</span>interrupt 0<span class="comment">//外部中断0的中断函数</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">delay(<span class="number">1000</span>); <span class="comment">//延时消抖</span></span><br><span class="line"><span class="keyword">if</span>(K3==<span class="number">0</span>)</span><br><span class="line">&#123;</span><br><span class="line">LED=~LED;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 51单片机 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 51单片机 </tag>
            
            <tag> Keil </tag>
            
            <tag> STC </tag>
            
            <tag> 中断系统 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>关于51单片机的内存</title>
      <link href="/p/9c9642.html"/>
      <url>/p/9c9642.html</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>事情是这样子的，今天在用 Keil5 编译代码的时候我发现了一个问题</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;REGX52.H&gt;</span></span></span><br><span class="line"> </span><br><span class="line"><span class="keyword">unsigned</span> <span class="keyword">char</span> LED[]=&#123;<span class="number">0xFE</span>,<span class="number">0xFD</span>,<span class="number">0xFB</span>,<span class="number">0xF7</span>,<span class="number">0xEF</span>,<span class="number">0xDF</span>,<span class="number">0xBF</span>,<span class="number">0x7F</span>,</span><br><span class="line">     <span class="number">0xFE</span>,<span class="number">0xFD</span>,<span class="number">0xFB</span>,<span class="number">0xF7</span>,<span class="number">0xEF</span>,<span class="number">0xDF</span>,<span class="number">0xBF</span>,<span class="number">0x7F</span>,</span><br><span class="line">     <span class="number">0xFE</span>,<span class="number">0xFD</span>,<span class="number">0xFB</span>,<span class="number">0xF7</span>,<span class="number">0xEF</span>,<span class="number">0xDF</span>,<span class="number">0xBF</span>,<span class="number">0x7F</span>,</span><br><span class="line">     <span class="number">0xFE</span>,<span class="number">0xFD</span>,<span class="number">0xFB</span>,<span class="number">0xF7</span>,<span class="number">0xEF</span>,<span class="number">0xDF</span>,<span class="number">0xBF</span>,<span class="number">0x7F</span>,</span><br><span class="line">     <span class="number">0xFE</span>,<span class="number">0xFD</span>,<span class="number">0xFB</span>,<span class="number">0xF7</span>,<span class="number">0xEF</span>,<span class="number">0xDF</span>,<span class="number">0xBF</span>,<span class="number">0x7F</span>,</span><br><span class="line">     <span class="number">0xFE</span>,<span class="number">0xFD</span>,<span class="number">0xFB</span>,<span class="number">0xF7</span>,<span class="number">0xEF</span>,<span class="number">0xDF</span>,<span class="number">0xBF</span>,<span class="number">0x7F</span>,</span><br><span class="line">     <span class="number">0xFE</span>,<span class="number">0xFD</span>,<span class="number">0xFB</span>,<span class="number">0xF7</span>,<span class="number">0xEF</span>,<span class="number">0xDF</span>,<span class="number">0xBF</span>,<span class="number">0x7F</span>,</span><br><span class="line">     <span class="number">0xFE</span>,<span class="number">0xFD</span>,<span class="number">0xFB</span>,<span class="number">0xF7</span>,<span class="number">0xEF</span>,<span class="number">0xDF</span>,<span class="number">0xBF</span>,<span class="number">0x7F</span>,</span><br><span class="line">     <span class="number">0xFE</span>,<span class="number">0xFD</span>,<span class="number">0xFB</span>,<span class="number">0xF7</span>,<span class="number">0xEF</span>,<span class="number">0xDF</span>,<span class="number">0xBF</span>,<span class="number">0x7F</span>,</span><br><span class="line">     <span class="number">0xFE</span>,<span class="number">0xFD</span>,<span class="number">0xFB</span>,<span class="number">0xF7</span>,<span class="number">0xEF</span>,<span class="number">0xDF</span>,<span class="number">0xBF</span>,<span class="number">0x7F</span>,</span><br><span class="line">     <span class="number">0xFE</span>,<span class="number">0xFD</span>,<span class="number">0xFB</span>,<span class="number">0xF7</span>,<span class="number">0xEF</span>,<span class="number">0xDF</span>,<span class="number">0xBF</span>,<span class="number">0x7F</span>,</span><br><span class="line">     <span class="number">0xFE</span>,<span class="number">0xFD</span>,<span class="number">0xFB</span>,<span class="number">0xF7</span>,<span class="number">0xEF</span>,<span class="number">0xDF</span>,<span class="number">0xBF</span>,<span class="number">0x7F</span>,</span><br><span class="line">     <span class="number">0xFE</span>,<span class="number">0xFD</span>,<span class="number">0xFB</span>,<span class="number">0xF7</span>,<span class="number">0xEF</span>,<span class="number">0xDF</span>,<span class="number">0xBF</span>,<span class="number">0x7F</span>,</span><br><span class="line">     <span class="number">0xFE</span>,<span class="number">0xFD</span>,<span class="number">0xFB</span>,<span class="number">0xF7</span>,<span class="number">0xEF</span>,<span class="number">0xDF</span>,<span class="number">0xBF</span>,<span class="number">0x7F</span>,</span><br><span class="line">     <span class="number">0xFE</span>,<span class="number">0xFD</span>,<span class="number">0xFB</span>,<span class="number">0xF7</span>,<span class="number">0xEF</span>,<span class="number">0xDF</span>,<span class="number">0xBF</span>,<span class="number">0x7F</span>,</span><br><span class="line">     <span class="number">0xFE</span>,<span class="number">0xFD</span>,<span class="number">0xFB</span>,<span class="number">0xF7</span>,<span class="number">0xEF</span>,<span class="number">0xDF</span>,<span class="number">0xBF</span>,<span class="number">0x7F</span>,</span><br><span class="line">     <span class="number">0xFE</span>,<span class="number">0xFD</span>,<span class="number">0xFB</span>,<span class="number">0xF7</span>,<span class="number">0xEF</span>,<span class="number">0xDF</span>,<span class="number">0xBF</span>,<span class="number">0x7F</span>,&#125;;<span class="comment">//定义数组</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"> <span class="keyword">while</span>(<span class="number">1</span>)&#123;</span><br><span class="line"></span><br><span class="line"> &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p> 当我编译以上代码的时候会出现 <code>main.c(28): error C249: &#39;DATA&#39;: SEGMENT TOO LARGE</code> </p><p>Data 段太长的错误，这个很好解决，就是STC89C52的RAM比较小存不下，</p><p>只要把他存到ROM里面不就可以了！</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">unsigned</span> <span class="keyword">char</span> code LED[] <span class="comment">//声明数组的时候在这里加个 code就可以了</span></span><br></pre></td></tr></table></figure><p>但是在编译一段定义数组不是很长的代码时候，我又发现一个很奇怪的问题❓</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;REGX52.H&gt;</span></span></span><br><span class="line"> </span><br><span class="line"><span class="keyword">unsigned</span> <span class="keyword">char</span>  LED[]=&#123;<span class="number">0xFE</span>,<span class="number">0xFD</span>,<span class="number">0xFB</span>,<span class="number">0xF7</span>,<span class="number">0xEF</span>,<span class="number">0xDF</span>,<span class="number">0xBF</span>,<span class="number">0x7F</span>,</span><br><span class="line">      <span class="number">0xFE</span>,<span class="number">0xFD</span>,<span class="number">0xFB</span>,<span class="number">0xF7</span>,<span class="number">0xEF</span>,<span class="number">0xDF</span>,<span class="number">0xBF</span>,<span class="number">0x7F</span>,&#125;;<span class="comment">//定义数组</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"> <span class="keyword">while</span>(<span class="number">1</span>)&#123;</span><br><span class="line"></span><br><span class="line"> &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>编译怎么一段代码的时候，我发现</p><p><img src="C:\Users\zhanghuanjie\AppData\Roaming\Typora\typora-user-images\image-20220328100613811.png" alt="image-20220328100613811"></p><p>项目大小 data是25字节  code 是164字节</p><p>但是在我直接把数组存到ROM中的时候，就是在声明数组的时候多加 code，这时候 </p><p><img src="C:\Users\zhanghuanjie\AppData\Roaming\Typora\typora-user-images\image-20220328100856457.png" alt="image-20220328100856457"></p><p>项目大小 data是9字节 code 是33字节   都变小了？？？？？</p><p>我所知道的data 应该指的RAM    code 指的应该是ROM</p><p>但是我把数组放到ROM 里面为什么RAM 、ROM所占用的空间字节都变小了？？？？？</p><p>为此我产生了以下疑问：</p><ol><li>内存ROM、RAM、FLASH之间到底有什么区别？</li><li>51单片机中是怎么存程序怎么存变量的？</li></ol><p>为此我查阅了很多资料</p><h2 id="ROM、RAM、FALSH"><a href="#ROM、RAM、FALSH" class="headerlink" title="ROM、RAM、FALSH"></a>ROM、RAM、FALSH</h2><p>我一开始的理解是 ROM 就相当于电脑的硬盘（掉电仍数据不丢失），RAM 就相当于电脑的内存（掉电丢失，就像剪切板中的内容，关机重启后就没有了）那FLASH就是固态硬盘？？</p><h3 id="ROM"><a href="#ROM" class="headerlink" title="ROM"></a>ROM</h3><p><strong>ROM(Read Only Memory)只读存储器</strong></p><p>顾名思义，它是一种只能读出事先所存的数据的固态半导体存储器。ROM中所存数据稳定，一旦存储数据就再也无法将之改变或者删除，断电后所存数据也不会消失。其结构简单，因而常用于存储各种固化程序和数据。</p><p>ROM最初不能编程，出厂什么内容就永远什么内容，不灵活。后来出现了PROM，可以自己写入一次，要是写错了，只能换一片，自认倒霉。人类文明不断进步，终于出现了可多次擦除写入的EPROM，每次擦除要把芯片拿到紫外线上照一下，想一下你往单片机上下了一个程序之后发现有个地方需要加一句话，为此你要把单片机放紫外灯下照半小时，然后才能再下一次，这么折腾一天也改不了几次。历史的车轮不断前进，伟大的EEPROM出现了，拯救了一大批程序员，终于可以随意的修改ROM中的内容了。</p><h3 id="EEPROM"><a href="#EEPROM" class="headerlink" title="EEPROM"></a>EEPROM</h3><p><strong>EEPROM （Electrically Erasable Programmable read only memory)带电可擦可编程只读存储器</strong></p><p>这种ROM的特点是可以随机访问和修改任何一个字节，可以往每个 bit 中写入0或者1。这是最传统的一种EEPROM ，掉电后数据不丢失，可以保存100年，可以擦写100w次。具有较高的可靠性，但是电路复杂&#x2F;成本也高。因此目前的 EEPROM 都是几十千字节到几百千字节的，绝少有超过512K的。STC89C52拥有5K的EEPEOM。</p><h3 id="FLASH-闪存"><a href="#FLASH-闪存" class="headerlink" title="FLASH(闪存)"></a>FLASH(闪存)</h3><p><strong>FLASH</strong> 全称<strong>Flash Memory</strong>，<em><strong>Flash 属于广义的 EEPROM</strong></em> ，因为它也是电擦除的 ROM 。但是为了区别于一般的按字节为单位的擦写的 EEPROM ，我们都叫它 Flash 。</p><p>Flash 做的改进就是擦除时不再以字节为单位，而是以块为单位，以此简化了电路，数据密度更高，降低了成本。所以上M的 ROM 一般都是 Flash 。</p><p><strong>Flash</strong>分为<strong>NOR Flash</strong>和 <strong>NAND Flash</strong> 。</p><p><strong>NOR Flash</strong>数据线和地址线分开，可以实现RAM一样的随机寻址功能，可以读取任何一个字节。但是擦除仍要按块来擦。</p><p><strong>NAND Flash</strong>同样是按块擦除，但是数据线和地址线复用，不能利用地址线随机寻址。读取只能按页来读取。（NAND Flash按块来擦除，按页来读，NOR Flash没有页）</p><p>由于 NAND Flash 引脚上复用，因此读取速度比 NOR Flash 慢一点，但是擦除和写入速度比 NOR Flash 快很多。NAND  Flash内部电路更简单，因此数据密度大，体积小，成本也低。因此大容量的Flash都是NAND型的。小容量的2～12M的Flash多是NOR型的。</p><p>使用寿命上，NAND Flash的擦除次数是 NOR 的数倍。而且 NAND Flash 可以标记坏块，从而使软件跳过坏块。NOR Flash 一旦损坏便无法再用。</p><p>因为 NOR Flash可以进行字节寻址，所以程序可以在NOR Flash中运行。嵌入式系统多用一个小容量的NOR Flash存储引导代码，用一个大容量的NAND Flash存放文件系统和内核。</p><h3 id="FLASH-和-EEPROM-的区别"><a href="#FLASH-和-EEPROM-的区别" class="headerlink" title="FLASH 和 EEPROM 的区别"></a>FLASH 和 EEPROM 的区别</h3><p>这里我认为最主要的区别是</p><p><strong>EEPROM 可以按“位”擦写，而FLASH 只能一大片一大片的擦。</strong></p><p>当然还有读入速度、价钱、擦写次数上的区别。</p><h3 id="RAM"><a href="#RAM" class="headerlink" title="RAM"></a>RAM</h3><p><strong>RAM (Random Access Memory)随机访问存储器</strong></p><p>存储单元的内容可按照需要随机取出或存入，且存取的速度与存储单元的位置无关。这种存储器在断电时，将丢失其存储内容，所以主要用于存储短时间使用的程序。速度比ROM、FLASH快。</p><p><strong>RAM</strong> 分为 <strong>SRAM(静态随机存储器)</strong> 和 <strong>DRAM(动态随机存储器)</strong></p><h4 id="SRAM"><a href="#SRAM" class="headerlink" title="SRAM"></a>SRAM</h4><p>静态存储单元是在静态触发器的基础上附加门控管而构成的。因此，它是靠触发器的自保功能存储数据的。SRAM存放的信息在不停电的情况下能长时间保留，状态稳定，不需外加刷新电路，从而简化了外部电路设计。但由于SRAM的基本存储电路中所含晶体管较多，故集成度较低，且功耗较大。</p><h4 id="DRAM"><a href="#DRAM" class="headerlink" title="DRAM"></a>DRAM</h4><p>DRAM利用电容存储电荷的原理保存信息，电路简单，集成度高。由于任何电容都存在漏电，因此，当电容存储有电荷时，过一段时间由于电容放电会导致电荷流失，使保存信息丢失。解决的办法是每隔一定时间（一般为2ms）须对DRAM进行读出和再写入，使原处于逻辑电平“l”的电容上所泄放的电荷又得到补充，原处于电平“0”的电容仍保持“0”，这个过程叫DRAM的刷新。</p><p>因为 DRAM 需要不断地刷新电路，所以速度上比SRAM 要慢一点。</p><h3 id="关于ROM、RAM、FLASH原理"><a href="#关于ROM、RAM、FLASH原理" class="headerlink" title="关于ROM、RAM、FLASH原理"></a>关于ROM、RAM、FLASH原理</h3><p>我在B本站上看到了这个up主讲的很好</p><iframe src="//player.bilibili.com/player.html?aid=850506632&bvid=BV13L4y1b7So&cid=480488038&page=1" scrolling="no" border="0" frameborder="no" framespacing="0" allowfullscreen="true" height="480" width="800"> </iframe><h2 id="51单片机的存储"><a href="#51单片机的存储" class="headerlink" title="51单片机的存储"></a>51单片机的存储</h2><p><img src="C:\Users\zhanghuanjie\AppData\Roaming\Typora\typora-user-images\image-20220328183231897.png" alt="image-20220328183231897"></p><p>参考手册我发现 STC89C52 单片机 内置有8K的 Flash 程序存储器 、512字节的 SRAM 和5K 的 EEPROM。</p><table><thead><tr><th align="left">类型</th><th align="left">功能</th></tr></thead><tbody><tr><td align="left">Flash</td><td align="left">在单片机工作的时候只可以读，不可以写，掉电不丢失数据</td></tr><tr><td align="left">SRAM</td><td align="left">可以读，可以写，但是掉电会丢失数据</td></tr><tr><td align="left">EEPROM</td><td align="left">可以读，可以写，掉电不丢失数据</td></tr></tbody></table><p>这样就很好理解他们的作用，和最开始的问题了</p><table><thead><tr><th align="left">类型</th><th align="left">负责</th></tr></thead><tbody><tr><td align="left">Flash</td><td align="left">只负责存储程序，如果定义变量的时候加个 code 就是让数据存到Flash中。</td></tr><tr><td align="left">SRAM</td><td align="left">负责存储数据，可以读取，可以改变变量的值，一般我们定义的变量默认要放到RAM里面。</td></tr><tr><td align="left">EEPROM</td><td align="left">负责存储数据，这数据是单片机可以写入的，而却掉电不会丢失。就比如一个时钟，定一个通过按键操作设定6点的闹钟，这时候把数据写入EEPROM就可以将数据存储起来，掉电后数据依然存在。</td></tr></tbody></table><h2 id="最开始的问题"><a href="#最开始的问题" class="headerlink" title="最开始的问题"></a>最开始的问题</h2><p>为什么我们把在数组前加上code ，让数组存到 Flash 中，但是code反而变小了?</p><p>因为 RAM 是掉电丢失数据的， 所以Flash需要存有变量的所有信息，上电后将信息存到 RAM 中，而且还有操作变量存入 RAM 的指令也要存在 Flash 中。</p><p>而将变量直接写入 Flash 中，就少了 操作 RAM 的指令的那一部分代码。</p><p>这样程序占用 Flash 的空间就反而变少了</p><h2 id="几个问题"><a href="#几个问题" class="headerlink" title="几个问题"></a>几个问题</h2><h3 id="问题一"><a href="#问题一" class="headerlink" title="问题一"></a>问题一</h3><p>如果变量没有赋初值，那么程序占用Flash 和 RAM 的情况是怎么样的呢？</p><p>为了解决这个问题我做了以下实验：</p><p><img src="C:\Users\zhanghuanjie\AppData\Roaming\Typora\typora-user-images\image-20220328203319915.png" alt="图一：变量i 不赋初值"></p><p><img src="C:\Users\zhanghuanjie\AppData\Roaming\Typora\typora-user-images\image-20220328203010353.png" alt="图二 变量i 赋初值"></p><p><img src="C:\Users\zhanghuanjie\AppData\Roaming\Typora\typora-user-images\image-20220328203114672.png" alt="图三：code变量i 赋初值"></p><p><img src="C:\Users\zhanghuanjie\AppData\Roaming\Typora\typora-user-images\image-20220328203140616.png" alt="图四： code变量i 不赋初值"></p><p>由此实验我们可知：</p><ol><li>若变量不赋初值，那么data 、code 都暂用 1 个字节。 Flash 开辟 RAM 不需要指令空间</li><li>若变量赋初值，   那么数据占用1个字节，而 Flash 开辟 RAM 空间并赋值 需要2个字节的指令空间</li></ol><h3 id="问题二"><a href="#问题二" class="headerlink" title="问题二"></a>问题二</h3><p>在变量前 const 和 code 有什么区别？</p><ol><li>是从两个层面是变量不可以更改</li><li>在变量前加 const 是从软件层面声明 常量 ，他一样会存到RAM中，因为声明了是常量所以不可以更改。</li><li>在变量前加 code  是指☞将变量存放在Flash中，而 Flash 是不支持单片机更改数据的。</li></ol><p><a href="https://blog.csdn.net/xust999/article/details/5825153?spm=1001.2101.3001.6650.12&utm_medium=distribute.pc_relevant.none-task-blog-2~default~CTRLIST~Rate-12.pc_relevant_aa&depth_1-utm_source=distribute.pc_relevant.none-task-blog-2~default~CTRLIST~Rate-12.pc_relevant_aa"> EEPROM、EPROM、FLASH的区别总结_</a></p><p> <a href="https://blog.csdn.net/yuanlulu/article/details/6163106">EEPROM和flash的区别</a></p>]]></content>
      
      
      <categories>
          
          <category> 51单片机 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 51单片机 </tag>
            
            <tag> Keil </tag>
            
            <tag> STC </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>51单片机-DS1302实时时钟</title>
      <link href="/p/9d7d1482.html"/>
      <url>/p/9d7d1482.html</url>
      
        <content type="html"><![CDATA[<h2 id="DS1302实时时钟"><a href="#DS1302实时时钟" class="headerlink" title="DS1302实时时钟"></a>DS1302实时时钟</h2><h3 id="DS1302介绍"><a href="#DS1302介绍" class="headerlink" title="DS1302介绍"></a>DS1302介绍</h3><ul><li><p>DS1302是由美国DALLAS公司推出的具有涓细电流充电能力的低功耗实时时钟芯片。它可以对年、月、日、周、时、分、秒进行计时，且具有闰年补偿等多种功能</p></li><li><p>RTC(Real Time Clock)：实时时钟，是一种集成电路，通常称为时钟芯片</p></li><li><p>其他实时时钟芯片还有DS12C877 （自带晶振、锂电池）   DS3231（精度高、自带晶振）</p></li></ul><p><img src="https://cdn.jsdelivr.net/gh/jiejie081/pic/img/image-20220228145017581.png" alt="DS1302芯片"></p><h3 id="引脚定义与应用电路"><a href="#引脚定义与应用电路" class="headerlink" title="引脚定义与应用电路"></a>引脚定义与应用电路</h3><p><img src="https://cdn.jsdelivr.net/gh/jiejie081/pic/img/image-20220228145525315.png" alt="DS1302引脚定义与应用电路"></p><table><thead><tr><th align="center"><strong>引脚名</strong></th><th align="center"><strong>作用</strong></th><th align="center"><strong>引脚名</strong></th><th align="center"><strong>作用</strong></th></tr></thead><tbody><tr><td align="center">VCC2</td><td align="center">主电源</td><td align="center">CE</td><td align="center">芯片使能</td></tr><tr><td align="center">VCC1</td><td align="center">备用电池</td><td align="center">IO</td><td align="center">数据输入&#x2F;输出</td></tr><tr><td align="center">GND</td><td align="center">电源地</td><td align="center">SCLK</td><td align="center">串行时钟</td></tr><tr><td align="center">X1、X2</td><td align="center">32.768KHz晶振</td><td align="center"></td><td align="center"></td></tr></tbody></table><h3 id="内部框图"><a href="#内部框图" class="headerlink" title="内部框图"></a>内部框图</h3><p><img src="https://cdn.jsdelivr.net/gh/jiejie081/pic/img/image-20220228150036917.png" alt="DS1302内部框图"></p><h3 id="寄存器定义"><a href="#寄存器定义" class="headerlink" title="寄存器定义"></a>寄存器定义</h3><p><img src="https://cdn.jsdelivr.net/gh/jiejie081/pic/img/image-20220228150336570.png" alt="DS1302寄存器定义"></p><ul><li>WP：WriteProtect 写入保护，若这一位寄存器置1，则开启写保护，无法写入</li><li>TCS: 控制涓流充电、</li></ul><p><img src="https://cdn.jsdelivr.net/gh/jiejie081/pic/img/image-20220228151030546.png" alt="image-20220228151030546"></p><ul><li>用于完成读写（在哪读，在哪写）</li><li>第六位 控制RAM或者CK寄存器 （CK上面一横表示低电平有效）所以这一位置1控制RAM寄存器 置0控制CK寄存器</li><li>第五位到第第一位： 寄存器地址</li><li>第零位： 写入保护（低电平有效）所以0是写 1是读</li></ul><h3 id="时序定义"><a href="#时序定义" class="headerlink" title="时序定义"></a>时序定义</h3><p><img src="https://cdn.jsdelivr.net/gh/jiejie081/pic/img/image-20220228153348284.png" alt="DS1302时序定义"></p><p>单字节写：</p><ol><li><p>CE置高电平</p></li><li><p>I&#x2F;O口给数据</p></li><li><p>SCLK时钟给上升沿</p><p>数据写入单片机</p></li><li><p>SLCK时钟给下降沿</p></li><li><p>重复第2.3.4步到数据写完</p></li><li><p>CE置低电平</p></li></ol><p>单字符读：</p><ol><li><p>CE置高电平</p></li><li><p>I&#x2F;O口给数据（命令字）</p></li><li><p>SCLK时钟给上升沿</p><p>数据写入单片机</p></li><li><p>SLCK时钟给下降沿</p></li><li><p>重复第2.3.4步到命令字符写完</p></li><li><p>单片机释放I&#x2F;O口，有DS1302控制I&#x2F;O口输出</p></li><li><p>SLCK时钟给下降沿</p></li><li><p>I&#x2F;O口输出一位数据</p></li><li><p>SLCK时钟给上升沿</p></li><li><p>重复7.8.9步骤到数据全部输出</p></li><li><p>CE置低电平</p></li></ol><h3 id="DS1302在开发板中的连接"><a href="#DS1302在开发板中的连接" class="headerlink" title="DS1302在开发板中的连接"></a>DS1302在开发板中的连接</h3><p><img src="https://cdn.jsdelivr.net/gh/jiejie081/pic/img/image-20220228155059705.png" alt="DS1302在开发板中的连接"></p><h3 id="BCD码"><a href="#BCD码" class="headerlink" title="BCD码"></a>BCD码</h3><ul><li><p>BCD码（Binary Coded Decimal‎），用4位二进制数来表示1位十进制数</p></li><li><p>二进制BIn   十进制Dec   十六进制 Hex    八进制Oct  </p></li><li><p>例：0001 0011表示13，1000 0101表示85，0001 1010不合法</p></li><li><p>BCD码：二进制低四位表示十进制个位     二进制高四位表示是十进制十位</p></li><li><p>在十六进制中的体现：0x13表示13，0x85表示85，0x1A不合法</p></li><li><p>BCD码转十进制：<strong>DEC&#x3D;BCD&#x2F;16*10+BCD%16; （2位BCD）</strong></p></li><li><p>十进制转BCD码：<strong>BCD&#x3D;DEC&#x2F;10*16+DEC%10; （2位BCD）</strong></p></li></ul>]]></content>
      
      
      <categories>
          
          <category> 51单片机 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 51单片机 </tag>
            
            <tag> Keil </tag>
            
            <tag> STC </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>51单片机-LED点阵屏</title>
      <link href="/p/f040d0e9.html"/>
      <url>/p/f040d0e9.html</url>
      
        <content type="html"><![CDATA[<h2 id="LED点阵屏"><a href="#LED点阵屏" class="headerlink" title="LED点阵屏"></a>LED点阵屏</h2><h3 id="LED点阵屏介绍"><a href="#LED点阵屏介绍" class="headerlink" title="LED点阵屏介绍"></a>LED点阵屏介绍</h3><ul><li><p>LED点阵屏由若干个独立的LED组成，LED以矩阵的形式排列，以灯珠亮灭来显示文字、图片、视频等。LED点阵屏广泛应用于各种公共场合，如汽车报站器、广告屏以及公告牌等</p></li><li><p>LED点阵屏分类</p><p>按颜色：单色、双色、全彩</p><p>按像素：8×8、16×16等（大规模的LED点阵通常由很多个小点阵拼接而成）</p></li></ul><h3 id="显示原理"><a href="#显示原理" class="headerlink" title="显示原理"></a>显示原理</h3><ul><li><p>LED点阵屏的结构类似于数码管，只不过是数码管把每一列的像素以“8”字型排列而已</p></li><li><p>LED点阵屏与数码管一样，有共阴和共阳两种接法，不同的接法对应的电路结构不同</p></li><li><p>LED点阵屏需要进行逐行或逐列扫描，才能使所有LED同时显示</p></li></ul><h3 id="LED点阵屏的连接"><a href="#LED点阵屏的连接" class="headerlink" title="LED点阵屏的连接"></a>LED点阵屏的连接</h3><p><img src="https://cdn.jsdelivr.net/gh/jiejie081/pic/img/image-20220213105907909.png" alt="LED点阵屏的连接"></p><p><img src="https://cdn.jsdelivr.net/gh/jiejie081/pic/img/image-20220213105932002.png" alt="与74HC595连接"></p><h3 id="74HC595"><a href="#74HC595" class="headerlink" title="74HC595"></a>74HC595</h3><img src="https://cdn.jsdelivr.net/gh/jiejie081/pic/img/202205022345404.png" alt="开漏模式内部电路" width="70%" height="30%" align="middle"/><blockquote><p>SER为数据输入</p><p>SERCKL 上升沿移位</p><p>RCLK      上升沿锁存 </p></blockquote><h3 id="C51的sfr、sbit"><a href="#C51的sfr、sbit" class="headerlink" title="C51的sfr、sbit"></a>C51的sfr、sbit</h3><ul><li><p>sfr（special function register）：特殊功能寄存器声明</p><p>例：sfr P0 &#x3D; 0x80;</p><p>声明P0口寄存器，物理地址为0x80</p></li><li><p>sbit（special bit）：特殊位声明</p><p>例：sbit P0_1 &#x3D; 0x81;  或  sbit P0_1 &#x3D; P0^1;</p><p>声明P0寄存器的第1位</p></li><li><p>可位寻址&#x2F;不可位寻址：在单片机系统中，操作任意寄存器或者某一位的数据时，必须给出其物理地址，又因为一个寄存器里有8位，所以位的数量是寄存器数量的8倍，单片机无法对所有位进行编码，故每8个寄存器中，只有一个是可以位寻址的。对不可位寻址的寄存器，若要只操作其中一位而不影响其它位时，可用“&amp;&#x3D;”、“|&#x3D;”、“^&#x3D;”的方法进行位操作</p></li></ul><h3 id="代码演示"><a href="#代码演示" class="headerlink" title="代码演示"></a>代码演示</h3><h4 id="现实静态"><a href="#现实静态" class="headerlink" title="现实静态"></a>现实静态</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;REGX52.H&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&quot;Delay.h&quot;</span></span></span><br><span class="line"></span><br><span class="line">sbit RCK=P3^<span class="number">5</span>;<span class="comment">//RCLK</span></span><br><span class="line">sbit SCK=P3^<span class="number">6</span>;<span class="comment">//SRCLK</span></span><br><span class="line">sbit SER=P3^<span class="number">4</span>;<span class="comment">//SER</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MATRIX_LED_PORTP0</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">  * @brief  74HC595写入一个字节</span></span><br><span class="line"><span class="comment">  * @param  Byte 要写入的字节</span></span><br><span class="line"><span class="comment">  * @retval 无</span></span><br><span class="line"><span class="comment">  */</span></span><br><span class="line"><span class="keyword">void</span> _74HC595_WriteByte(<span class="keyword">unsigned</span> <span class="keyword">char</span> Byte)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">unsigned</span> <span class="keyword">char</span> i;</span><br><span class="line"><span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;<span class="number">8</span>;i++)</span><br><span class="line">&#123;</span><br><span class="line">SER=Byte&amp;(<span class="number">0x80</span>&gt;&gt;i);</span><br><span class="line">SCK=<span class="number">1</span>;</span><br><span class="line">SCK=<span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line">RCK=<span class="number">1</span>;</span><br><span class="line">RCK=<span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">  * @brief  LED点阵屏显示一列数据</span></span><br><span class="line"><span class="comment">  * @param  Column 要选择的列，范围：0~7，0在最左边</span></span><br><span class="line"><span class="comment">  * @param  Data 选择列显示的数据，高位在上，1为亮，0为灭</span></span><br><span class="line"><span class="comment">  * @retval 无</span></span><br><span class="line"><span class="comment">  */</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">MatrixLED_ShowColumn</span><span class="params">(<span class="keyword">unsigned</span> <span class="keyword">char</span> Column,Data)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">_74HC595_WriteByte(Data);</span><br><span class="line">MATRIX_LED_PORT=~(<span class="number">0x80</span>&gt;&gt;Column);</span><br><span class="line">Delay(<span class="number">1</span>);</span><br><span class="line">MATRIX_LED_PORT=<span class="number">0xFF</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">SCK=<span class="number">0</span>;</span><br><span class="line">RCK=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">while</span>(<span class="number">1</span>)</span><br><span class="line">&#123;</span><br><span class="line">MatrixLED_ShowColumn(<span class="number">0</span>,<span class="number">0x3C</span>);</span><br><span class="line">MatrixLED_ShowColumn(<span class="number">1</span>,<span class="number">0x42</span>);</span><br><span class="line">MatrixLED_ShowColumn(<span class="number">2</span>,<span class="number">0xA9</span>);</span><br><span class="line">MatrixLED_ShowColumn(<span class="number">3</span>,<span class="number">0x85</span>);</span><br><span class="line">MatrixLED_ShowColumn(<span class="number">4</span>,<span class="number">0x85</span>);</span><br><span class="line">MatrixLED_ShowColumn(<span class="number">5</span>,<span class="number">0xA9</span>);</span><br><span class="line">MatrixLED_ShowColumn(<span class="number">6</span>,<span class="number">0x42</span>);</span><br><span class="line">MatrixLED_ShowColumn(<span class="number">7</span>,<span class="number">0x3C</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="现实动态"><a href="#现实动态" class="headerlink" title="现实动态"></a>现实动态</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;REGX52.H&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&quot;Delay.h&quot;</span></span></span><br><span class="line">sbit RCK=P3^<span class="number">5</span>;<span class="comment">//RCLK</span></span><br><span class="line">sbit SCK=P3^<span class="number">6</span>;<span class="comment">//SRCLK</span></span><br><span class="line">sbit SER=P3^<span class="number">4</span>;<span class="comment">//SER</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MATRIX_LED_PORTP0</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">  * @brief  74HC595写入一个字节</span></span><br><span class="line"><span class="comment">  * @param  Byte 要写入的字节</span></span><br><span class="line"><span class="comment">  * @retval 无</span></span><br><span class="line"><span class="comment">  */</span></span><br><span class="line"><span class="keyword">void</span> _74HC595_WriteByte(<span class="keyword">unsigned</span> <span class="keyword">char</span> Byte)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">unsigned</span> <span class="keyword">char</span> i;</span><br><span class="line"><span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;<span class="number">8</span>;i++)</span><br><span class="line">&#123;</span><br><span class="line">SER=Byte&amp;(<span class="number">0x80</span>&gt;&gt;i);</span><br><span class="line">SCK=<span class="number">1</span>;</span><br><span class="line">SCK=<span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line">RCK=<span class="number">1</span>;</span><br><span class="line">RCK=<span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">  * @brief  点阵屏初始化</span></span><br><span class="line"><span class="comment">  * @param  无</span></span><br><span class="line"><span class="comment">  * @retval 无</span></span><br><span class="line"><span class="comment">  */</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">MatrixLED_Init</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">SCK=<span class="number">0</span>;</span><br><span class="line">RCK=<span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">  * @brief  LED点阵屏显示一列数据</span></span><br><span class="line"><span class="comment">  * @param  Column 要选择的列，范围：0~7，0在最左边</span></span><br><span class="line"><span class="comment">  * @param  Data 选择列显示的数据，高位在上，1为亮，0为灭</span></span><br><span class="line"><span class="comment">  * @retval 无</span></span><br><span class="line"><span class="comment">  */</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">MatrixLED_ShowColumn</span><span class="params">(<span class="keyword">unsigned</span> <span class="keyword">char</span> Column,Data)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">_74HC595_WriteByte(Data);</span><br><span class="line">MATRIX_LED_PORT=~(<span class="number">0x01</span>&gt;&gt;Column);</span><br><span class="line">Delay(<span class="number">1</span>);</span><br><span class="line">MATRIX_LED_PORT=<span class="number">0xFF</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//动画数据</span></span><br><span class="line"><span class="keyword">unsigned</span> <span class="keyword">char</span> code Animation[]=&#123;</span><br><span class="line"><span class="number">0x3C</span>,<span class="number">0x42</span>,<span class="number">0xA9</span>,<span class="number">0x85</span>,<span class="number">0x85</span>,<span class="number">0xA9</span>,<span class="number">0x42</span>,<span class="number">0x3C</span>,</span><br><span class="line"><span class="number">0x3C</span>,<span class="number">0x42</span>,<span class="number">0xA1</span>,<span class="number">0x85</span>,<span class="number">0x85</span>,<span class="number">0xA1</span>,<span class="number">0x42</span>,<span class="number">0x3C</span>,</span><br><span class="line"><span class="number">0x3C</span>,<span class="number">0x42</span>,<span class="number">0xA5</span>,<span class="number">0x89</span>,<span class="number">0x89</span>,<span class="number">0xA5</span>,<span class="number">0x42</span>,<span class="number">0x3C</span>,</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">unsigned</span> <span class="keyword">char</span> i,Offset=<span class="number">0</span>,Count=<span class="number">0</span>;</span><br><span class="line">MatrixLED_Init();</span><br><span class="line"><span class="keyword">while</span>(<span class="number">1</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;<span class="number">8</span>;i++)<span class="comment">//循环8次，显示8列数据</span></span><br><span class="line">&#123;</span><br><span class="line">MatrixLED_ShowColumn(i,Animation[i+Offset]);</span><br><span class="line">&#125;</span><br><span class="line">Count++;<span class="comment">//计次延时</span></span><br><span class="line"><span class="keyword">if</span>(Count&gt;<span class="number">15</span>)</span><br><span class="line">&#123;</span><br><span class="line">Count=<span class="number">0</span>;</span><br><span class="line">Offset+=<span class="number">8</span>;<span class="comment">//偏移+8，切换下一帧画面</span></span><br><span class="line"><span class="keyword">if</span>(Offset&gt;<span class="number">16</span>)</span><br><span class="line">&#123;</span><br><span class="line">Offset=<span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 51单片机 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 51单片机 </tag>
            
            <tag> LED点阵屏 </tag>
            
            <tag> 74HC595 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>51单片机-串口通讯</title>
      <link href="/p/20016b07.html"/>
      <url>/p/20016b07.html</url>
      
        <content type="html"><![CDATA[<h2 id="串口通讯"><a href="#串口通讯" class="headerlink" title="串口通讯"></a>串口通讯</h2><h3 id="串口介绍"><a href="#串口介绍" class="headerlink" title="串口介绍"></a>串口介绍</h3><ul><li><p>串口是一种应用十分广泛的通讯接口，串口成本低、容易使用、通信线路简单，可实现两个设备的互相通信。</p></li><li><p>单片机的串口可以使单片机与单片机、单片机与电脑、单片机与各式各样的模块互相通信，极大的扩展了单片机的应用范围，增强了单片机系统的硬件实力。<strong>注意：不同设备的电平规范不同，要注意转换，否则会损坏设备</strong></p></li><li><p>51单片机内部自带UART（Universal Asynchronous Receiver Transmitter，通用异步收发器），可实现单片机的串口通信。</p></li></ul><h3 id="硬件电路"><a href="#硬件电路" class="headerlink" title="硬件电路"></a>硬件电路</h3><ul><li><p>简单双向串口通信有两根通信线（发送端TXD和接收端RXD）</p></li><li><p>TXD与RXD要交叉连接</p></li><li><p>当只需单向的数据传输时，可以直接一根通信线</p></li><li><p>当电平标准不一致时，需要加电平转换芯片</p></li></ul><p><img src="https://cdn.jsdelivr.net/gh/jiejie081/pic/img/image-20220209200625310.png" alt="简单电路"></p><h3 id="电平标准"><a href="#电平标准" class="headerlink" title="电平标准"></a>电平标准</h3><ul><li><p>电平标准是数据1和数据0的表达方式，是传输线缆中人为规定的电压与数据的对应关系，串口常用的电平标准有如下三种：</p></li><li><p>TTL电平：+5V表示1，0V表示0</p></li><li><p>RS232电平：-3 ~ -15V表示1，+3~+15V表示0</p></li><li><p>RS485电平：两线压差+2 ~ +6V表示1，-2~-6V表示0（差分信号）</p></li></ul><h3 id="常见通讯接口比较"><a href="#常见通讯接口比较" class="headerlink" title="常见通讯接口比较"></a>常见通讯接口比较</h3><table><thead><tr><th><strong>名称</strong></th><th><strong>引脚定义</strong></th><th><strong>通信方式</strong></th><th><strong>特点</strong></th></tr></thead><tbody><tr><td>UART</td><td>TXD、RXD</td><td>全双工、异步</td><td>点对点通信</td></tr><tr><td>I²C</td><td>SCL、SDA</td><td>半双工、同步</td><td>可挂载多个设备</td></tr><tr><td>SPI</td><td>SCLK、MOSI、MISO、CS</td><td>全双工、同步</td><td>可挂载多个设备</td></tr><tr><td>1-Wire</td><td>DQ</td><td>半双工、异步</td><td>可挂载多个设备</td></tr></tbody></table><ul><li>此外还有：CAN、USB等</li></ul><blockquote><p>全双工：通信双方可以在同一时刻互相传输数据</p><p>半双工：通信双方可以互相传输数据，但必须分时复用一根数据线</p><p>单工：通信只能有一方发送到另一方，不能反向传输</p><p>异步：通信双方各自约定通信速率</p><p>同步：通信双方靠一根时钟线来约定通信速率</p><p>总线：连接各个设备的数据传输线路（类似于一条马路，把路边各住户连接起来，使住户可以相互交流）</p></blockquote><h3 id="51单片机的UART"><a href="#51单片机的UART" class="headerlink" title="51单片机的UART"></a>51单片机的UART</h3><ul><li><p>STC89C52有1个UART</p></li><li><p>STC89C52的UART有四种工作模式：</p><p>模式0：同步移位寄存器</p><p>模式1：8位UART，波特率可变（常用）</p><p>模式2：9位UART，波特率固定</p><p>模式3：9位UART，波特率可变</p></li></ul><p><img src="https://cdn.jsdelivr.net/gh/jiejie081/pic/img/image-20220209200512692.png" alt="51单片机UART"></p><h3 id="串口参数时序图"><a href="#串口参数时序图" class="headerlink" title="串口参数时序图"></a>串口参数时序图</h3><ul><li><p>波特率：串口通信的速率（发送和接收各数据位的间隔时间）</p></li><li><p>检验位：用于数据验证</p></li><li><p>停止位：用于数据帧间隔</p></li></ul><p><img src="https://cdn.jsdelivr.net/gh/jiejie081/pic/img/image-20220209200752383.png" alt="串口参数时序图"></p><h3 id="串口模式图"><a href="#串口模式图" class="headerlink" title="串口模式图"></a>串口模式图</h3><p><img src="https://cdn.jsdelivr.net/gh/jiejie081/pic/img/image-20220209200828681.png" alt="串口模式图"></p><ul><li>SBUF：串口数据缓存寄存器，物理上是两个独立的寄存器，但占用相同的地址。写操作时，写入的是发送寄存器，读操作时，读出的是接收寄存器</li></ul><h3 id="串口和中断系统"><a href="#串口和中断系统" class="headerlink" title="串口和中断系统"></a>串口和中断系统</h3><p><img src="https://cdn.jsdelivr.net/gh/jiejie081/pic/img/image-20220209201426855.png" alt="串口和中断系统"></p><h3 id="串口相关寄存器"><a href="#串口相关寄存器" class="headerlink" title="串口相关寄存器"></a>串口相关寄存器</h3><p><img src="https://cdn.jsdelivr.net/gh/jiejie081/pic/img/image-20220209201518988.png" alt="串口相关寄存器"></p><h3 id="数据显示模式"><a href="#数据显示模式" class="headerlink" title="数据显示模式"></a>数据显示模式</h3><ul><li><p>HEX模式&#x2F;十六进制模式&#x2F;二进制模式：以原始数据的形式显示</p></li><li><p>文本模式&#x2F;字符模式：以原始数据编码后的形式显示   ASCII表</p></li></ul>]]></content>
      
      
      <categories>
          
          <category> 51单片机 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 51单片机 </tag>
            
            <tag> 串口通讯 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>51单片机-矩阵键盘</title>
      <link href="/p/3a3a1fde.html"/>
      <url>/p/3a3a1fde.html</url>
      
        <content type="html"><![CDATA[<h2 id="矩阵键盘"><a href="#矩阵键盘" class="headerlink" title="矩阵键盘"></a>矩阵键盘</h2><h3 id="矩阵键盘的介绍"><a href="#矩阵键盘的介绍" class="headerlink" title="矩阵键盘的介绍"></a>矩阵键盘的介绍</h3><ul><li><p>在键盘中按键数量较多时，为了减少I&#x2F;O口的占用，通常将按键排列成矩阵形式</p></li><li><p>采用逐行或逐列的“扫描”，就可以读出任何位置按键的状态</p></li></ul><p><img src="https://cdn.jsdelivr.net/gh/jiejie081/pic/img/202204021326649.png" alt="矩阵键盘在开发板中的连接"></p><h3 id="扫描的概念"><a href="#扫描的概念" class="headerlink" title="扫描的概念"></a>扫描的概念</h3><ul><li><p>数码管扫描（输出扫描）</p><p>原理：显示第1位→显示第2位→显示第3位→……，然后快速循环这个过程，最终实现所有数码管同时显示的效果</p></li><li><p>矩阵键盘扫描（输入扫描）</p><p>原理：读取第1行(列)→读取第2行(列) →读取第3行(列) → ……，然后快速循环这个过程，最终实现所有按键同时检测的效果</p></li><li><p>以上两种扫描方式的共性：节省I&#x2F;O口</p></li></ul><h3 id="矩阵键盘扫描代码"><a href="#矩阵键盘扫描代码" class="headerlink" title="矩阵键盘扫描代码"></a>矩阵键盘扫描代码</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;REGX52.H&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&quot;Delay.h&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">  * @brief  矩阵键盘读取按键键码</span></span><br><span class="line"><span class="comment">  * @param  无</span></span><br><span class="line"><span class="comment">  * @retval KeyNumber 按下按键的键码值</span></span><br><span class="line"><span class="comment">如果按键按下不放，程序会停留在此函数，松手的一瞬间，返回按键键码，没有按键按下时，返回0</span></span><br><span class="line"><span class="comment">  */</span></span><br><span class="line"><span class="function"><span class="keyword">unsigned</span> <span class="keyword">char</span> <span class="title">MatrixKey</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">unsigned</span> <span class="keyword">char</span> KeyNumber=<span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">P1=<span class="number">0xFF</span>;</span><br><span class="line">P1_3=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">if</span>(P1_7==<span class="number">0</span>)&#123;Delay(<span class="number">20</span>);<span class="keyword">while</span>(P1_7==<span class="number">0</span>);Delay(<span class="number">20</span>);KeyNumber=<span class="number">1</span>;&#125;</span><br><span class="line"><span class="keyword">if</span>(P1_6==<span class="number">0</span>)&#123;Delay(<span class="number">20</span>);<span class="keyword">while</span>(P1_6==<span class="number">0</span>);Delay(<span class="number">20</span>);KeyNumber=<span class="number">5</span>;&#125;</span><br><span class="line"><span class="keyword">if</span>(P1_5==<span class="number">0</span>)&#123;Delay(<span class="number">20</span>);<span class="keyword">while</span>(P1_5==<span class="number">0</span>);Delay(<span class="number">20</span>);KeyNumber=<span class="number">9</span>;&#125;</span><br><span class="line"><span class="keyword">if</span>(P1_4==<span class="number">0</span>)&#123;Delay(<span class="number">20</span>);<span class="keyword">while</span>(P1_4==<span class="number">0</span>);Delay(<span class="number">20</span>);KeyNumber=<span class="number">13</span>;&#125;</span><br><span class="line"></span><br><span class="line">P1=<span class="number">0xFF</span>;</span><br><span class="line">P1_2=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">if</span>(P1_7==<span class="number">0</span>)&#123;Delay(<span class="number">20</span>);<span class="keyword">while</span>(P1_7==<span class="number">0</span>);Delay(<span class="number">20</span>);KeyNumber=<span class="number">2</span>;&#125;</span><br><span class="line"><span class="keyword">if</span>(P1_6==<span class="number">0</span>)&#123;Delay(<span class="number">20</span>);<span class="keyword">while</span>(P1_6==<span class="number">0</span>);Delay(<span class="number">20</span>);KeyNumber=<span class="number">6</span>;&#125;</span><br><span class="line"><span class="keyword">if</span>(P1_5==<span class="number">0</span>)&#123;Delay(<span class="number">20</span>);<span class="keyword">while</span>(P1_5==<span class="number">0</span>);Delay(<span class="number">20</span>);KeyNumber=<span class="number">10</span>;&#125;</span><br><span class="line"><span class="keyword">if</span>(P1_4==<span class="number">0</span>)&#123;Delay(<span class="number">20</span>);<span class="keyword">while</span>(P1_4==<span class="number">0</span>);Delay(<span class="number">20</span>);KeyNumber=<span class="number">14</span>;&#125;</span><br><span class="line"></span><br><span class="line">P1=<span class="number">0xFF</span>;</span><br><span class="line">P1_1=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">if</span>(P1_7==<span class="number">0</span>)&#123;Delay(<span class="number">20</span>);<span class="keyword">while</span>(P1_7==<span class="number">0</span>);Delay(<span class="number">20</span>);KeyNumber=<span class="number">3</span>;&#125;</span><br><span class="line"><span class="keyword">if</span>(P1_6==<span class="number">0</span>)&#123;Delay(<span class="number">20</span>);<span class="keyword">while</span>(P1_6==<span class="number">0</span>);Delay(<span class="number">20</span>);KeyNumber=<span class="number">7</span>;&#125;</span><br><span class="line"><span class="keyword">if</span>(P1_5==<span class="number">0</span>)&#123;Delay(<span class="number">20</span>);<span class="keyword">while</span>(P1_5==<span class="number">0</span>);Delay(<span class="number">20</span>);KeyNumber=<span class="number">11</span>;&#125;</span><br><span class="line"><span class="keyword">if</span>(P1_4==<span class="number">0</span>)&#123;Delay(<span class="number">20</span>);<span class="keyword">while</span>(P1_4==<span class="number">0</span>);Delay(<span class="number">20</span>);KeyNumber=<span class="number">15</span>;&#125;</span><br><span class="line"></span><br><span class="line">P1=<span class="number">0xFF</span>;</span><br><span class="line">P1_0=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">if</span>(P1_7==<span class="number">0</span>)&#123;Delay(<span class="number">20</span>);<span class="keyword">while</span>(P1_7==<span class="number">0</span>);Delay(<span class="number">20</span>);KeyNumber=<span class="number">4</span>;&#125;</span><br><span class="line"><span class="keyword">if</span>(P1_6==<span class="number">0</span>)&#123;Delay(<span class="number">20</span>);<span class="keyword">while</span>(P1_6==<span class="number">0</span>);Delay(<span class="number">20</span>);KeyNumber=<span class="number">8</span>;&#125;</span><br><span class="line"><span class="keyword">if</span>(P1_5==<span class="number">0</span>)&#123;Delay(<span class="number">20</span>);<span class="keyword">while</span>(P1_5==<span class="number">0</span>);Delay(<span class="number">20</span>);KeyNumber=<span class="number">12</span>;&#125;</span><br><span class="line"><span class="keyword">if</span>(P1_4==<span class="number">0</span>)&#123;Delay(<span class="number">20</span>);<span class="keyword">while</span>(P1_4==<span class="number">0</span>);Delay(<span class="number">20</span>);KeyNumber=<span class="number">16</span>;&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> KeyNumber;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//当然也可以用</span></span><br><span class="line"><span class="comment">//if(P1_7==0)&#123;Delay(20);if(P1_7==0);KeyNumber=1;&#125;但是这样就没有松手检测</span></span><br></pre></td></tr></table></figure><blockquote><p>练习可以写一下</p><p>1.矩阵键盘控制一位数码管静态现实键值</p><p>2.利用定时器扫描矩阵键盘，实现动态现实数码管两位键值</p></blockquote><h3 id="矩阵键盘密码锁代码"><a href="#矩阵键盘密码锁代码" class="headerlink" title="矩阵键盘密码锁代码"></a>矩阵键盘密码锁代码</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;REGX52.H&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&quot;LCD1602.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&quot;MatrixKey.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> LEN 7   <span class="comment">//LEN 为密码位数加一</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">unsigned</span> <span class="keyword">char</span> pass[LEN]=<span class="string">&quot;123ABC&quot;</span>; <span class="comment">//预设密码</span></span><br><span class="line"><span class="keyword">unsigned</span> <span class="keyword">char</span> KeyNum;</span><br><span class="line"><span class="keyword">unsigned</span> <span class="keyword">char</span> key[LEN]=<span class="string">&quot;      &quot;</span>;</span><br><span class="line"><span class="keyword">unsigned</span> <span class="keyword">int</span>  a=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">unsigned</span> <span class="keyword">int</span>  i=<span class="number">0</span>;  <span class="comment">//i记录输入次数</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">LCD_Init();</span><br><span class="line">LCD_ShowString(<span class="number">1</span>,<span class="number">1</span>,<span class="string">&quot;PassWord:&quot;</span>);</span><br><span class="line"><span class="keyword">while</span>(<span class="number">1</span>)</span><br><span class="line">&#123;</span><br><span class="line">KeyNum=MatrixKey();</span><br><span class="line"><span class="keyword">if</span>(KeyNum!=<span class="number">0</span>&amp;&amp;KeyNum!=<span class="string">&#x27;*&#x27;</span>&amp;&amp;KeyNum!=<span class="string">&#x27;#&#x27;</span>&amp;&amp;a&lt;<span class="number">6</span>&amp;&amp;i&lt;<span class="number">6</span>)</span><br><span class="line">&#123;</span><br><span class="line">&#123;key[a]=KeyNum;</span><br><span class="line">LCD_ShowString(<span class="number">2</span>,<span class="number">1</span>,key);</span><br><span class="line"></span><br><span class="line">&#125;a+=<span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(KeyNum==<span class="string">&#x27;#&#x27;</span>&amp;&amp;i&lt;<span class="number">6</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(<span class="built_in">strcmp</span>(pass,key)==<span class="number">0</span>)</span><br><span class="line">&#123;LCD_ShowString(<span class="number">1</span>,<span class="number">12</span>,<span class="string">&quot;OK&quot;</span>);<span class="keyword">for</span>(a=<span class="number">0</span>;a&lt;<span class="number">6</span>;a++)key[a]=<span class="string">&#x27;      &#x27;</span>;LCD_ShowString(<span class="number">2</span>,<span class="number">1</span>,key);a=<span class="number">0</span>;LCD_ShowString(<span class="number">2</span>,<span class="number">1</span>,<span class="string">&quot;Welcome!&quot;</span>);i=<span class="number">7</span>;&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;LCD_ShowString(<span class="number">1</span>,<span class="number">12</span>,<span class="string">&quot;ERR&quot;</span>);i+=<span class="number">1</span>;<span class="keyword">for</span>(a=<span class="number">0</span>;a&lt;<span class="number">6</span>;a++)key[a]=<span class="string">&#x27; &#x27;</span>;LCD_ShowString(<span class="number">2</span>,<span class="number">1</span>,key);a=<span class="number">0</span>;&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(KeyNum==<span class="string">&#x27;*&#x27;</span>&amp;&amp;i&lt;<span class="number">6</span>)</span><br><span class="line">&#123;</span><br><span class="line">a-=<span class="number">1</span>;</span><br><span class="line">key[a]=<span class="string">&#x27; &#x27;</span>;</span><br><span class="line">LCD_ShowString(<span class="number">2</span>,<span class="number">1</span>,key);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(i==<span class="number">6</span>)</span><br><span class="line">LCD_ShowString(<span class="number">2</span>,<span class="number">1</span>,<span class="string">&quot;LOCK  &quot;</span>);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 51单片机 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 51单片机 </tag>
            
            <tag> 矩阵键盘 </tag>
            
            <tag> 密码锁 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>51单片机-定时器和中断系统</title>
      <link href="/p/a4705c27.html"/>
      <url>/p/a4705c27.html</url>
      
        <content type="html"><![CDATA[<h2 id="定时器"><a href="#定时器" class="headerlink" title="定时器"></a>定时器</h2><h3 id="定时器介绍"><a href="#定时器介绍" class="headerlink" title="定时器介绍"></a>定时器介绍</h3><ul><li><p>定时器介绍：51单片机的定时器属于单片机的内部资源，其电路的连接和运转均在单片机内部完成</p></li><li><p>定时器作用：</p></li></ul><p>（1）用于计时系统，可实现软件计时，或者使程序每隔一固定时间完成一项操作</p><p>（2）替代长时间的Delay，提高CPU的运行效率和处理速度</p><p>（…）</p><h3 id="STC89C52定时器资源"><a href="#STC89C52定时器资源" class="headerlink" title="STC89C52定时器资源"></a>STC89C52定时器资源</h3><ul><li><p>定时器个数：3个（T0、T1、T2），T0和T1与传统的51单片机兼容，T2是此型号单片机增加的资源</p></li><li><p>注意：定时器的资源和单片机的型号是关联在一起的，不同的型号可能会有不同的定时器个数和操作方式，但一般来说，T0和T1的操作方式是所有51单片机所共有的</p></li></ul><h3 id="定时器框图"><a href="#定时器框图" class="headerlink" title="定时器框图"></a>定时器框图</h3><ul><li>定时器在单片机内部就像一个小闹钟一样，根据时钟的输出信号，每隔“一秒”，计数单元的数值就增加一，当计数单元数值增加到“设定的闹钟提醒时间”时，计数单元就会向中断系统发出中断申请，产生“响铃提醒”，使程序跳转到中断服务函数中执行</li></ul><p><img src="https://cdn.jsdelivr.net/gh/jiejie081/pic/img/image-20220208152101573.png" alt="定时器框图"></p><h3 id="定时器工作模式"><a href="#定时器工作模式" class="headerlink" title="定时器工作模式"></a>定时器工作模式</h3><ul><li><p>STC89C52的T0和T1均有四种工作模式：</p><p>模式0：13位定时器&#x2F;计数器</p><p>模式1：16位定时器&#x2F;计数器（常用）</p><p>模式2：8位自动重装模式</p><p>模式3：两个8位计数器</p></li><li><p>工作模式1框图：</p></li></ul><p><img src="https://cdn.jsdelivr.net/gh/jiejie081/pic/img/202204021327481.png" alt="工作模式一框图"></p><ul><li>SYSclk：系统时钟，即晶振周期。</li></ul><h3 id="中断系统"><a href="#中断系统" class="headerlink" title="中断系统"></a>中断系统</h3><p><img src="https://cdn.jsdelivr.net/gh/jiejie081/pic/img/image-20220208153809028.png" alt="中断系统"></p><h3 id="中断系统流程"><a href="#中断系统流程" class="headerlink" title="中断系统流程"></a>中断系统流程</h3><p><img src="https://cdn.jsdelivr.net/gh/jiejie081/pic/img/image-20220208153934799.png" alt="中断系统流程"></p><h3 id="STC89C52中断资源"><a href="#STC89C52中断资源" class="headerlink" title="STC89C52中断资源"></a>STC89C52中断资源</h3><ul><li><p>中断源个数：8个（外部中断0、定时器0中断、外部中断1、定时器1中断、串口中断、定时器2中断、外部中断2、外部中断3）</p></li><li><p>中断优先级个数：4个 </p></li><li><p>中断号：</p></li></ul><p><img src="https://cdn.jsdelivr.net/gh/jiejie081/pic/img/image-20220208154415829.png" alt="中断号"></p><ul><li>注意：中断的资源和单片机的型号是关联在一起的，不同的型号可能会有不同的中断资源，例如中断源个数不同、中断优先级个数不同等等</li></ul><h3 id="定时器和中断系统"><a href="#定时器和中断系统" class="headerlink" title="定时器和中断系统"></a>定时器和中断系统</h3><p><img src="https://cdn.jsdelivr.net/gh/jiejie081/pic/img/image-20220208154601424.png" alt="传统51单片机中断系统"></p><p><img src="https://cdn.jsdelivr.net/gh/jiejie081/pic/img/202204021327891.png" alt="STC89C52中断结构"></p><h3 id="定时器、中断系统相关寄存器"><a href="#定时器、中断系统相关寄存器" class="headerlink" title="定时器、中断系统相关寄存器"></a>定时器、中断系统相关寄存器</h3><ul><li><p><strong>主要参考数据手册</strong></p></li><li><p>寄存器是连接软硬件的媒介</p></li><li><p>在单片机中寄存器就是一段特殊的RAM存储器，一方面，寄存器可以存储和读取数据，另一方面，每一个寄存器背后都连接了一根导线，控制着电路的连接方式</p></li><li><p>寄存器相当于一个复杂机器的“操作按钮”</p></li></ul><p><img src="https://cdn.jsdelivr.net/gh/jiejie081/pic/img/202204021327884.png" alt="定时器相关寄存器"></p><p><img src="https://cdn.jsdelivr.net/gh/jiejie081/pic/img/image-20220208155320816.png" alt="中断相关寄存器"></p>]]></content>
      
      
      <categories>
          
          <category> 51单片机 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 51单片机 </tag>
            
            <tag> 定时器 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>51单片机-模块化编程</title>
      <link href="/p/378f120c.html"/>
      <url>/p/378f120c.html</url>
      
        <content type="html"><![CDATA[<h2 id="模块化及调试工具"><a href="#模块化及调试工具" class="headerlink" title="模块化及调试工具"></a>模块化及调试工具</h2><h3 id="模块化编程"><a href="#模块化编程" class="headerlink" title="模块化编程"></a>模块化编程</h3><ul><li><p>传统方式编程：所有的函数均放在main.c里，若使用的模块比较多，则一个文件内会有很多的代码，不利于代码的组织和管理，而且很影响编程者的思路</p></li><li><p>模块化编程：把各个模块的代码放在不同的.c文件里，在.h文件里提供外部可调用函数的声明，其它.c文件想使用其中的代码时，只需要#include “XXX.h”文件即可。使用模块化编程可极大的提高代码的可阅读性、可维护性、可移植性等</p></li></ul><p><img src="https://cdn.jsdelivr.net/gh/jiejie081/pic/img/202204021326148.png" alt="模块化编程框图"></p><p><strong>模块化编程注意事项</strong></p><ul><li><p>.c文件：函数、变量的定义</p></li><li><p>.h文件：可被外部调用的函数、变量的声明</p></li><li><p>任何自定义的变量、函数在调用前必须有定义或声明（同一个.c）</p></li><li><p>使用到的自定义函数的.c文件必须添加到工程参与编译</p></li><li><p>使用到的.h文件必须要放在编译器可寻找到的地方（工程文件夹根目录、安装目录、自定义）</p></li></ul><p><strong>C语言预编译</strong></p><ul><li>C语言的预编译以#开头，作用是在真正的编译开始之前，对代码 做一些处理（预编译）</li></ul><table><thead><tr><th align="left">预编译</th><th align="left">意义</th></tr></thead><tbody><tr><td align="left"><strong>#include &lt;REGX52.H&gt;</strong></td><td align="left">把 <strong>REGX52.H</strong>文件的内容搬到此处</td></tr><tr><td align="left">#define PI 3.14</td><td align="left">定义PI，将PI替换为3.14</td></tr><tr><td align="left">#define ABC</td><td align="left">定义ABC</td></tr><tr><td align="left">#ifndef <strong>XX_H</strong></td><td align="left">如果没有定义__XX_H__</td></tr><tr><td align="left">#endif</td><td align="left">与#ifndef,#if匹配，组成“括号”</td></tr></tbody></table><ul><li>此外还有#ifdef,#if,#else,#elif,#undef等</li></ul><p><strong>数码管代码模块化</strong></p><p>把delay函数 nixie函数都模块化</p><p>需要在项目中添加delay.h   delay.c    nixie.h   nixie.c  四个文件</p><p>然后main函数就写</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;REGX52.H&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;DELAY.H&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;NIXIE.H&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="keyword">while</span>(<span class="number">1</span>)&#123;</span><br><span class="line">Nixie(<span class="number">1</span>,<span class="number">1</span>);</span><br><span class="line">Nixie(<span class="number">2</span>,<span class="number">2</span>);</span><br><span class="line">Nixie(<span class="number">3</span>,<span class="number">3</span>);</span><br><span class="line">Nixie(<span class="number">4</span>,<span class="number">4</span>);</span><br><span class="line">Nixie(<span class="number">5</span>,<span class="number">8</span>);</span><br><span class="line">Nixie(<span class="number">6</span>,<span class="number">5</span>);</span><br><span class="line">Nixie(<span class="number">7</span>,<span class="number">6</span>);</span><br><span class="line">Nixie(<span class="number">8</span>,<span class="number">7</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="LCD1680调试工具"><a href="#LCD1680调试工具" class="headerlink" title="LCD1680调试工具"></a>LCD1680调试工具</h3><ul><li><p>使用LCD1602液晶屏作为调试窗口，提供类似printf函数的功能，可实时观察单片机内部数据的变换情况，便于调试和演示。</p></li><li><p>这里提供的LCD1602代码属于模块化的代码，使用者只需要知道所提供函数的作用和使用方法就可以很容易的使用LCD1602</p></li></ul><table><thead><tr><th><strong>函数</strong></th><th><strong>作用</strong></th></tr></thead><tbody><tr><td>LCD_Init();</td><td>初始化</td></tr><tr><td>LCD_ShowChar(1,1,’A’);</td><td>显示一个字符</td></tr><tr><td>LCD_ShowString(1,3,”Hello”);</td><td>显示字符串</td></tr><tr><td>LCD_ShowNum(1,9,123,3);</td><td>显示十进制数字</td></tr><tr><td>LCD_ShowSignedNum(1,13,-66,2);</td><td>显示有符号十进制数字</td></tr><tr><td>LCD_ShowHexNum(2,1,0xA8,2);</td><td>显示十六进制数字</td></tr><tr><td>LCD_ShowBinNum(2,4,0xAA,8);</td><td>显示二进制数字</td></tr></tbody></table>]]></content>
      
      
      <categories>
          
          <category> 51单片机 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 51单片机 </tag>
            
            <tag> 模块化编程 </tag>
            
            <tag> LCD1602调试工具 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>51单片机-数码管</title>
      <link href="/p/28ce68d9.html"/>
      <url>/p/28ce68d9.html</url>
      
        <content type="html"><![CDATA[<h2 id="数码管"><a href="#数码管" class="headerlink" title="数码管"></a>数码管</h2><h3 id="数码管的介绍"><a href="#数码管的介绍" class="headerlink" title="数码管的介绍"></a>数码管的介绍</h3><ul><li>LED数码管：数码管是一种简单、廉价的显示器，是由多个发光二极管封装在一起组成“8”字型的器件</li></ul><h3 id="数码管的引脚定义"><a href="#数码管的引脚定义" class="headerlink" title="数码管的引脚定义"></a>数码管的引脚定义</h3><p><img src="https://cdn.jsdelivr.net/gh/jiejie081/pic/img/image-20220204154444377.png" alt="数码管的引脚定义"></p><p><img src="https://cdn.jsdelivr.net/gh/jiejie081/pic/img/image-20220204154550802.png" alt="四位数码管的引脚定义"></p><blockquote><p>由于四位数码管四个数字的段显示是相同的连接在一个引脚上的。一共需要14个引脚。</p><p>我们称12，9，8，6为位选   11、7、4、2、1、10、5、3为段选</p><p>由此我们知道这样是不可以4位同时显示不同的数值的，要想实现这一效果我们用到了数码管扫描</p><p>我们可以使第一位显示一个数字，第二位显示一个数字，然后一直循环，因为我们人眼的视觉暂留，看起来就是同时显示了。</p></blockquote><h3 id="数码管在开发板中的连接"><a href="#数码管在开发板中的连接" class="headerlink" title="数码管在开发板中的连接"></a>数码管在开发板中的连接</h3><p><img src="https://cdn.jsdelivr.net/gh/jiejie081/pic/img/image-20220204155940561.png" alt="数码管在开发板中的连接"></p><blockquote><ul><li><p>74HC138译码器</p><p>作用：译码，用三个引脚控制8个引脚。</p><p>使用：使能端G1接高电平 G2A、G2B接低电平。A、B、C为输入端  输出端为低电平有效，其他为高电平</p><table><thead><tr><th align="center">C</th><th align="center">B</th><th align="center">A</th><th align="center">输出</th></tr></thead><tbody><tr><td align="center">0</td><td align="center">0</td><td align="center">0</td><td align="center">Y0低电压</td></tr><tr><td align="center">0</td><td align="center">0</td><td align="center">1</td><td align="center">Y1</td></tr><tr><td align="center">0</td><td align="center">1</td><td align="center">0</td><td align="center">Y2</td></tr><tr><td align="center">0</td><td align="center">1</td><td align="center">1</td><td align="center">Y3</td></tr><tr><td align="center">1</td><td align="center">0</td><td align="center">0</td><td align="center">Y4</td></tr><tr><td align="center">1</td><td align="center">0</td><td align="center">1</td><td align="center">Y5</td></tr><tr><td align="center">1</td><td align="center">1</td><td align="center">0</td><td align="center">Y6</td></tr><tr><td align="center">1</td><td align="center">1</td><td align="center">1</td><td align="center">Y7</td></tr></tbody></table></li><li><p>74HC245双向缓冲器</p><p>低电平的驱动能力强   高电平的驱动能力弱  </p><p>所以需要用一个缓冲区来加强电压</p><p>使用： OE为使能端 低电平有效 即OE端低电平芯片工作</p><p>​            DIR方向控制 高电平 A到B       低电平  B到A</p><p>​            其他引脚是一一对应的 A0 对 B0  以此类推</p></li></ul></blockquote><h3 id="代码示例"><a href="#代码示例" class="headerlink" title="代码示例"></a>代码示例</h3><h4 id="静态数码管显示"><a href="#静态数码管显示" class="headerlink" title="静态数码管显示"></a>静态数码管显示</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//静态数码管显示 第三位显示6</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;REGX52.H&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">P2_2=<span class="number">1</span>;</span><br><span class="line">P2_3=<span class="number">0</span>;</span><br><span class="line">P2_4=<span class="number">1</span>;</span><br><span class="line">P0=<span class="number">0x7D</span>;</span><br><span class="line">    <span class="keyword">while</span>(<span class="number">1</span>)；</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>优化代码</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//数码管代码模块化</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;REGX52.H&gt;</span></span></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">----------------------------------------------------------------------</span></span><br><span class="line"><span class="comment">名称：    数码管模块化代码</span></span><br><span class="line"><span class="comment">函数名称： Nixie(unsigned char Loaction,Number) Loaction 位选 Number 数字</span></span><br><span class="line"><span class="comment"> 其中Number 10为空 11为点</span></span><br><span class="line"><span class="comment">----------------------------------------------------------------------</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">unsigned</span> <span class="keyword">char</span> NixieTab[]=&#123;<span class="number">0x3F</span>,<span class="number">0x06</span>,<span class="number">0x5B</span>,<span class="number">0x4F</span>,<span class="number">0x66</span>,<span class="number">0x6D</span>,<span class="number">0x7D</span>,<span class="number">0x07</span>,<span class="number">0x7F</span>,<span class="number">0x6F</span>,<span class="number">0x00</span>,<span class="number">0x80</span>&#125;;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Nixie</span><span class="params">(<span class="keyword">unsigned</span> <span class="keyword">char</span> Loaction,Number)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">switch</span>(Loaction)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">case</span> <span class="number">1</span>:P2_4=<span class="number">1</span>;P2_3=<span class="number">1</span>;P2_2=<span class="number">1</span>;<span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="number">2</span>:P2_4=<span class="number">1</span>;P2_3=<span class="number">1</span>;P2_2=<span class="number">0</span>;<span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="number">3</span>:P2_4=<span class="number">1</span>;P2_3=<span class="number">0</span>;P2_2=<span class="number">1</span>;<span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="number">4</span>:P2_4=<span class="number">1</span>;P2_3=<span class="number">0</span>;P2_2=<span class="number">0</span>;<span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="number">5</span>:P2_4=<span class="number">0</span>;P2_3=<span class="number">1</span>;P2_2=<span class="number">1</span>;<span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="number">6</span>:P2_4=<span class="number">0</span>;P2_3=<span class="number">1</span>;P2_2=<span class="number">0</span>;<span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="number">7</span>:P2_4=<span class="number">0</span>;P2_3=<span class="number">0</span>;P2_2=<span class="number">1</span>;<span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="number">8</span>:P2_4=<span class="number">0</span>;P2_3=<span class="number">0</span>;P2_2=<span class="number">0</span>;<span class="keyword">break</span>;</span><br><span class="line"> &#125;</span><br><span class="line">P0=NixieTab[Number];</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">Nixie(<span class="number">3</span>,<span class="number">6</span>);</span><br><span class="line">    <span class="keyword">while</span>(<span class="number">1</span>)；</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="动态数码管显示"><a href="#动态数码管显示" class="headerlink" title="动态数码管显示"></a>动态数码管显示</h3><blockquote><p>数码管显示是  位选 段选 位选 段选 地重复 在重复时因为单片机速度很快 所以会有重影地现象</p><p>消影; 我们延时1微秒 然后空显示就可以了</p><p>不延时的话 亮度会明显变暗</p></blockquote><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;REGX52.H&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;INTRINS.H&gt;</span> </span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Delay</span><span class="params">(<span class="keyword">unsigned</span> <span class="keyword">int</span> ums)</span><span class="comment">//@11.0592MHz</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">while</span>(ums)&#123;</span><br><span class="line">_nop_();</span><br><span class="line">_nop_();</span><br><span class="line">_nop_();</span><br><span class="line">ums--;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">unsigned</span> <span class="keyword">char</span> NixieTab[]=&#123;<span class="number">0x3F</span>,<span class="number">0x06</span>,<span class="number">0x5B</span>,<span class="number">0x4F</span>,<span class="number">0x66</span>,<span class="number">0x6D</span>,<span class="number">0x7D</span>,<span class="number">0x07</span>,<span class="number">0x7F</span>,<span class="number">0x6F</span>,<span class="number">0x00</span>,<span class="number">0x80</span>&#125;;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Nixie</span><span class="params">(<span class="keyword">unsigned</span> <span class="keyword">char</span> Loaction,Number)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">switch</span>(Loaction)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">case</span> <span class="number">1</span>:P2_4=<span class="number">1</span>;P2_3=<span class="number">1</span>;P2_2=<span class="number">1</span>;<span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="number">2</span>:P2_4=<span class="number">1</span>;P2_3=<span class="number">1</span>;P2_2=<span class="number">0</span>;<span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="number">3</span>:P2_4=<span class="number">1</span>;P2_3=<span class="number">0</span>;P2_2=<span class="number">1</span>;<span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="number">4</span>:P2_4=<span class="number">1</span>;P2_3=<span class="number">0</span>;P2_2=<span class="number">0</span>;<span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="number">5</span>:P2_4=<span class="number">0</span>;P2_3=<span class="number">1</span>;P2_2=<span class="number">1</span>;<span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="number">6</span>:P2_4=<span class="number">0</span>;P2_3=<span class="number">1</span>;P2_2=<span class="number">0</span>;<span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="number">7</span>:P2_4=<span class="number">0</span>;P2_3=<span class="number">0</span>;P2_2=<span class="number">1</span>;<span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="number">8</span>:P2_4=<span class="number">0</span>;P2_3=<span class="number">0</span>;P2_2=<span class="number">0</span>;<span class="keyword">break</span>;</span><br><span class="line"> &#125;</span><br><span class="line">P0=NixieTab[Number];</span><br><span class="line">Delay(<span class="number">1</span>);</span><br><span class="line">P0=<span class="number">0x00</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">while</span>(<span class="number">1</span>)&#123;</span><br><span class="line">Nixie(<span class="number">1</span>,<span class="number">1</span>);</span><br><span class="line">Nixie(<span class="number">2</span>,<span class="number">2</span>);</span><br><span class="line">Nixie(<span class="number">3</span>,<span class="number">3</span>);</span><br><span class="line">Nixie(<span class="number">4</span>,<span class="number">4</span>);</span><br><span class="line">Nixie(<span class="number">5</span>,<span class="number">11</span>);</span><br><span class="line">Nixie(<span class="number">6</span>,<span class="number">5</span>);</span><br><span class="line">Nixie(<span class="number">7</span>,<span class="number">6</span>);</span><br><span class="line">Nixie(<span class="number">8</span>,<span class="number">7</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="利用双74CH595控制8位数码管"><a href="#利用双74CH595控制8位数码管" class="headerlink" title="利用双74CH595控制8位数码管"></a>利用双74CH595控制8位数码管</h3><blockquote><img src="https://cdn.jsdelivr.net/gh/jiejie081/pic/img/202204141846955.png" alt="开漏模式内部电路" width="50%" height="50%" align="middle"/><img src="https://cdn.jsdelivr.net/gh/jiejie081/pic/img/202204141844396.png" alt="开漏模式内部电路" width="60%" height="60%" align="middle"/></blockquote><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;REGX52.H&gt;</span></span></span><br><span class="line"></span><br><span class="line">sbit RCK =P3^<span class="number">5</span>;<span class="comment">//转存</span></span><br><span class="line">sbit SRCK=P3^<span class="number">6</span>;<span class="comment">//一位</span></span><br><span class="line">sbit SER =P3^<span class="number">4</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">unsigned</span> <span class="keyword">char</span> codeNixieNum[]=&#123;<span class="number">0x3F</span>,<span class="number">0x06</span>,<span class="number">0x5B</span>,<span class="number">0x4F</span>,<span class="number">0x66</span>,<span class="number">0x6D</span>,<span class="number">0x7D</span>,<span class="number">0x07</span>,<span class="number">0x7F</span>,<span class="number">0x6F</span>,</span><br><span class="line"><span class="number">0x77</span>,<span class="number">0x7C</span>,<span class="number">0x39</span>,<span class="number">0x5E</span>,<span class="number">0x79</span>,<span class="number">0x71</span>,<span class="number">0x00</span>&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">void</span> _74HC595_Write(<span class="keyword">unsigned</span> <span class="keyword">char</span> location,<span class="keyword">unsigned</span> <span class="keyword">char</span> Num)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">unsigned</span> <span class="keyword">char</span> i,locat;</span><br><span class="line">RCK=<span class="number">0</span>;</span><br><span class="line">SRCK=<span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(location==<span class="number">1</span>)locat=~(<span class="number">0x80</span>);</span><br><span class="line"><span class="keyword">if</span>(location==<span class="number">2</span>)locat=~(<span class="number">0x40</span>);</span><br><span class="line"><span class="keyword">if</span>(location==<span class="number">3</span>)locat=~(<span class="number">0x20</span>);</span><br><span class="line"><span class="keyword">if</span>(location==<span class="number">4</span>)locat=~(<span class="number">0x10</span>);</span><br><span class="line"><span class="keyword">if</span>(location==<span class="number">5</span>)locat=~(<span class="number">0x08</span>);</span><br><span class="line"><span class="keyword">if</span>(location==<span class="number">6</span>)locat=~(<span class="number">0x04</span>);</span><br><span class="line"><span class="keyword">if</span>(location==<span class="number">7</span>)locat=~(<span class="number">0x02</span>);</span><br><span class="line"><span class="keyword">if</span>(location==<span class="number">8</span>)locat=~(<span class="number">0x01</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;<span class="number">8</span>;i++)</span><br><span class="line">&#123;</span><br><span class="line">SER=locat&amp;(<span class="number">0x80</span>&gt;&gt;i);</span><br><span class="line">SRCK=<span class="number">1</span>;</span><br><span class="line">SRCK=<span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;<span class="number">8</span>;i++)</span><br><span class="line">&#123;</span><br><span class="line">SER=NixieNum[Num]&amp;(<span class="number">0x80</span>&gt;&gt;i);</span><br><span class="line">SRCK=<span class="number">1</span>;</span><br><span class="line">SRCK=<span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line">RCK=<span class="number">1</span>;</span><br><span class="line">RCK=<span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">while</span>(<span class="number">1</span>)</span><br><span class="line">&#123;</span><br><span class="line">_74HC595_Write(<span class="number">1</span>,<span class="number">1</span>);</span><br><span class="line">_74HC595_Write(<span class="number">2</span>,<span class="number">2</span>);</span><br><span class="line">_74HC595_Write(<span class="number">3</span>,<span class="number">3</span>);</span><br><span class="line">_74HC595_Write(<span class="number">4</span>,<span class="number">4</span>);</span><br><span class="line">_74HC595_Write(<span class="number">5</span>,<span class="number">5</span>);</span><br><span class="line">_74HC595_Write(<span class="number">6</span>,<span class="number">6</span>);</span><br><span class="line">_74HC595_Write(<span class="number">7</span>,<span class="number">7</span>);</span><br><span class="line">_74HC595_Write(<span class="number">8</span>,<span class="number">8</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="利用定时器动态扫描数码管"><a href="#利用定时器动态扫描数码管" class="headerlink" title="利用定时器动态扫描数码管"></a>利用定时器动态扫描数码管</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;REGX52.H&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&quot;Delay.h&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">//数码管显示缓存区</span></span><br><span class="line"><span class="keyword">unsigned</span> <span class="keyword">char</span> Nixie_Buf[<span class="number">9</span>]=&#123;<span class="number">0</span>,<span class="number">10</span>,<span class="number">10</span>,<span class="number">10</span>,<span class="number">10</span>,<span class="number">10</span>,<span class="number">10</span>,<span class="number">10</span>,<span class="number">10</span>&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">//数码管段码表</span></span><br><span class="line"><span class="keyword">unsigned</span> <span class="keyword">char</span> NixieTable[]=&#123;<span class="number">0x3F</span>,<span class="number">0x06</span>,<span class="number">0x5B</span>,<span class="number">0x4F</span>,<span class="number">0x66</span>,<span class="number">0x6D</span>,<span class="number">0x7D</span>,<span class="number">0x07</span>,<span class="number">0x7F</span>,<span class="number">0x6F</span>,<span class="number">0x00</span>,<span class="number">0x40</span>&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">  * @brief  设置显示缓存区</span></span><br><span class="line"><span class="comment">  * @param  Location 要设置的位置，范围：1~8</span></span><br><span class="line"><span class="comment">  * @param  Number 要设置的数字，范围：段码表索引范围</span></span><br><span class="line"><span class="comment">  * @retval 无</span></span><br><span class="line"><span class="comment">  */</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Nixie_SetBuf</span><span class="params">(<span class="keyword">unsigned</span> <span class="keyword">char</span> Location,Number)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">Nixie_Buf[Location]=Number;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">  * @brief  数码管扫描显示</span></span><br><span class="line"><span class="comment">  * @param  Location 要显示的位置，范围：1~8</span></span><br><span class="line"><span class="comment">  * @param  Number 要显示的数字，范围：段码表索引范围</span></span><br><span class="line"><span class="comment">  * @retval 无</span></span><br><span class="line"><span class="comment">  */</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Nixie_Scan</span><span class="params">(<span class="keyword">unsigned</span> <span class="keyword">char</span> Location,Number)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">P0=<span class="number">0x00</span>;<span class="comment">//段码清0，消影</span></span><br><span class="line"><span class="keyword">switch</span>(Location)<span class="comment">//位码输出</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">case</span> <span class="number">1</span>:P2_4=<span class="number">1</span>;P2_3=<span class="number">1</span>;P2_2=<span class="number">1</span>;<span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="number">2</span>:P2_4=<span class="number">1</span>;P2_3=<span class="number">1</span>;P2_2=<span class="number">0</span>;<span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="number">3</span>:P2_4=<span class="number">1</span>;P2_3=<span class="number">0</span>;P2_2=<span class="number">1</span>;<span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="number">4</span>:P2_4=<span class="number">1</span>;P2_3=<span class="number">0</span>;P2_2=<span class="number">0</span>;<span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="number">5</span>:P2_4=<span class="number">0</span>;P2_3=<span class="number">1</span>;P2_2=<span class="number">1</span>;<span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="number">6</span>:P2_4=<span class="number">0</span>;P2_3=<span class="number">1</span>;P2_2=<span class="number">0</span>;<span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="number">7</span>:P2_4=<span class="number">0</span>;P2_3=<span class="number">0</span>;P2_2=<span class="number">1</span>;<span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="number">8</span>:P2_4=<span class="number">0</span>;P2_3=<span class="number">0</span>;P2_2=<span class="number">0</span>;<span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">P0=NixieTable[Number];<span class="comment">//段码输出\</span></span><br><span class="line"><span class="comment">    //这里无需视觉停留，因为这是每2ms调用一次</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">  * @brief  数码管驱动函数，在中断中调用</span></span><br><span class="line"><span class="comment">  * @param  无</span></span><br><span class="line"><span class="comment">  * @retval 无</span></span><br><span class="line"><span class="comment">  */</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Nixie_Loop</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">static</span> <span class="keyword">unsigned</span> <span class="keyword">char</span> i=<span class="number">1</span>;</span><br><span class="line">Nixie_Scan(i,Nixie_Buf[i]);</span><br><span class="line">i++;</span><br><span class="line"><span class="keyword">if</span>(i&gt;=<span class="number">9</span>)&#123;i=<span class="number">1</span>;&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//主函数</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">Timer0_Init();</span><br><span class="line"><span class="keyword">while</span>(<span class="number">1</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        Nixie_SetBuf(<span class="number">1</span>,<span class="number">0</span>);<span class="comment">//设置显示缓存，显示数据</span></span><br><span class="line">Nixie_SetBuf(<span class="number">2</span>,<span class="number">0</span>);</span><br><span class="line">Nixie_SetBuf(<span class="number">3</span>,<span class="number">11</span>);</span><br><span class="line">Nixie_SetBuf(<span class="number">4</span>,<span class="number">0</span>);</span><br><span class="line">Nixie_SetBuf(<span class="number">5</span>,<span class="number">0</span>);</span><br><span class="line">Nixie_SetBuf(<span class="number">6</span>,<span class="number">11</span>);</span><br><span class="line">Nixie_SetBuf(<span class="number">7</span>,<span class="number">0</span>);</span><br><span class="line">Nixie_SetBuf(<span class="number">8</span>,<span class="number">0</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Timer0_Routine</span><span class="params">()</span> interrupt 1</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">static</span> <span class="keyword">unsigned</span> <span class="keyword">int</span> T0Count2;</span><br><span class="line">TL0 = <span class="number">0x18</span>;<span class="comment">//设置定时初值</span></span><br><span class="line">TH0 = <span class="number">0xFC</span>;<span class="comment">//设置定时初值</span></span><br><span class="line"></span><br><span class="line">T0Count2++;</span><br><span class="line"><span class="keyword">if</span>(T0Count2&gt;=<span class="number">2</span>)</span><br><span class="line">&#123;</span><br><span class="line">T0Count2=<span class="number">0</span>;</span><br><span class="line">Nixie_Loop();<span class="comment">//2ms调用一次数码管驱动函数</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="数码管的驱动方式"><a href="#数码管的驱动方式" class="headerlink" title="数码管的驱动方式"></a>数码管的驱动方式</h3><ul><li><p>单片机直接扫描：硬件设备简单，但会耗费大量的单片机CPU时间</p></li><li><p>专用驱动芯片：内部自带显存、扫描电路，单片机只需告诉它显示什么即可</p></li></ul><p><img src="https://cdn.jsdelivr.net/gh/jiejie081/pic/img/image-20220204182603471.png" alt="TM1640"></p>]]></content>
      
      
      <categories>
          
          <category> 51单片机 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 51单片机 </tag>
            
            <tag> 数码管 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Arduino-舵机</title>
      <link href="/p/2656908c.html"/>
      <url>/p/2656908c.html</url>
      
        <content type="html"><![CDATA[<h2 id="舵机"><a href="#舵机" class="headerlink" title="舵机"></a>舵机</h2><h4 id="舵机的分类及原理"><a href="#舵机的分类及原理" class="headerlink" title="舵机的分类及原理"></a>舵机的分类及原理</h4><p>舵机分为模拟电机、数字舵机、总线舵机。舵机的讲解可以参考<code>工科孙老师的视频</code></p><p><a href="https://www.bilibili.com/video/BV15X4y157ay?share_source=copy_web">https://www.bilibili.com/video/BV15X4y157ay?share_source=copy_web</a></p><p><a href="https://www.bilibili.com/video/BV14K411F7sT?share_source=copy_web">https://www.bilibili.com/video/BV14K411F7sT?share_source=copy_web</a></p><p><strong>舵机的信号线里面传输的是一种特殊的PWM信号，这是一种周期固定为20ms的的方波，高电平的时间在0.5ms-2.5ms之间变化，0.5ms对应的是舵机旋转到0°，2.5ms是舵机旋转到180°。</strong></p><p><img src="https://cdn.jsdelivr.net/gh/jiejie081/pic/img/image-20220123144627428.png" alt="舵机的PWM信号"></p><p><img src="https://cdn.jsdelivr.net/gh/jiejie081/pic/img/image-20220123144721953.png" alt="舵机角度与PWM信号的关系"></p><h4 id="Arduino舵机的使用"><a href="#Arduino舵机的使用" class="headerlink" title="Arduino舵机的使用"></a>Arduino舵机的使用</h4><p>这是官网的参考<a href="https://www.arduino.cc/reference/en/libraries/servo/">伺服 - Arduino 参考</a></p><ol><li>舵机的连接</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">servo.attach(pin) ;</span><br><span class="line">servo.attach(pin, min, max);</span><br><span class="line">//*servo：类型变量Servo</span><br><span class="line">//*pin：舵机连接到的引脚</span><br><span class="line">//*min（可选）：脉冲宽度，以微秒为单位，对应于舵机上的最小（0度）角（默认为544）</span><br><span class="line">//*max（可选）：脉冲宽度，以微秒为单位，对应于舵机上的最大（180度）角度（默认为2400）</span><br><span class="line">//所以默认的舵机0°和180°是由偏差的，所以我们可以servo.attach(pin,500, 2500);来改为标准的0°与180°</span><br></pre></td></tr></table></figure><ol start="2"><li>舵机角度控制</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">servo.write(angle)；</span><br><span class="line">//*servo:舵机类型的变量</span><br><span class="line">//*angle: 写入舵机的值，从0到180</span><br></pre></td></tr></table></figure><h3 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a>注意事项</h3><ol><li><p>虽然是PWM信号但是因为舵机用到的频率很低，servo库是通过软件模拟出来的，不是用的硬件（晶振）模拟，所以不支持PWM的引脚也是可以控制舵机的。但是软件模拟运用到了TIME1计时器，所以9号和10号引脚就没有PWM输出功能了。（Uno中有三个计时器Timer0、Timer1、Timer2，TIME0控制5，6引脚，Timer1控制9，10引脚，Timer2控制3，11引脚） 。所以为了避免影响其他引脚的使用一般使用9，10号引脚连接舵机。</p></li><li><p>舵机有180°的360°，180°不可以转一圈，但是可以转指定角度。360°的可以圈，但是不可以指定角度，只可以控制转速与方向。</p><p>360度舵机是没有反馈的舵机，因此我们只能控制舵机正反转以及速度。同样用Servo.h舵机控制库来控制。</p><p>当我们把程序烧录进去后可以看到360度舵机在周期性正反转，我们通过修改值来改变旋转方向和速度（小于90为顺时针，大于90为逆时针），不同的值代表不同的速度，靠近90速度越小（可能因为舵机不同而不同，多尝试，<code>myservo.write(90);</code>为停止。</p><p>也可以用<code>servo.writeMicroseconds(us)</code>。参考：<a href="https://www.arduino.cc/reference/en/libraries/servo/writemicroseconds/">Servo - writeMicroseconds（）</a></p></li></ol>]]></content>
      
      
      <categories>
          
          <category> Arduino </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Arduino </tag>
            
            <tag> 舵机 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Arduino-蜂鸣器</title>
      <link href="/p/ed6db4dd.html"/>
      <url>/p/ed6db4dd.html</url>
      
        <content type="html"><![CDATA[<h2 id="蜂鸣器"><a href="#蜂鸣器" class="headerlink" title="蜂鸣器"></a>蜂鸣器</h2><p><strong>蜂鸣器分两种一种是<code>有源蜂鸣器</code>,一种是<code>无源蜂鸣器</code>。</strong></p><p><img src="https://cdn.jsdelivr.net/gh/jiejie081/pic/img/image-20220121162009900.png" alt="有源蜂鸣器与无源蜂鸣器"></p><p>区别：</p><ol><li>有源蜂鸣器有震荡源，而无源蜂鸣器没有</li><li>有源蜂鸣器直流就可以驱动，但是只有一个频率，而无源蜂鸣器只要调整脉冲频率就可以发出不同频率的声音</li><li>有源蜂鸣器贵，无源蜂鸣器比有源蜂鸣器便宜</li></ol><h3 id="无源蜂鸣器使用"><a href="#无源蜂鸣器使用" class="headerlink" title="无源蜂鸣器使用"></a>无源蜂鸣器使用</h3><p>Arduino使用无源蜂鸣器可以用analogWrite()输出不同频率的脉冲电流，也可以用tone()来输出不同的脉冲电流。注意：analogWrite()需要支持PWM 的引脚，而tone()没有引脚要求。</p><h4 id="tone"><a href="#tone" class="headerlink" title="tone()"></a>tone()</h4><p>语法： 具体可查官网参考<a href="https://www.arduino.cc/reference/en/language/functions/advanced-io/tone/">tone()</a></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">tone(pin, frequency);<span class="comment">//需要与noTone()结合使用，停止声音</span></span><br><span class="line">tone(pin, frequency, duration);</span><br><span class="line"><span class="comment">//pin：用于生成音调的 Arduino 引脚。</span></span><br><span class="line"><span class="comment">//frequency ：音调的频率（以赫兹为单位）。允许的数据类型：。</span></span><br><span class="line"><span class="comment">//duration ：音调的持续时间（以毫秒为单位）（可选）。允许的数据类型：。frequencyunsigned intdurationunsigned long</span></span><br></pre></td></tr></table></figure><p>来首桥边姑娘吧！</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> a[] = &#123;<span class="number">0</span>, <span class="number">523</span>, <span class="number">587</span>, <span class="number">659</span>, <span class="number">698</span>, <span class="number">784</span>, <span class="number">880</span>, <span class="number">988</span>, <span class="number">440</span>, <span class="number">392</span>&#125;;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">setup</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  pinMode(<span class="number">7</span>, OUTPUT);</span><br><span class="line">  tone(<span class="number">7</span>, a[<span class="number">3</span>], <span class="number">600</span>);</span><br><span class="line">  delay(<span class="number">700</span>);<span class="comment">//这里要延时要不然后直接被后面的覆盖，700&gt;600是为了中间有一点点停顿</span></span><br><span class="line">  tone(<span class="number">7</span>, a[<span class="number">5</span>], <span class="number">600</span>);</span><br><span class="line">  delay(<span class="number">700</span>);</span><br><span class="line">  tone(<span class="number">7</span>, a[<span class="number">5</span>], <span class="number">900</span>);</span><br><span class="line">  delay(<span class="number">1000</span>);</span><br><span class="line">  tone(<span class="number">7</span>, a[<span class="number">1</span>], <span class="number">300</span>);</span><br><span class="line">  delay(<span class="number">400</span>);</span><br><span class="line"></span><br><span class="line">  tone(<span class="number">7</span>, a[<span class="number">5</span>], <span class="number">600</span>);</span><br><span class="line">  delay(<span class="number">700</span>);</span><br><span class="line">  tone(<span class="number">7</span>, a[<span class="number">5</span>], <span class="number">600</span>);</span><br><span class="line">  delay(<span class="number">700</span>);</span><br><span class="line">  tone(<span class="number">7</span>, a[<span class="number">5</span>], <span class="number">900</span>);</span><br><span class="line">  delay(<span class="number">1000</span>);</span><br><span class="line">  tone(<span class="number">7</span>, a[<span class="number">8</span>], <span class="number">300</span>);</span><br><span class="line">  delay(<span class="number">400</span>);</span><br><span class="line"></span><br><span class="line">  tone(<span class="number">7</span>, a[<span class="number">1</span>], <span class="number">600</span>);</span><br><span class="line">  delay(<span class="number">700</span>);</span><br><span class="line">  tone(<span class="number">7</span>, a[<span class="number">8</span>], <span class="number">600</span>);</span><br><span class="line">  delay(<span class="number">700</span>);</span><br><span class="line">  tone(<span class="number">7</span>, a[<span class="number">1</span>], <span class="number">600</span>);</span><br><span class="line">  delay(<span class="number">700</span>);</span><br><span class="line">  tone(<span class="number">7</span>, a[<span class="number">5</span>], <span class="number">600</span>);</span><br><span class="line">  delay(<span class="number">700</span>);</span><br><span class="line"></span><br><span class="line">  tone(<span class="number">7</span>, a[<span class="number">3</span>], <span class="number">1800</span>);</span><br><span class="line">  delay(<span class="number">1900</span>);</span><br><span class="line">  tone(<span class="number">7</span>, a[<span class="number">9</span>], <span class="number">600</span>);</span><br><span class="line">  delay(<span class="number">700</span>);</span><br><span class="line"></span><br><span class="line">  tone(<span class="number">7</span>, a[<span class="number">8</span>], <span class="number">600</span>);</span><br><span class="line">  delay(<span class="number">700</span>);</span><br><span class="line">  tone(<span class="number">7</span>, a[<span class="number">1</span>], <span class="number">300</span>);</span><br><span class="line">  delay(<span class="number">400</span>);</span><br><span class="line">  tone(<span class="number">7</span>, a[<span class="number">1</span>], <span class="number">300</span>);</span><br><span class="line">  delay(<span class="number">400</span>);</span><br><span class="line">  tone(<span class="number">7</span>, a[<span class="number">1</span>], <span class="number">600</span>);</span><br><span class="line">  delay(<span class="number">700</span>);</span><br><span class="line">  tone(<span class="number">7</span>, a[<span class="number">8</span>], <span class="number">600</span>);</span><br><span class="line">  delay(<span class="number">700</span>);</span><br><span class="line"></span><br><span class="line">  tone(<span class="number">7</span>, a[<span class="number">9</span>], <span class="number">600</span>);</span><br><span class="line">  delay(<span class="number">700</span>);</span><br><span class="line">  tone(<span class="number">7</span>, a[<span class="number">1</span>], <span class="number">600</span>);</span><br><span class="line">  delay(<span class="number">700</span>);</span><br><span class="line">  tone(<span class="number">7</span>, a[<span class="number">1</span>], <span class="number">900</span>);</span><br><span class="line">  delay(<span class="number">1000</span>);</span><br><span class="line">  tone(<span class="number">7</span>, a[<span class="number">8</span>], <span class="number">300</span>);</span><br><span class="line">  delay(<span class="number">400</span>);</span><br><span class="line"></span><br><span class="line">  tone(<span class="number">7</span>, a[<span class="number">1</span>], <span class="number">600</span>);</span><br><span class="line">  delay(<span class="number">700</span>);</span><br><span class="line">  tone(<span class="number">7</span>, a[<span class="number">1</span>], <span class="number">300</span>);</span><br><span class="line">  delay(<span class="number">300</span>);</span><br><span class="line">  tone(<span class="number">7</span>, a[<span class="number">8</span>], <span class="number">300</span>);</span><br><span class="line">  delay(<span class="number">400</span>);</span><br><span class="line">  tone(<span class="number">7</span>, a[<span class="number">8</span>], <span class="number">600</span>);</span><br><span class="line">  delay(<span class="number">700</span>);</span><br><span class="line">  tone(<span class="number">7</span>, a[<span class="number">3</span>], <span class="number">600</span>);</span><br><span class="line">  delay(<span class="number">700</span>);</span><br><span class="line"></span><br><span class="line">  tone(<span class="number">7</span>, a[<span class="number">2</span>], <span class="number">2400</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">loop</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>附上音调对应频率</p><p><img src="https://cdn.jsdelivr.net/gh/jiejie081/pic/img/image-20220121163457014.png" alt="音调对应的频率"></p><h4 id="analogWrite"><a href="#analogWrite" class="headerlink" title="analogWrite()"></a>analogWrite()</h4><p>用analogWrite()也可以是无源蜂鸣器发声，但是一般不怎么做。用这种方法音调收到PWM频率以及占空比的影响，较难输出特定的音调。</p><p><img src="https://cdn.jsdelivr.net/gh/jiejie081/pic/img/image-20220121165926834.png" alt="Uno PWM引脚及频率"></p>]]></content>
      
      
      <categories>
          
          <category> Arduino </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 蜂鸣器 </tag>
            
            <tag> Arduino </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Arduino-模拟I/O的使用</title>
      <link href="/p/acdc2291.html"/>
      <url>/p/acdc2291.html</url>
      
        <content type="html"><![CDATA[<h2 id="模拟I-x2F-O的使用"><a href="#模拟I-x2F-O的使用" class="headerlink" title="模拟I&#x2F;O的使用"></a>模拟I&#x2F;O的使用</h2><h3 id="呼吸灯（模拟信号输出）"><a href="#呼吸灯（模拟信号输出）" class="headerlink" title="呼吸灯（模拟信号输出）"></a>呼吸灯（模拟信号输出）</h3><h4 id="电路图"><a href="#电路图" class="headerlink" title="电路图"></a>电路图</h4><p><img src="https://cdn.jsdelivr.net/gh/jiejie081/pic/img/image-20220119181626208.png" alt="呼吸灯电路图"></p><h4 id="程序代码"><a href="#程序代码" class="headerlink" title="程序代码"></a>程序代码</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> i;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">setup</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  pinMode(<span class="number">3</span>, OUTPUT);<span class="comment">/*这一句不要也可以，在analogWrite() 和analogRead() 函数内部，已经完成了引脚的初始化，因此不用在Setup() 函数中进行初始化操作。*/</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">loop</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt;= <span class="number">255</span>; i += <span class="number">5</span>)</span><br><span class="line">  &#123; analogWrite(<span class="number">3</span>, i);</span><br><span class="line">    delay(<span class="number">50</span>);<span class="comment">//延时50ms 便于观察</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">for</span> (i = <span class="number">255</span>; i &gt;= <span class="number">0</span>; i -= <span class="number">5</span>)</span><br><span class="line">  &#123; analogWrite(<span class="number">3</span>, i);</span><br><span class="line">    delay(<span class="number">50</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="可调电阻、电位器控制LED亮度"><a href="#可调电阻、电位器控制LED亮度" class="headerlink" title="可调电阻、电位器控制LED亮度"></a>可调电阻、电位器控制LED亮度</h3><p>当然我们可以用初中就学过的直接用电阻大小来控制LED的亮度</p><p><img src="https://cdn.jsdelivr.net/gh/jiejie081/pic/img/image-20220119183631214.png" alt="可调电阻控制LED亮度"></p><p>我们知道Arduino 模拟输入功能有10位精度即 2^10^&#x3D;1024 ，即可以将0～5V的电压信号转换为0～1023的整数形式表示。</p><p>模拟输出功能PWM 的脉冲宽度范围为是0~255</p><p>我们可以用0 ~ 1023来表示0 ~ 255从而用可调电阻来调节LED的亮度</p><h4 id="电路图-1"><a href="#电路图-1" class="headerlink" title="电路图"></a>电路图</h4><p><img src="https://cdn.jsdelivr.net/gh/jiejie081/pic/img/image-20220119223542460.png" alt="可调电阻控制LED亮度"></p><h4 id="程序代码-1"><a href="#程序代码-1" class="headerlink" title="程序代码"></a>程序代码</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">int</span> i;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">setup</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  Serial.begin(<span class="number">9600</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">loop</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  i = analogRead(A0);</span><br><span class="line">  Serial.println(i);</span><br><span class="line">  delay(<span class="number">500</span>);</span><br><span class="line">  i = <span class="built_in">map</span>(i, <span class="number">0</span>, <span class="number">1023</span>, <span class="number">0</span>, <span class="number">255</span>);</span><br><span class="line">  analogWrite(<span class="number">3</span>, i)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>这段代码中我们利用了map()函数，转换两个范围。map()的语法</p><p>map(改变前的变量,改变前初值，改变前末值，改变前终值，改变后的初值，改变后的末值)</p><p>语法详细可参照官网<a href="https://www.arduino.cc/reference/en/language/functions/math/map/">map（） - Arduino Reference</a></p><p>这段代码还用到了串口通信</p><blockquote><p>我们使用USB线连接Arduino Uno与计算机时，Arduino Uno会在计算机上虚拟出一个串口设备，此时两者之间便建立了串口连接。通过此连接，Arduino Uno便可与计算机互传数据。</p><p>使用串口与计算机通信，需要先使用Serial.begin() 初始化Arduino的串口通信功能。</p><p><strong>串口初始化</strong></p><p><code>Serial.begin(speed);</code></p><p>参数speed是指串口通信波特率，这是设定串口通信速率的参数。串口通信的双方必须使用同样的波特率，方能正常进行通信。</p><p><strong>波特率</strong>是一个衡量通信速度的参数。它表示每秒钟传送的bit的个数。例如9600波特表示每秒发送9600bit的数据。通信双方需要使用一致的的波特率才能正常通信。Arduino串口通信通常会使用以下波特率：</p><p>300、600、1200、2400、4800、9600、14400、19200、28800、38400、57600、115200。</p><p>波特率越大，说明串口通信的速率越快。</p><p><strong>串口输出</strong></p><p>串口初始化完成后，我们便可以使用Serial.print() 或Serial.println() 向计算机发送信息了。</p><p><code>Serial.print(val);</code></p><p>参数val是你要输出的数据，各种类型的数据均可。</p><p><code>Serial.println(val)</code></p><p>Serial.println(val) 语句也是使用串口输出数据，不同的是println() 函数会在输出完指定数据后，再输出一组回车换行符。</p><p>开启串口输出后，我们可以通过串口监视器查看到串口传来的信息，也可以向连接的设备发送信息。需要注意的是，在串口监视器右下角，有一个波特率设置下拉框，波特率设置必须和烧入程序中设置的一致，才能正常收发数据。</p><p>全面的串口使用参考社区<a href="https://www.arduino.cn/thread-76060-1-1.html">Arduino串口的使用 </a></p></blockquote></blockquote><h3 id="光敏电阻控制LDE亮灭"><a href="#光敏电阻控制LDE亮灭" class="headerlink" title="光敏电阻控制LDE亮灭"></a>光敏电阻控制LDE亮灭</h3><p><strong>光敏电阻</strong> 一种电阻值随照射光强度增加而下降的电阻。</p><p>光敏电阻的使用方法很简单，将其作为一个电阻接入电路中，然后使用analogRead() 读取电压即可。这里我们将光敏电阻和一个普通电阻串联（如图2-42），根据串联分压的方法来读取到光敏电阻上的电压。</p><p><img src="https://cdn.jsdelivr.net/gh/jiejie081/pic/img/212143ftefuxxovvanrvat.jpg" alt="光敏电阻的使用"></p><h4 id="通过串口监视器读取光敏电路的电压模拟值"><a href="#通过串口监视器读取光敏电路的电压模拟值" class="headerlink" title="通过串口监视器读取光敏电路的电压模拟值"></a>通过串口监视器读取光敏电路的电压模拟值</h4><p>我们可以通过模拟输入口A0读取分压后得到的电压。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">setup</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="comment">// 初始化串口</span></span><br><span class="line">  Serial.begin(<span class="number">9600</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">loop</span><span class="params">()</span> </span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="comment">// 读出当前光线强度，并输出到串口显示</span></span><br><span class="line">  <span class="keyword">int</span> sensorValue = analogRead(A0);</span><br><span class="line">  Serial.println(sensorValue);</span><br><span class="line">  delay(<span class="number">1000</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>如果你需要知道当前环境下光敏电阻的阻值，可以使用以下公式计算：</p><p><img src="https://cdn.jsdelivr.net/gh/jiejie081/pic/img/image-20220120001748148.png"></p><p>由于电源波动或外界干扰等原因，输出的数据可能也会受到一定的影响，例如波动较大等现象，这时你可以通过读取多次传感器数值，求平均数的方法，减小数据的波动。</p></blockquote><h4 id="电路图-2"><a href="#电路图-2" class="headerlink" title="电路图"></a>电路图</h4><p><img src="https://cdn.jsdelivr.net/gh/jiejie081/pic/img/image-20220119233151894.png" alt="光敏电阻控制LED亮灭电路图"></p><h4 id="程序代码-2"><a href="#程序代码-2" class="headerlink" title="程序代码"></a>程序代码</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> i;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">setup</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  pinMode(<span class="number">4</span>, OUTPUT);</span><br><span class="line">  Serial.begin(<span class="number">9600</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">loop</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  i = analogRead(A0);</span><br><span class="line">  Serial.println(i);</span><br><span class="line">  delay(<span class="number">500</span>);</span><br><span class="line">  <span class="keyword">if</span> (i &lt;=<span class="number">400</span>)<span class="comment">//数值要根据环境测量</span></span><br><span class="line">  &#123;</span><br><span class="line">    digitalWrite(<span class="number">4</span>, HIGH);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">else</span></span><br><span class="line">  &#123; digitalWrite(<span class="number">4</span>, LOW);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Arduino </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 串口通信 </tag>
            
            <tag> Arduino </tag>
            
            <tag> 模拟信号 </tag>
            
            <tag> 呼吸灯 </tag>
            
            <tag> 光敏电阻 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Arduino-数字I/O的使用</title>
      <link href="/p/f94946b5.html"/>
      <url>/p/f94946b5.html</url>
      
        <content type="html"><![CDATA[<h2 id="数字I-x2F-O的使用"><a href="#数字I-x2F-O的使用" class="headerlink" title="数字I&#x2F;O的使用"></a>数字I&#x2F;O的使用</h2><h3 id="流水灯"><a href="#流水灯" class="headerlink" title="流水灯"></a>流水灯</h3><h4 id="电路图"><a href="#电路图" class="headerlink" title="电路图"></a>电路图</h4><p><img src="https://cdn.jsdelivr.net/gh/jiejie081/pic/img/image-20220118185017345.png" alt="流水灯电路图"></p><h4 id="程序代码"><a href="#程序代码" class="headerlink" title="程序代码"></a>程序代码</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">setup</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">2</span>; i &lt; <span class="number">7</span>; i++)</span><br><span class="line">    pinMode(i, OUTPUT);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">loop</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123; <span class="comment">// 从引脚2到引脚6，逐个点亮LED，等待1秒再熄灭LED</span></span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">2</span>; i &lt; <span class="number">7</span>; i++)</span><br><span class="line">  &#123;</span><br><span class="line">    digitalWrite(i, HIGH);</span><br><span class="line">    delay(<span class="number">500</span>);</span><br><span class="line">    digitalWrite(i, LOW);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="按键控制LED"><a href="#按键控制LED" class="headerlink" title="按键控制LED"></a>按键控制LED</h3><h4 id="电路图-1"><a href="#电路图-1" class="headerlink" title="电路图"></a>电路图</h4><p><img src="https://cdn.jsdelivr.net/gh/jiejie081/pic/img/image-20220118170409353.png" alt="按键控制LED电路图"></p><p>图中使用到了两个电阻 一个是<code>限流电阻</code> 一个是<code>下拉电阻</code></p><p>【限流电阻】</p><p>一般LED的最大能承受的电流为25mA，如若直接将LED连接到电路中，当其点亮时，如果电流过大，很容易烧毁。这样做可以控制流过LED的电流，防止损坏LED。这个电阻我们称之为限流电阻。</p><p>【下拉电阻】</p><p>在Arduino的4号引脚到GND之前，连接了一个阻值10K的电阻。如果没有该电阻，当未按下按键时，4号引脚会一直处于悬空 状态，此时使用digitalRead() 读取2号引脚状态，会得到一个不稳定的值（可能是高，也可能是低）。添加这个电阻到地就是为了稳定引脚的电平，当引脚悬空时，就会识别为低电平。而这种将某节点通过电阻接地的做法，叫做下拉，这个电阻叫做下拉电阻。</p><blockquote><p><img src="https://cdn.jsdelivr.net/gh/jiejie081/pic/img/image-20220118172159102.png" alt="上拉电阻与下拉电阻"></p><p>为什么需用上拉电阻、下拉电阻？</p><p>如果没有上拉电阻、下拉电阻，电路会受到用电器等的电磁干扰而电压是不稳定的，</p><p>但是有了上拉电阻、下拉电阻就可以使得电路某点的电压稳定。</p></blockquote><h4 id="程序代码-1"><a href="#程序代码-1" class="headerlink" title="程序代码"></a>程序代码</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> i;<span class="comment">//输入数字信号</span></span><br><span class="line"><span class="keyword">int</span> j = <span class="number">1</span>;<span class="comment">//LED状态</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">setup</span><span class="params">()</span> </span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  pinMode(<span class="number">3</span>, OUTPUT);</span><br><span class="line">  pinMode(<span class="number">4</span>, INPUT);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">loop</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"></span><br><span class="line">  i = digitalRead(<span class="number">4</span>);</span><br><span class="line">  <span class="keyword">if</span> (i == <span class="number">1</span>)</span><br><span class="line">  &#123; delay(<span class="number">50</span>);<span class="comment">//消除按键抖动</span></span><br><span class="line">      <span class="keyword">while</span> (i == <span class="number">1</span>)</span><br><span class="line">    &#123;</span><br><span class="line">      i = digitalRead(<span class="number">4</span>);</span><br><span class="line">      delay(<span class="number">50</span>);<span class="comment">//消除按键抖动</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    digitalWrite(<span class="number">3</span>, j);</span><br><span class="line">    j = !j;<span class="comment">//状态取反</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="按键控制LED进阶版"><a href="#按键控制LED进阶版" class="headerlink" title="按键控制LED进阶版"></a>按键控制LED进阶版</h3><p>我们可以使用引脚上的内部上拉电阻，等效于在该引脚到VCC之间连接一个外部上拉电阻。</p><p>我们需要把引脚的配置模式改为<code>INPUT_PULLUP     输入上拉模式</code></p><h4 id="电路图-2"><a href="#电路图-2" class="headerlink" title="电路图"></a>电路图</h4><p><img src="https://cdn.jsdelivr.net/gh/jiejie081/pic/img/image-20220118174836749.png" alt="按键控制LED进阶版"></p><h4 id="程序代码-2"><a href="#程序代码-2" class="headerlink" title="程序代码"></a>程序代码</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> i;<span class="comment">//输入数字信号</span></span><br><span class="line"><span class="keyword">int</span> j = <span class="number">1</span>;<span class="comment">//LED状态</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">setup</span><span class="params">()</span> </span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  pinMode(<span class="number">3</span>, OUTPUT);</span><br><span class="line">  pinMode(<span class="number">4</span>, INPUT_PULLUP);<span class="comment">//输入上拉模式</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">loop</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"></span><br><span class="line">  i = digitalRead(<span class="number">4</span>);</span><br><span class="line">  <span class="keyword">if</span> (i == <span class="number">1</span>)</span><br><span class="line">  &#123; delay(<span class="number">50</span>);<span class="comment">//消除按键抖动</span></span><br><span class="line">      <span class="keyword">while</span> (i == <span class="number">1</span>)</span><br><span class="line">    &#123;</span><br><span class="line">      i = digitalRead(<span class="number">4</span>);</span><br><span class="line">      delay(<span class="number">50</span>);<span class="comment">//消除按键抖动</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    digitalWrite(<span class="number">3</span>, j);</span><br><span class="line">    j = !j;<span class="comment">//状态取反</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Arduino </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Arduino </tag>
            
            <tag> 流水灯 </tag>
            
            <tag> 按键控制LED </tag>
            
            <tag> 上拉电阻 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Arduino01-认识Arduino</title>
      <link href="/p/c408c0c4.html"/>
      <url>/p/c408c0c4.html</url>
      
        <content type="html"><![CDATA[<h2 id="认识Arduino-UNO"><a href="#认识Arduino-UNO" class="headerlink" title="认识Arduino UNO"></a>认识Arduino UNO</h2><p><img src="https://cdn.jsdelivr.net/gh/jiejie081/pic/img/210906pl8cbzbqyeiq8ill.jpg" alt="img"></p><blockquote><p>Arduino 是开源的，板子的数据，PCB原理图都可以上官网查看。</p><p>[Arduino UNO R3](<a href="https://docs.arduino.cc/hardware/uno-rev3">UNO R3 | Arduino Documentation | Arduino Documentation</a>)</p></blockquote><h2 id="数字信号与模拟信号"><a href="#数字信号与模拟信号" class="headerlink" title="数字信号与模拟信号"></a>数字信号与模拟信号</h2><h3 id="数字信号"><a href="#数字信号" class="headerlink" title="数字信号"></a>数字信号</h3><blockquote><p> 数字信号是以0、1表示的电平不连续变化的信号，也就是以二进制的形式表示的信号。 在Arduino中数字信号通过高低电平来表示，高电平则为数字信号1，低电平则为数字信号0 。</p></blockquote><p>Arduino上每一个带有数字编号的引脚，都是数字引脚，包括写有“A”编号的模拟输入引脚。使用这些引脚，可以完成输入输出数字信号的功能。</p><p>在使用输入或输出功能前，你需要先通过pinMode() 函数配置引脚的模式为输入模式或输出模式。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pinMode(pin, mode);</span><br></pre></td></tr></table></figure><p>参数pin为指定配置的引脚编号；参数mode为指定的配置模式。<br>可使用的三种模式:<br><strong>INPUT</strong>                      输入模式<br><strong>OUTPUT</strong>                  输出模式<br><strong>INPUT_PULLUP</strong>     输入上拉模式</p><p>数字引脚 既可以输入数字信号 也可以输出数字信号</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//数字信号输出</span></span><br><span class="line">digitalWrite(pin, value);</span><br><span class="line"><span class="comment">//参数pin为指定输出的引脚编号；参数value为你要指定输出的电平，使用HIGH指定输出高电平，或是使用LOW指定输出低电平。</span></span><br></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//数字信号输入</span></span><br><span class="line"><span class="keyword">int</span> value = digitalRead(pin);</span><br><span class="line"><span class="comment">//参数pin为指定读取状态的引脚编号；返回值value为获取到的信号状态，1为高电平，0为低电平。</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//Arduino UNO会将大于3V的输入电压视为高电平识别，小于1.5V的电压视为低电平识别。所以，即使输入电压不太准确，Arduino UNO也可以正常识别。需要注意的是，超过5V的输入电压可能会损坏Arduino UNO。（不同型号的Arduino有所不同）</span></span><br></pre></td></tr></table></figure><blockquote><p>在Arduino核心库中，OUTPUT被定义等于1，INPUT被定义等于0，HIGH被定义等于1，LOW被定义等于0。</p><p>所以OUTPUT，INPUT，HIGH，LOW都是可以用1或0代替的。</p></blockquote><h3 id="模拟信号"><a href="#模拟信号" class="headerlink" title="模拟信号"></a>模拟信号</h3><blockquote><p>模拟信号是指用连续变化的物理量表示的信息，其信号的幅度，或频率，或相位随时间作连续变化，或在一段连续的时间间隔内，其代表信息的特征量可以在任意瞬间呈现为任意数值的信号。</p><p>生活中，接触到的大多数信号都是模拟信号，如声音、温度的变化等。模拟信号是用连续变化的物理量表示的信息，信号随时间作连续变化。在Arduino UNO上，可以接受0～5V的模拟信号。</p></blockquote><h4 id="模拟信号输出"><a href="#模拟信号输出" class="headerlink" title="模拟信号输出"></a>模拟信号输出</h4><p>Arduino 中使用analogWrite() 函数实现模拟信号输出功能。但该函数并不是输出真正意义上的模拟值，而是以一种特殊的方式来达到输出近似模拟值的效果，这种方式叫做脉冲宽度调制（PWM，Pulse Width Modulation）。<br>在Arduino UNO中，提供PWM功能的引脚为3、5、6、9、10、11。</p><blockquote><p>脉宽调制（PWM）是一种使用数字手段获得模拟结果的技术。数字控制用于产生方波，即在开和关之间切换的信号。这种开关模式可以通过改变信号花费的时间与信号关闭的时间，来模拟电路板全Vcc(5V)和关断(0V)之间的电压。”导通时间”的持续时间称为脉冲宽度。要获得不同的模拟值，请更改或调制该脉冲宽度。例如，如果使用 LED 以足够快的速度重复此开关模式，则结果就好像信号是介于 0 和 Vcc 之间的稳定电压，用于控制 LED 的亮度。</p><p><img src="https://cdn.jsdelivr.net/gh/jiejie081/pic/img/image-20220118153948131.png" alt="image-20220118153948131"></p></blockquote><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//模拟信号输出</span></span><br><span class="line">analogWrite(pin,value)；</span><br><span class="line"><span class="comment">//参数pin是指定要输出PWM波的引脚，参数value指定是PWM的脉冲宽度，范围为0～255。   0表示0V   255表示5V</span></span><br><span class="line"><span class="comment">//在analogWrite() 和analogRead() 函数内部，已经完成了引脚的初始化，因此不用在Setup() 函数中进行初始化操作。    </span></span><br></pre></td></tr></table></figure><h4 id="模拟信号输入"><a href="#模拟信号输入" class="headerlink" title="模拟信号输入"></a>模拟信号输入</h4><p>模拟输入引脚是带有ADC（Analog-to-Digital Converter，模数转换器）功能的引脚。它可以将外部输入的模拟信号转换为芯片运算时可以识别的数字信号，从而实现读入模拟值的功能。</p><p>Arduino 模拟输入功能有10位精度，即可以将0～5V的电压信号转换为0～1023的整数形式表示。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//模拟信号输入</span></span><br><span class="line"><span class="keyword">int</span> value = analogRead(pin)；</span><br><span class="line"><span class="comment">//参数pin是指定要读取模拟值的引脚，被指定的引脚必须是模拟输入引脚。如analogRead(A0)即是读取A0引脚上的模拟值。</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Arduino </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Arduino </tag>
            
            <tag> 数字信号 </tag>
            
            <tag> 模拟信号 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>51单片机-独立按键</title>
      <link href="/p/ea6589cc.html"/>
      <url>/p/ea6589cc.html</url>
      
        <content type="html"><![CDATA[<h2 id="按键介绍"><a href="#按键介绍" class="headerlink" title="按键介绍"></a>按键介绍</h2><ul><li>轻触按键：相当于是一种电子开关，按下时开关接通，松开时开关断开，实现原理是通过轻触按键内部的金属弹片受力弹动来实现接通和断开</li></ul><p><img src="https://cdn.jsdelivr.net/gh/jiejie081/pic/img/image-20220113151119921.png" alt="独立按键"></p><ul><li><p>内部结构：</p><p><img src="https://cdn.jsdelivr.net/gh/jiejie081/pic/img/image-20220113152440031.png" alt="独立按键内部结构1"></p></li><li><p>独立按键在开发板中的连接</p></li></ul><p><img src="https://cdn.jsdelivr.net/gh/jiejie081/pic/img/image-20220113153120180.png" alt="独立按键在开发板中的连接"></p><h2 id="独立按键控制LED亮灭"><a href="#独立按键控制LED亮灭" class="headerlink" title="独立按键控制LED亮灭"></a>独立按键控制LED亮灭</h2><blockquote><p>因为按键一端连接的是GND，又因为单片机引脚默认是高电平，所以按下按键引脚检测到的就成了低电平。</p></blockquote><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//按住亮 松开灭</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;REGX52.H&gt;</span></span></span><br><span class="line">main()</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">while</span>(<span class="number">1</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(P3_1==<span class="number">0</span>)<span class="comment">//如果P_3引脚是低电平</span></span><br><span class="line">P2_0=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">P2_0=<span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>但是按键存在抖动</p><ul><li><p>按键的抖动</p><p>对于机械开关，当机械触点断开、闭合时，由于机械触点的弹性作用，一个开关在闭合时不会马上稳定地接通，在断开时也不会一下子断开，所以在开关闭合及断开的瞬间会伴随一连串的抖动</p></li></ul><p><img src="https://cdn.jsdelivr.net/gh/jiejie081/pic/img/image-20220113154316370.png" alt="按键的抖动"></p><blockquote><p>为了防止这一现象，我们可以利用程序消抖</p><p>因为按键按下、弹起的时候存在抖动</p><p>所以我们在按键按下、弹起前一段20ms的延时</p><p>从而起到消除抖动的作用</p></blockquote><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//按一下亮 再按一下灭</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;REGX52.H&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Delay</span><span class="params">(<span class="keyword">unsigned</span> <span class="keyword">int</span> xms)</span><span class="comment">//@11.0592MHz</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">unsigned</span> <span class="keyword">char</span> i, j;</span><br><span class="line"><span class="keyword">while</span>(xms)</span><br><span class="line">    &#123;</span><br><span class="line">i = <span class="number">180</span>;</span><br><span class="line">j = <span class="number">73</span>;</span><br><span class="line"><span class="keyword">do</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">while</span> (--j);</span><br><span class="line">        &#125; <span class="keyword">while</span> (--i);</span><br><span class="line">    xms--;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">mian</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">while</span>(<span class="number">1</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(P3_1==<span class="number">0</span>)</span><br><span class="line">&#123;</span><br><span class="line">Delay(<span class="number">20</span>);</span><br><span class="line"><span class="keyword">while</span>(P3_1==<span class="number">0</span>);<span class="comment">//直到松手，弹片弹起</span></span><br><span class="line">Delay(<span class="number">20</span>);</span><br><span class="line"></span><br><span class="line">P2_0=~P2_0;<span class="comment">//取反~0=1 ~1=0</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*也可以怎么写</span></span><br><span class="line"><span class="comment">if(P3_1==0)</span></span><br><span class="line"><span class="comment">&#123;</span></span><br><span class="line"><span class="comment">Delay(20);</span></span><br><span class="line"><span class="comment">if(P3_1==0) P2_0=~P2_0; </span></span><br><span class="line"><span class="comment">while(P3_1==0);//松手检测，一直按住不会一直执行</span></span><br><span class="line"><span class="comment">&#125;</span></span><br></pre></td></tr></table></figure><h2 id="按键控制LED显示二进制"><a href="#按键控制LED显示二进制" class="headerlink" title="按键控制LED显示二进制"></a>按键控制LED显示二进制</h2><blockquote><p>P2默认状态是1111  1111</p><p>要是二级制</p><p>1就是P2&#x3D;1111 1110  </p><p>2就是P2&#x3D;1111 1101</p><p>以此类推即可  </p><p>我们可以每按下一次 P2– ；来实现LED显示二进制</p></blockquote><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//按键控制LED显示二进制，按一下变化一次</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;REGX52.H&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Delay</span><span class="params">(<span class="keyword">unsigned</span> <span class="keyword">int</span> xms)</span><span class="comment">//@11.0592MHz</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">unsigned</span> <span class="keyword">char</span> i, j;</span><br><span class="line"><span class="keyword">while</span>(xms)</span><br><span class="line">    &#123;</span><br><span class="line">i = <span class="number">180</span>;</span><br><span class="line">j = <span class="number">73</span>;</span><br><span class="line"><span class="keyword">do</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">while</span> (--j);</span><br><span class="line">        &#125; <span class="keyword">while</span> (--i);</span><br><span class="line">    xms--;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">while</span>(<span class="number">1</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(P3_1==<span class="number">0</span>)</span><br><span class="line">&#123;</span><br><span class="line">Delay(<span class="number">20</span>);</span><br><span class="line"><span class="keyword">while</span>(P3_1==<span class="number">0</span>);<span class="comment">//直到松手，弹片弹起</span></span><br><span class="line">Delay(<span class="number">20</span>);</span><br><span class="line"></span><br><span class="line">P2--;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="独立按键控制LED移位"><a href="#独立按键控制LED移位" class="headerlink" title="独立按键控制LED移位"></a>独立按键控制LED移位</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;REGX52.H&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Delay</span><span class="params">(<span class="keyword">unsigned</span> <span class="keyword">int</span> xms)</span><span class="comment">//@11.0592MHz</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">unsigned</span> <span class="keyword">char</span> i, j;</span><br><span class="line"><span class="keyword">while</span>(xms)</span><br><span class="line">    &#123;</span><br><span class="line">i = <span class="number">180</span>;</span><br><span class="line">j = <span class="number">73</span>;</span><br><span class="line"><span class="keyword">do</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">while</span> (--j);</span><br><span class="line">        &#125; <span class="keyword">while</span> (--i);</span><br><span class="line">    xms--;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">unsigned</span> <span class="keyword">char</span> lednum;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">P2=~<span class="number">0x01</span>; <span class="comment">//1111 1110</span></span><br><span class="line"><span class="keyword">while</span>(<span class="number">1</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(P3_1==<span class="number">0</span>)</span><br><span class="line">&#123;</span><br><span class="line">Delay(<span class="number">20</span>);</span><br><span class="line"><span class="keyword">while</span>(P3_0==<span class="number">0</span>);</span><br><span class="line">Delay(<span class="number">20</span>);</span><br><span class="line"></span><br><span class="line">lednum++;</span><br><span class="line"><span class="keyword">if</span>(lednum&gt;=<span class="number">8</span>)<span class="comment">//最后一个灯向右，回到第一个灯</span></span><br><span class="line">lednum=<span class="number">0</span>;</span><br><span class="line">P2=~(<span class="number">0x01</span>&lt;&lt;lednum);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(P3_0==<span class="number">0</span>)</span><br><span class="line">&#123;</span><br><span class="line">Delay(<span class="number">20</span>);</span><br><span class="line"><span class="keyword">while</span>(P3_0==<span class="number">0</span>);</span><br><span class="line">Delay(<span class="number">20</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(lednum==<span class="number">0</span>)<span class="comment">//第一个灯向左，到最后一个灯</span></span><br><span class="line">lednum=<span class="number">8</span>;</span><br><span class="line">lednum--;</span><br><span class="line">P2=~(<span class="number">0x01</span>&lt;&lt;lednum);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="利用定时器扫描按键"><a href="#利用定时器扫描按键" class="headerlink" title="利用定时器扫描按键"></a>利用定时器扫描按键</h2><blockquote><p>利用定时器定时扫描按键的状态，从而判断按键是否按下</p></blockquote><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;REGX52.H&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&quot;Delay.h&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">unsigned</span> <span class="keyword">char</span> Key_KeyNumber;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">  * @brief  获取按键键码</span></span><br><span class="line"><span class="comment">  * @param  无</span></span><br><span class="line"><span class="comment">  * @retval 按下按键的键码，范围：0,1~4,0表示无按键按下</span></span><br><span class="line"><span class="comment">  */</span></span><br><span class="line"><span class="function"><span class="keyword">unsigned</span> <span class="keyword">char</span> <span class="title">Key</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">unsigned</span> <span class="keyword">char</span> Temp=<span class="number">0</span>;</span><br><span class="line">Temp=Key_KeyNumber;</span><br><span class="line">Key_KeyNumber=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">return</span> Temp;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">  * @brief  获取当前按键的状态，无消抖及松手检测</span></span><br><span class="line"><span class="comment">  * @param  无</span></span><br><span class="line"><span class="comment">  * @retval 按下按键的键码，范围：0,1~4,0表示无按键按下</span></span><br><span class="line"><span class="comment">  */</span></span><br><span class="line"><span class="function"><span class="keyword">unsigned</span> <span class="keyword">char</span> <span class="title">Key_GetState</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">unsigned</span> <span class="keyword">char</span> KeyNumber=<span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(P3_1==<span class="number">0</span>)&#123;KeyNumber=<span class="number">1</span>;&#125;</span><br><span class="line"><span class="keyword">if</span>(P3_0==<span class="number">0</span>)&#123;KeyNumber=<span class="number">2</span>;&#125;</span><br><span class="line"><span class="keyword">if</span>(P3_2==<span class="number">0</span>)&#123;KeyNumber=<span class="number">3</span>;&#125;</span><br><span class="line"><span class="keyword">if</span>(P3_3==<span class="number">0</span>)&#123;KeyNumber=<span class="number">4</span>;&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> KeyNumber;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">  * @brief  按键驱动函数，在中断中调用</span></span><br><span class="line"><span class="comment">  * @param  无</span></span><br><span class="line"><span class="comment">  * @retval 无</span></span><br><span class="line"><span class="comment">  */</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Key_Loop</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">static</span> <span class="keyword">unsigned</span> <span class="keyword">char</span> NowState,LastState;</span><br><span class="line">LastState=NowState;<span class="comment">//按键状态更新</span></span><br><span class="line">NowState=Key_GetState();<span class="comment">//获取当前按键状态</span></span><br><span class="line"><span class="comment">//如果上个时间点按键按下，这个时间点未按下，则是松手瞬间，以此避免消抖和松手检测</span></span><br><span class="line">    <span class="comment">//如果上个时间点按键未按下，这个时间点按下，则是按下瞬间，也可以避免消抖和松手检测</span></span><br><span class="line"><span class="keyword">if</span>(LastState==<span class="number">1</span> &amp;&amp; NowState==<span class="number">0</span>)</span><br><span class="line">&#123;</span><br><span class="line">Key_KeyNumber=<span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(LastState==<span class="number">2</span> &amp;&amp; NowState==<span class="number">0</span>)</span><br><span class="line">&#123;</span><br><span class="line">Key_KeyNumber=<span class="number">2</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(LastState==<span class="number">3</span> &amp;&amp; NowState==<span class="number">0</span>)</span><br><span class="line">&#123;</span><br><span class="line">Key_KeyNumber=<span class="number">3</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(LastState==<span class="number">4</span> &amp;&amp; NowState==<span class="number">0</span>)</span><br><span class="line">&#123;</span><br><span class="line">Key_KeyNumber=<span class="number">4</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//主函数中这样调用</span></span><br><span class="line"><span class="keyword">unsigned</span> <span class="keyword">char</span> KeyNum；</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">Timer0_Init();</span><br><span class="line"><span class="keyword">while</span>(<span class="number">1</span>)</span><br><span class="line">&#123;</span><br><span class="line">KeyNum=Key();</span><br><span class="line"><span class="keyword">if</span>(KeyNum==<span class="number">1</span>)<span class="comment">//K1按键按下</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">//K1按键按下后的操作</span></span><br><span class="line">&#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Timer0_Routine</span><span class="params">()</span> interrupt 1</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">static</span> <span class="keyword">unsigned</span> <span class="keyword">int</span> T0Count1,</span><br><span class="line">TL0 = <span class="number">0x18</span>;<span class="comment">//设置定时初值</span></span><br><span class="line">TH0 = <span class="number">0xFC</span>;<span class="comment">//设置定时初值</span></span><br><span class="line">T0Count1++;</span><br><span class="line"><span class="keyword">if</span>(T0Count1&gt;=<span class="number">20</span>)</span><br><span class="line">&#123;</span><br><span class="line">T0Count1=<span class="number">0</span>;</span><br><span class="line">Key_Loop();<span class="comment">//20ms调用一次按键驱动函数</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="关于static"><a href="#关于static" class="headerlink" title="关于static"></a>关于static</h2><p>在 C 语言中，static 关键字不仅可以用来修饰变量，还可以用来修饰函数。在使用 static 关键字修饰变量时，我们称此变量为静态变量。</p><p>静态变量的存储方式与全局变量一样，都是静态存储方式。但这里需要特别说明的是，静态变量属于静态存储方式，属于静态存储方式的变量却不一定就是静态变量。例如，全局变量虽然属于静态存储方式，但并不是静态变量，它必须由 static 加以定义后才能成为静态全局变量。</p><p>考虑到可能会有不少读者对静态变量作用不太清楚，本节就来详细讨论一下它的主要作用。</p><h3 id="隐藏与隔离的作用"><a href="#隐藏与隔离的作用" class="headerlink" title="隐藏与隔离的作用"></a>隐藏与隔离的作用</h3><p>上面已经阐述过，全局变量虽然属于静态存储方式，但并不是静态变量。全局变量的作用域是整个源程序，当一个源程序由多个源文件组成时，全局变量在各个源文件中都是有效的。</p><p>如果我们希望全局变量仅限于在本源文件中使用，在其他源文件中不能引用，也就是说限制其作用域只在定义该变量的源文件内有效，而在同一源程序的其他源文件中不能使用。这时，就可以通过在全局变量之前加上关键字 static 来实现，使全局变量被定义成为一个静态全局变量。这样就可以避免在其他源文件中引起的错误。也就起到了对其他源文件进行隐藏与隔离错误的作用，有利于模块化程序设计。</p><h3 id="保持变量内容的持久性"><a href="#保持变量内容的持久性" class="headerlink" title="保持变量内容的持久性"></a>保持变量内容的持久性</h3><p>有时候，我们希望函数中局部变量的值在函数调用结束之后不会消失，而仍然保留其原值。即它所占用的存储单元不释放，在下一次调用该函数时，其局部变量的值仍然存在，也就是上一次函数调用结束时的值。这时候，我们就应该将该局部变量用关键字 static 声明为“静态局部变量”。</p><p>当将局部变量声明为静态局部变量的时候，也就改变了局部变量的存储位置，即从原来的栈中存放改为静态存储区存放。这让它看起来很像全局变量，其实静态局部变量与全局变量的主要区别就在于可见性，静态局部变量只在其被声明的代码块中是可见的。</p><p>对某些必须在调用之间保持局部变量的值的子程序而言，静态局部变量是特别重要的。如果没有静态局部变量，则必须在这类函数中使用全局变量，由此也就打开了引入副作用的大门。使用静态局部变量最好的示例就是实现统计次数的功能。</p><p>参考：</p><p><a href="http://c.biancheng.net/view/301.html">static变量及其作用，C语言static变量详解 (biancheng.net)</a></p>]]></content>
      
      
      <categories>
          
          <category> 51单片机 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 51单片机 </tag>
            
            <tag> 独立按键 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>51单片机-LED</title>
      <link href="/p/11c433a2.html"/>
      <url>/p/11c433a2.html</url>
      
        <content type="html"><![CDATA[<p>学会LED，正式成为一位电灯大师</p><h2 id="LED介绍"><a href="#LED介绍" class="headerlink" title="LED介绍"></a>LED介绍</h2><ul><li><p>中文名：发光二极管</p></li><li><p>外文名：Light Emitting Diode</p></li><li><p>简称：LED</p></li><li><p>用途：照明、广告灯、指引灯、屏幕</p></li></ul><p><img src="https://cdn.jsdelivr.net/gh/jiejie081/pic/img/image-20220112223944602.png" alt="发光二极管"><img src="https://cdn.jsdelivr.net/gh/jiejie081/pic/img/image-20220112224014433.png" alt="发光二极管的引脚"><img src="https://cdn.jsdelivr.net/gh/jiejie081/pic/img/image-20220112224546139.png" alt="发光二极管符号"></p><h2 id="创建一个工程项目"><a href="#创建一个工程项目" class="headerlink" title="创建一个工程项目"></a>创建一个工程项目</h2><ol><li>打开Keil  </li><li><kbd>Project</kbd> >> <kbd>New Project</kbd> </li><li>选择单片机型号 <code>AT89C52</code></li><li>不添加启动文件 点<code>否</code></li><li>右键 <code>Source Group 1</code>添加 一个新的文件 <code>Add New Item</code></li><li>选择C语言</li><li>注：要生成<code>hex</code>文件 需要在<code>设置（Options）</code> 中打开<code>Creat HEX File</code>选项</li></ol><h2 id="LED-在开发板中的连接方式"><a href="#LED-在开发板中的连接方式" class="headerlink" title="LED 在开发板中的连接方式"></a>LED 在开发板中的连接方式</h2><p><img src="https://cdn.jsdelivr.net/gh/jiejie081/pic/img/image-20220113104542258.png" alt="LED模块在开发板中的连接"></p><h2 id="点亮一个LED"><a href="#点亮一个LED" class="headerlink" title="点亮一个LED"></a>点亮一个LED</h2><blockquote><p>因为LED 非连接单片机一端连的是VCC， 所以连接单片机引脚的一端 要输出低电压 才可以使得LED点亮</p><p>基本原理：</p><p><code>CPU</code> 执行程序给 <code>P2寄存器</code>（8个为一组 分别为 P2_0 — P2_7 ）输入数字信号 0为低电平 1为高电平(【TTL电平】高电平：5V 低电平： 0V) 每个寄存器连一个驱动器连接引脚 由驱动器控制高低电平 从而控制LED  </p><p>因为引脚默认输出的是高电平，所以我们只需要对想要点亮的LED对应引脚输出低电平就可以了</p><p>也可以对整组寄存器进行控制</p><p>因为一组寄存器是8位  2^4^&#x3D;16 所以可以用两个十六进制控制一组寄存器   </p><p>十六进制表示方式 ：    0x</p></blockquote><p><img src="https://cdn.jsdelivr.net/gh/jiejie081/pic/img/image-20220113121643604.png" alt="进制转换"></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;REGX52.H&gt;</span>   <span class="comment">//头文件</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">P2_0=<span class="number">0</span>;</span><br><span class="line">  <span class="comment">//P2=0xFE; //1111 1110  P2从右往左以此是P2_0—P2_7</span></span><br><span class="line">  <span class="comment">//也可以用十六进制控制整组寄存器</span></span><br><span class="line"><span class="keyword">while</span>(<span class="number">1</span>);<span class="comment">//加一个循环，防止反复对P2 进行操作</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="LED闪烁"><a href="#LED闪烁" class="headerlink" title="LED闪烁"></a>LED闪烁</h2><blockquote><p>我们可以是用STC-ISP 的软件延时计算器工具  生成延时函数 </p><p>注意：调整系统频率,就是晶振的频率 我的是11.0592MHz</p><p>​            8051指令集为Y1</p></blockquote><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;REGX52.H&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;INTRINS.H&gt;</span>  <span class="comment">//_nop_();语句的头文件</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Delay500ms</span><span class="params">()</span><span class="comment">//@11.0592MHz  500ms延时函数</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">unsigned</span> <span class="keyword">char</span> i, j, k;</span><br><span class="line"></span><br><span class="line">_nop_();</span><br><span class="line">i = <span class="number">4</span>;</span><br><span class="line">j = <span class="number">129</span>;</span><br><span class="line">k = <span class="number">119</span>;</span><br><span class="line"><span class="keyword">do</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">do</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">while</span> (--k);</span><br><span class="line">&#125; <span class="keyword">while</span> (--j);</span><br><span class="line">&#125; <span class="keyword">while</span> (--i);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">while</span>(<span class="number">1</span>)</span><br><span class="line">&#123;</span><br><span class="line">P2_0=<span class="number">0</span>;<span class="comment">//P2=0xFE;</span></span><br><span class="line">Delay500ms();</span><br><span class="line">P2_0=<span class="number">1</span>;<span class="comment">//p2=0xFF;</span></span><br><span class="line">Delay500ms();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="流水灯的几种写法"><a href="#流水灯的几种写法" class="headerlink" title="流水灯的几种写法"></a>流水灯的几种写法</h2><h3 id="方法一"><a href="#方法一" class="headerlink" title="方法一"></a>方法一</h3><blockquote><p>与LED闪烁一样我们只需要用延时函数，然后依次控制每个灯就可以了</p></blockquote><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;REGX52.H&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;INTRINS.H&gt;</span><span class="comment">//延时函数中的_nop_()语句再这个库中定义</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Delay</span><span class="params">(<span class="keyword">unsigned</span> <span class="keyword">int</span> xms)</span><span class="comment">//@11.0592MHz 延时函数</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">unsigned</span> <span class="keyword">char</span> i, j;</span><br><span class="line"><span class="keyword">while</span>(xms)&#123;</span><br><span class="line">_nop_();</span><br><span class="line">i = <span class="number">2</span>;</span><br><span class="line">j = <span class="number">199</span>;</span><br><span class="line"><span class="keyword">do</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">while</span> (--j);</span><br><span class="line">&#125; <span class="keyword">while</span> (--i);</span><br><span class="line">xms--;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">while</span>(<span class="number">1</span>)</span><br><span class="line">&#123;</span><br><span class="line">P2=<span class="number">0xFE</span>;<span class="comment">//1111 1110</span></span><br><span class="line">Delay(<span class="number">500</span>);</span><br><span class="line">P2=<span class="number">0xFD</span>;<span class="comment">//1111 1101</span></span><br><span class="line">Delay(<span class="number">500</span>);</span><br><span class="line">P2=<span class="number">0xFB</span>;<span class="comment">//1111 1011</span></span><br><span class="line">Delay(<span class="number">500</span>);</span><br><span class="line">P2=<span class="number">0xF7</span>;<span class="comment">//1111 0111</span></span><br><span class="line">Delay(<span class="number">500</span>);</span><br><span class="line">P2=<span class="number">0xEF</span>;<span class="comment">//1110 1111</span></span><br><span class="line">Delay(<span class="number">500</span>);</span><br><span class="line">P2=<span class="number">0xDF</span>;<span class="comment">//1101 1111</span></span><br><span class="line">Delay(<span class="number">500</span>);</span><br><span class="line">P2=<span class="number">0xBF</span>;<span class="comment">//1011 1111</span></span><br><span class="line">Delay(<span class="number">500</span>);</span><br><span class="line">P2=<span class="number">0x7F</span>;<span class="comment">//0111 1111</span></span><br><span class="line">Delay(<span class="number">500</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>到这里我已成为一名合格的电灯大师！！！</p><h3 id="方法二"><a href="#方法二" class="headerlink" title="方法二"></a>方法二</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//方法二 利用数组</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;REGX52.H&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;INTRINS.H&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Delay</span><span class="params">(<span class="keyword">unsigned</span> <span class="keyword">int</span> xms)</span><span class="comment">//@11.0592MHz 延时函数</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">unsigned</span> <span class="keyword">char</span> i, j;</span><br><span class="line"><span class="keyword">while</span>(xms)&#123;</span><br><span class="line">_nop_();</span><br><span class="line">i = <span class="number">2</span>;</span><br><span class="line">j = <span class="number">199</span>;</span><br><span class="line"><span class="keyword">do</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">while</span> (--j);</span><br><span class="line">&#125; <span class="keyword">while</span> (--i);</span><br><span class="line">xms--;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">unsigned</span> <span class="keyword">char</span> LED[<span class="number">8</span>]=&#123;<span class="number">0xFE</span>,<span class="number">0xFD</span>,<span class="number">0xFB</span>,<span class="number">0xF7</span>,<span class="number">0xEF</span>,<span class="number">0xDF</span>,<span class="number">0xBF</span>,<span class="number">0x7F</span>&#125;;<span class="comment">//定义数组</span></span><br><span class="line"><span class="keyword">unsigned</span> <span class="keyword">int</span> i = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"> <span class="keyword">while</span>(<span class="number">1</span>)&#123;</span><br><span class="line"> <span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;<span class="number">8</span>;i++)</span><br><span class="line"> &#123;</span><br><span class="line"> P1 = LED[i];</span><br><span class="line"> Delay(<span class="number">500</span>);</span><br><span class="line"> &#125;</span><br><span class="line"> &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="方法三"><a href="#方法三" class="headerlink" title="方法三"></a>方法三</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//方法三  利用 &lt;&lt; 位移</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;REGX52.H&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;INTRINS.H&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Delay</span><span class="params">(<span class="keyword">unsigned</span> <span class="keyword">int</span> xms)</span><span class="comment">//@11.0592MHz 延时函数</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">unsigned</span> <span class="keyword">char</span> i, j;</span><br><span class="line"><span class="keyword">while</span>(xms)&#123;</span><br><span class="line">_nop_();</span><br><span class="line">i = <span class="number">2</span>;</span><br><span class="line">j = <span class="number">199</span>;</span><br><span class="line"><span class="keyword">do</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">while</span> (--j);</span><br><span class="line">&#125; <span class="keyword">while</span> (--i);</span><br><span class="line">xms--;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">unsigned</span> <span class="keyword">char</span> i = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">while</span>(<span class="number">1</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;<span class="number">8</span>;i++)</span><br><span class="line">&#123;</span><br><span class="line">P1 = ~(<span class="number">0x01</span> &lt;&lt; i );  <span class="comment">//目标是1111 1110 写0000 0001 然后取反</span></span><br><span class="line">Delay(<span class="number">500</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//当然还可以先a = 0xFE;然后定义P1 = a;a = (a &lt;&lt; 1)+1;</span></span><br><span class="line"><span class="comment">//还可以每次都P1 &lt;&lt; 1; P1 |= 0X01;</span></span><br></pre></td></tr></table></figure><h3 id="方法四"><a href="#方法四" class="headerlink" title="方法四"></a>方法四</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//方法四  利用&lt;INTRINS.H&gt;库中的_corl_()函数</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;REGX52.H&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;INTRINS.H&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Delay</span><span class="params">(<span class="keyword">unsigned</span> <span class="keyword">int</span> xms)</span><span class="comment">//@11.0592MHz 延时函数</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">unsigned</span> <span class="keyword">char</span> i, j;</span><br><span class="line"><span class="keyword">while</span>(xms)&#123;</span><br><span class="line">_nop_();</span><br><span class="line">i = <span class="number">2</span>;</span><br><span class="line">j = <span class="number">199</span>;</span><br><span class="line"><span class="keyword">do</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">while</span> (--j);</span><br><span class="line">&#125; <span class="keyword">while</span> (--i);</span><br><span class="line">xms--;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">unsigned</span> <span class="keyword">char</span> a=<span class="number">0xFE</span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">while</span>(<span class="number">1</span>)</span><br><span class="line">    &#123;</span><br><span class="line">    P1 =  a;</span><br><span class="line">Delay(<span class="number">500</span>);</span><br><span class="line">a=_crol_(a,<span class="number">1</span>)  ; <span class="comment">//将a左移1位，一位后最高位变最低位</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 51单片机 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 51单片机 </tag>
            
            <tag> LED </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>51单片机-51单片机介绍</title>
      <link href="/p/440ecb0c.html"/>
      <url>/p/440ecb0c.html</url>
      
        <content type="html"><![CDATA[<h2 id="开发工具"><a href="#开发工具" class="headerlink" title="开发工具"></a>开发工具</h2><ul><li><p><code>Keil C51</code> （Keil C51是美国Keil Software公司出品的51系列兼容单片机C语言软件开发系统）</p><p>下载地址： <a href="www.keil.com">Keil 官网</a>    或者  <code>软件管家</code>   </p></li><li><p><code>STC-ISP</code> （STC芯片烧录工具）及 <code>驱动程序</code></p><p>下载地址： <a href="https://www.stcmcudata.com/">STC官网</a></p></li></ul><h2 id="单片机（MCU）"><a href="#单片机（MCU）" class="headerlink" title="单片机（MCU）"></a>单片机（MCU）</h2><h3 id="单片机介绍"><a href="#单片机介绍" class="headerlink" title="单片机介绍"></a>单片机介绍</h3><ul><li>单片机，英文Micro Controller Unit，简称MCU</li><li>内部集成了CPU、RAM、ROM、定时器、中断系统、通讯接口等一系列电脑的常用硬件功能</li><li>单片机的任务是信息采集（依靠传感器）、处理（依靠CPU）和硬件设备（例如电机，LED等）的控制</li><li>单片机跟计算机相比，单片机算是一个袖珍版计算机，一个芯片就能构成完整的计算机系统。但在性能上，与计算机相差甚远，但单片机成本低、体积小、结构简单，在生活和工业控制领域大有所用</li><li>同时，学习使用单片机是了解计算机原理与结构的最佳选择</li></ul><iframe src="//player.bilibili.com/player.html?aid=381085577&bvid=BV1CZ4y1Z79w&cid=495253855&page=1"  scrolling="no" border="0" frameborder="no" framespacing="0" allowfullscreen="true" height="480" width="800"> </iframe><h3 id="单片机的应用"><a href="#单片机的应用" class="headerlink" title="单片机的应用"></a>单片机的应用</h3><ul><li>单片机的使用领域已十分广泛，如智能仪表、实时工控、通讯设备、导航系统、家用电器等。各种产品一旦用上了单片机，就能起到使产品升级换代的功效，常在产品名称前冠以形容词——“智能型”，如智能型洗衣机等</li></ul><h3 id="STC89C52单片机"><a href="#STC89C52单片机" class="headerlink" title="STC89C52单片机"></a>STC89C52单片机</h3><ul><li><p>所属系列：51单片机系列                  </p></li><li><p>公司：STC公司</p></li><li><p>位数：8位</p></li><li><p>RAM：512字节</p></li><li><p>ROM：8K（Flash）</p></li><li><p>工作频率：12MHz（开发板使用）</p><p><img src="https://cdn.jsdelivr.net/gh/jiejie081/pic/img/image-20220327103315953.png" alt="image-20220327103315953"></p><p><img src="https://cdn.jsdelivr.net/gh/jiejie081/pic/img/image-20220112220854850.png" alt="STC89C52"></p></li></ul><h3 id="命名规则"><a href="#命名规则" class="headerlink" title="命名规则"></a>命名规则</h3><p><img src="https://cdn.jsdelivr.net/gh/jiejie081/pic/img/image-20220112223254939.png" alt="STC89C52"></p><p><img src="https://cdn.jsdelivr.net/gh/jiejie081/pic/img/image-20220112223228105.png" alt="STC89C52命名规则"></p><h2 id="单片机内部结构"><a href="#单片机内部结构" class="headerlink" title="单片机内部结构"></a>单片机内部结构</h2><p><img src="https://cdn.jsdelivr.net/gh/jiejie081/pic/img/image-20220113181229166.png" alt="单片机内部结构"></p><p><img src="https://cdn.jsdelivr.net/gh/jiejie081/pic/img/image-20220113181313175.png" alt="STC89C52系列内部结构框图"></p><h2 id="单片机最小系统"><a href="#单片机最小系统" class="headerlink" title="单片机最小系统"></a>单片机最小系统</h2><p><img src="https://cdn.jsdelivr.net/gh/jiejie081/pic/img/image-20220113181807671.png" alt="单片机最小系统"></p>]]></content>
      
      
      <categories>
          
          <category> 51单片机 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 51单片机 </tag>
            
            <tag> Keil </tag>
            
            <tag> STC </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Git与GitHub常用命令</title>
      <link href="/p/8dde43cf.html"/>
      <url>/p/8dde43cf.html</url>
      
        <content type="html"><![CDATA[<h1 id="Git与GitHub常用命令"><a href="#Git与GitHub常用命令" class="headerlink" title="Git与GitHub常用命令"></a>Git与GitHub常用命令</h1><h2 id="Git"><a href="#Git" class="headerlink" title="Git"></a>Git</h2><ul><li>创库初始化</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git init</span><br></pre></td></tr></table></figure><ul><li>查看当前git本地仓库状态</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git status</span><br></pre></td></tr></table></figure><ul><li>添加文件到本地缓存区</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git add [file]</span><br></pre></td></tr></table></figure><ul><li>将文件从缓存区移除</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git rm -cached [file]</span><br></pre></td></tr></table></figure><ul><li>提交缓存区内容到本地库并附加提交信息</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git commit -m &quot;附加信息&quot;</span><br><span class="line">git commit -m &quot;附加信息&quot; [file]  #仅将file文件提交</span><br></pre></td></tr></table></figure><ul><li>查看历史记录</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">git log</span><br><span class="line">git log--pretty=oneline</span><br><span class="line">git reflog</span><br></pre></td></tr></table></figure><ul><li>版本前进后退</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">基于索引值操作[推荐]</span></span><br><span class="line"></span><br><span class="line">git reset --hard [局部索引值]</span><br><span class="line">git reset --hard a6ace91</span><br><span class="line"><span class="meta">#</span><span class="bash">使用^符号：只能后退</span></span><br><span class="line">git reset --hard HEAD^ 注：一个^表示后退一步，n 个表示后退 n 步</span><br><span class="line"><span class="meta">#</span><span class="bash">使用~符号：只能后退</span></span><br><span class="line">git reset --hard HEAD~n</span><br><span class="line"><span class="meta">#</span><span class="bash">注：表示后退 n</span></span><br></pre></td></tr></table></figure><ul><li>签名设置</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">git config user.name [name]</span><br><span class="line">git comfig user.email [email]</span><br><span class="line"><span class="meta">#</span><span class="bash">项目（仓库）级别签名，仅对该项目有效 信息保存在 ./.git/config</span></span><br><span class="line">git config --global user.name [name]</span><br><span class="line">git comfig --global user.email [email]</span><br><span class="line"><span class="meta">#</span><span class="bash">系统级别签名，对当前操作系统的用户有效 ~/.gitconfig 文件</span></span><br></pre></td></tr></table></figure><ul><li>分支操作</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">创建分支</span></span><br><span class="line">git branch [分支名]</span><br><span class="line"><span class="meta">#</span><span class="bash">查看分支</span></span><br><span class="line">git branch -v</span><br><span class="line"><span class="meta">#</span><span class="bash">切换分支</span></span><br><span class="line">git checkout [分支名]</span><br><span class="line"><span class="meta">#</span><span class="bash">合并分支</span></span><br><span class="line"><span class="meta">#</span><span class="bash">第一步：切换到接受修改的分支（被合并，增加新内容）上</span></span><br><span class="line">git checkout [被合并分支名]</span><br><span class="line"><span class="meta">#</span><span class="bash">第二步：执行 merge 命令</span></span><br><span class="line">git merge [有新内容分支名]</span><br><span class="line"><span class="meta">#</span><span class="bash">合并时分支相同文件，不同内容回产生冲突</span></span><br><span class="line"><span class="meta">#</span><span class="bash">第一步：编辑文件，删除特殊符号</span></span><br><span class="line"><span class="meta">#</span><span class="bash">第二步：把文件修改到满意的程度，保存退出</span></span><br><span class="line"><span class="meta">#</span><span class="bash">第三步：git add [文件名]</span></span><br><span class="line"><span class="meta">#</span><span class="bash">第四步：git commit -m <span class="string">&quot;日志信息&quot;</span>   注意：此时 commit 一定不能</span></span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash">删除分支a</span></span><br><span class="line">git branch -d a</span><br><span class="line"><span class="meta">#</span><span class="bash">强制删除分支a</span></span><br><span class="line">git branch -D a</span><br></pre></td></tr></table></figure><ul><li>版本标签以及切换</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">为当前的状态打一个v1.0的标签</span></span><br><span class="line">git tag v1.0</span><br><span class="line"><span class="meta">#</span><span class="bash">查看历史tag记录</span></span><br><span class="line">git tag</span><br><span class="line"><span class="meta">#</span><span class="bash">切换到v1.0状态</span></span><br><span class="line">git checkout v1.0</span><br></pre></td></tr></table></figure><h2 id="GitHub"><a href="#GitHub" class="headerlink" title="GitHub"></a>GitHub</h2><h3 id="密钥"><a href="#密钥" class="headerlink" title="密钥"></a>密钥</h3><p>在向 GitHub 提交代码前，需要 SSH 授权，因此要创建 SSH Key</p><ol><li><p>生成密钥</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssh-keygen -t rsa -C &quot;email&quot;</span><br></pre></td></tr></table></figure><p>rsa 算法生成密钥，接着连续三个回车键（不需要输入密码），然后就会生成两个文件 id_rsa 和 id_rsa.pub。命令执行结果会告诉你文件默认路径, 其中 id_rsa 是密钥（ &#x2F;c&#x2F;Users&#x2F;yu&#x2F;.ssh&#x2F;id_rsa ）， id_rsa.pub 就是公钥（ &#x2F;c&#x2F;Users&#x2F;yu&#x2F;.ssh&#x2F;id_rsa.pub ）</p></li><li><p>在github上添加 ssh key</p></li></ol><ul><li>进入自己的 GitHub 的设置界面，如图：</li><li>点击 New SSH Key 按钮，并把上述 id_rsa.pub 中的内容填入下面 Key 输入框中，如图：</li><li>点击 Add SSH Key 就可以了</li></ul><ol start="3"><li><p>测试秘钥是否成功</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssh -T git@github.com  </span><br></pre></td></tr></table></figure></li></ol><p>第一次使用可能提示 github.com 无法验是否证可信任，输入 yes</p><h3 id="推送"><a href="#推送" class="headerlink" title="推送"></a>推送</h3><ul><li><p>创建远程库地址别名</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git remote -v #查看当前所有远程库别名</span><br><span class="line">git remote add [别名] [远程库地址]</span><br></pre></td></tr></table></figure></li><li><p>推送</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git push [别名] [分支名]</span><br></pre></td></tr></table></figure></li><li><p>克隆</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git clone [远程地址]</span><br></pre></td></tr></table></figure></li><li><p>拉取</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> pull=fetch+merge</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> fetch （拿来）拉去但是没有对本地更改</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> merge （合并）对本地进行更改</span></span><br><span class="line">git fetch [远程库地址别名] [远程分支名]</span><br><span class="line">git merge [远程库地址别名/远程分支名]</span><br><span class="line">git pull [远程库地址别名] </span><br></pre></td></tr></table></figure></li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> git </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>GitHub+Hexo 个人博客</title>
      <link href="/p/8306de21.html"/>
      <url>/p/8306de21.html</url>
      
        <content type="html"><![CDATA[<h1 id=""><a href="#" class="headerlink" title=""></a><mark class="hl-label blue">GitHub+Hexo个人博客</mark> </h1><h2 id="环境准备"><a href="#环境准备" class="headerlink" title="环境准备"></a>环境准备</h2><ol><li><p>git            <a href="https://git-scm.com/">Git 官网</a></p></li><li><p>node.js   <a href="https://nodejs.org/en/">node官网</a></p></li><li><p>Hexo      <a href="https://hexo.io/zh-cn/index.html">Hexo官网</a></p></li></ol><p>   或者直接用命令：</p>   <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo-cli -g</span><br></pre></td></tr></table></figure><h2 id="创建并绑定GitHub"><a href="#创建并绑定GitHub" class="headerlink" title="创建并绑定GitHub"></a>创建并绑定GitHub</h2><ol><li><p>创建一个GitHub账号</p></li><li><p>创建一个库 名字为 [name].github.io</p></li><li><p>生成ssh</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssh-keygen -t rsa -C &quot;email&quot;</span><br></pre></td></tr></table></figure><p>rsa 算法生成密钥，接着连续三个回车键（不需要输入密码），然后就会生成两个文件 id_rsa 和 id_rsa.pub。命令执行结果会告诉你文件默认路径, 其中 id_rsa 是密钥（ &#x2F;c&#x2F;Users&#x2F;yu&#x2F;.ssh&#x2F;id_rsa ）， id_rsa.pub 就是公钥（ &#x2F;c&#x2F;Users&#x2F;yu&#x2F;.ssh&#x2F;id_rsa.pub ）</p></li><li><p>在github上添加 ssh key</p></li></ol><ul><li>进入自己的 GitHub 的设置界面</li><li>点击 New SSH Key 按钮，并把上述 id_rsa.pub 中的内容填入下面 Key 输入框中，如图：</li><li>点击 Add SSH Key 就可以了</li></ul><ol start="5"><li><p>测试秘钥是否成功</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssh -T git@github.com  </span><br></pre></td></tr></table></figure></li></ol><p>第一次使用可能提示 github.com 无法验是否证可信任，输入 yes</p><ol start="6"><li>生成令牌</li></ol><ul><li>进入自己的 GitHub 的设置界面（settings）</li><li>点击 Developer settings 按钮 </li><li>点击 Personal access tokens</li><li>点击 Generate new token </li><li>Note 随便填 Expiration可以设置令牌时间 Select scopes全选</li><li>点击 Generate 就可以了</li><li>注意：令牌只有在生成的时候显示，要复制一下记下来</li></ul><h2 id="Hexo博客搭建"><a href="#Hexo博客搭建" class="headerlink" title="Hexo博客搭建"></a>Hexo博客搭建</h2><ol><li><p>新建一个名为blog的文件夹，在文件夹内 git bash here</p></li><li><p>初始化hexo 博客</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo init</span><br></pre></td></tr></table></figure></li><li><p>安装deploy插件</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo-deployer-git --save</span><br></pre></td></tr></table></figure></li><li><p>配置_config.yml文件</p><p>用Notepad++打开</p><p>最后面配置为</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">deploy:</span><br><span class="line">  type: git</span><br><span class="line">  repo: [远程库地址]</span><br><span class="line">  branch: main</span><br></pre></td></tr></table></figure></li><li><p>签名设置</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">git config user.name [name]</span><br><span class="line">git config user.email [email]</span><br><span class="line"><span class="meta">#</span><span class="bash">项目（仓库）级别签名，仅对该项目有效 信息保存在 ./.git/config</span></span><br><span class="line">git config --global user.name [name]</span><br><span class="line">git config --global user.email [email]</span><br><span class="line"><span class="meta">#</span><span class="bash">系统级别签名，对当前操作系统的用户有效 ~/.gitconfig 文件</span></span><br></pre></td></tr></table></figure><p>可以直接找到.deploy_git&#x2F;.git&#x2F;config 在文件中加入</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[user]</span><br><span class="line">name = [name]</span><br><span class="line">eamil = [eamil]</span><br></pre></td></tr></table></figure><p>6.生成页面上传</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">hexo c #清理缓存</span><br><span class="line">hexo g #生成页面</span><br><span class="line">hexo s #生成静态页面</span><br><span class="line"><span class="meta">#</span><span class="bash"> Ctrl+c 退出</span></span><br><span class="line">hexo d #上传github</span><br></pre></td></tr></table></figure></li></ol><p>第一次hexo d要登录github 第一个输入name 第二个输入令牌</p><h2 id="利用gtihub备份博客"><a href="#利用gtihub备份博客" class="headerlink" title="利用gtihub备份博客"></a>利用gtihub备份博客</h2><ul><li>上传</li></ul><ol><li><p>创建一个新的远程github仓库</p></li><li><p>.gitignore文件可以是一些没有必要的文件备份到仓库</p></li><li><p>根据提示将博客文件夹push到远程库</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">git add .</span><br><span class="line">git commit -m &quot; &quot;</span><br><span class="line">git remote [别名] [远程库地址]</span><br><span class="line">git push [别名] [分支]</span><br></pre></td></tr></table></figure></li></ol><ul><li>克隆</li></ul><ol><li><p>在要下载到的地址 git bash here</p></li><li><p>输入命令</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git clone [远程库地址]</span><br></pre></td></tr></table></figure></li><li><p>打开文件夹安装依赖</p></li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install</span><br></pre></td></tr></table></figure><p>在初始化hexo 的时候自动安装了依赖</p><p>而上传的时候没有上传依赖</p><p>所以就clone下来就要安装依赖</p><ol start="4"><li>和正常一样使用</li></ol>]]></content>
      
      
      <categories>
          
          <category> 教程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 教程 </tag>
            
            <tag> github </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
