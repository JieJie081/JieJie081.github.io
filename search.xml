<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>关于51单片机的内存</title>
      <link href="/p/9c9642.html"/>
      <url>/p/9c9642.html</url>
      
        <content type="html"><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="抱歉，这个密码看着不太对，请再试试。" data-whm="抱歉，这个文章不能被纠正，不过您还是能看看解密后的内容。">  <script id="hbeData" type="hbeData" data-hmacdigest="a10432320037583cd13e6f759ca64cbf1f2678b416d03a76f561b97ffb08cb5d"></script>  <div class="hbe hbe-content">    <div class="hbe hbe-input hbe-input-default">      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">        <span class="hbe hbe-input-label-content hbe-input-label-content-default">您好，这里需要密码。</span>      </label>    </div>  </div></div><script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
      
      
      <categories>
          
          <category> 51单片机 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 51单片机 </tag>
            
            <tag> Keil </tag>
            
            <tag> STC </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>51单片机-DS1302实时时钟</title>
      <link href="/p/9d7d1482.html"/>
      <url>/p/9d7d1482.html</url>
      
        <content type="html"><![CDATA[<h2 id="DS1302实时时钟"><a href="#DS1302实时时钟" class="headerlink" title="DS1302实时时钟"></a>DS1302实时时钟</h2><h3 id="DS1302介绍"><a href="#DS1302介绍" class="headerlink" title="DS1302介绍"></a>DS1302介绍</h3><ul><li><p>DS1302是由美国DALLAS公司推出的具有涓细电流充电能力的低功耗实时时钟芯片。它可以对年、月、日、周、时、分、秒进行计时，且具有闰年补偿等多种功能</p></li><li><p>RTC(Real Time Clock)：实时时钟，是一种集成电路，通常称为时钟芯片</p></li><li><p>其他实时时钟芯片还有DS12C877 （自带晶振、锂电池）   DS3231（精度高、自带晶振）</p></li></ul><p><img src="https://cdn.jsdelivr.net/gh/jiejie081/pic/img/image-20220228145017581.png" alt="DS1302芯片"></p><h3 id="引脚定义与应用电路"><a href="#引脚定义与应用电路" class="headerlink" title="引脚定义与应用电路"></a>引脚定义与应用电路</h3><p><img src="https://cdn.jsdelivr.net/gh/jiejie081/pic/img/image-20220228145525315.png" alt="DS1302引脚定义与应用电路"></p><table><thead><tr><th align="center"><strong>引脚名</strong></th><th align="center"><strong>作用</strong></th><th align="center"><strong>引脚名</strong></th><th align="center"><strong>作用</strong></th></tr></thead><tbody><tr><td align="center">VCC2</td><td align="center">主电源</td><td align="center">CE</td><td align="center">芯片使能</td></tr><tr><td align="center">VCC1</td><td align="center">备用电池</td><td align="center">IO</td><td align="center">数据输入&#x2F;输出</td></tr><tr><td align="center">GND</td><td align="center">电源地</td><td align="center">SCLK</td><td align="center">串行时钟</td></tr><tr><td align="center">X1、X2</td><td align="center">32.768KHz晶振</td><td align="center"></td><td align="center"></td></tr></tbody></table><h3 id="内部框图"><a href="#内部框图" class="headerlink" title="内部框图"></a>内部框图</h3><p><img src="https://cdn.jsdelivr.net/gh/jiejie081/pic/img/image-20220228150036917.png" alt="DS1302内部框图"></p><h3 id="寄存器定义"><a href="#寄存器定义" class="headerlink" title="寄存器定义"></a>寄存器定义</h3><p><img src="https://cdn.jsdelivr.net/gh/jiejie081/pic/img/image-20220228150336570.png" alt="DS1302寄存器定义"></p><ul><li>WP：WriteProtect 写入保护，若这一位寄存器置1，则开启写保护，无法写入</li><li>TCS: 控制涓流充电、</li></ul><p><img src="https://cdn.jsdelivr.net/gh/jiejie081/pic/img/image-20220228151030546.png" alt="image-20220228151030546"></p><ul><li>用于完成读写（在哪读，在哪写）</li><li>第六位 控制RAM或者CK寄存器 （CK上面一横表示低电平有效）所以这一位置1控制RAM寄存器 置0控制CK寄存器</li><li>第五位到第第一位： 寄存器地址</li><li>第零位： 写入保护（低电平有效）所以0是写 1是读</li></ul><h3 id="时序定义"><a href="#时序定义" class="headerlink" title="时序定义"></a>时序定义</h3><p><img src="https://cdn.jsdelivr.net/gh/jiejie081/pic/img/image-20220228153348284.png" alt="DS1302时序定义"></p><p>单字节写：</p><ol><li><p>CE置高电平</p></li><li><p>I&#x2F;O口给数据</p></li><li><p>SCLK时钟给上升沿</p><p>数据写入单片机</p></li><li><p>SLCK时钟给下降沿</p></li><li><p>重复第2.3.4步到数据写完</p></li><li><p>CE置低电平</p></li></ol><p>单字符读：</p><ol><li><p>CE置高电平</p></li><li><p>I&#x2F;O口给数据（命令字）</p></li><li><p>SCLK时钟给上升沿</p><p>数据写入单片机</p></li><li><p>SLCK时钟给下降沿</p></li><li><p>重复第2.3.4步到命令字符写完</p></li><li><p>单片机释放I&#x2F;O口，有DS1302控制I&#x2F;O口输出</p></li><li><p>SLCK时钟给下降沿</p></li><li><p>I&#x2F;O口输出一位数据</p></li><li><p>SLCK时钟给上升沿</p></li><li><p>重复7.8.9步骤到数据全部输出</p></li><li><p>CE置低电平</p></li></ol><h3 id="DS1302在开发板中的连接"><a href="#DS1302在开发板中的连接" class="headerlink" title="DS1302在开发板中的连接"></a>DS1302在开发板中的连接</h3><p><img src="https://cdn.jsdelivr.net/gh/jiejie081/pic/img/image-20220228155059705.png" alt="DS1302在开发板中的连接"></p><h3 id="BCD码"><a href="#BCD码" class="headerlink" title="BCD码"></a>BCD码</h3><ul><li><p>BCD码（Binary Coded Decimal‎），用4位二进制数来表示1位十进制数</p></li><li><p>二进制BIn   十进制Dec   十六进制 Hex    八进制Oct  </p></li><li><p>例：0001 0011表示13，1000 0101表示85，0001 1010不合法</p></li><li><p>BCD码：二进制低四位表示十进制个位     二进制高四位表示是十进制十位</p></li><li><p>在十六进制中的体现：0x13表示13，0x85表示85，0x1A不合法</p></li><li><p>BCD码转十进制：<strong>DEC&#x3D;BCD&#x2F;16*10+BCD%16; （2位BCD）</strong></p></li><li><p>十进制转BCD码：<strong>BCD&#x3D;DEC&#x2F;10*16+DEC%10; （2位BCD）</strong></p></li></ul>]]></content>
      
      
      <categories>
          
          <category> DS1302实时时钟 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 51单片机 </tag>
            
            <tag> Keil </tag>
            
            <tag> STC </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>51单片机-LED点阵屏</title>
      <link href="/p/f040d0e9.html"/>
      <url>/p/f040d0e9.html</url>
      
        <content type="html"><![CDATA[<h2 id="LED点阵屏"><a href="#LED点阵屏" class="headerlink" title="LED点阵屏"></a>LED点阵屏</h2><h3 id="LED点阵屏介绍"><a href="#LED点阵屏介绍" class="headerlink" title="LED点阵屏介绍"></a>LED点阵屏介绍</h3><ul><li><p>LED点阵屏由若干个独立的LED组成，LED以矩阵的形式排列，以灯珠亮灭来显示文字、图片、视频等。LED点阵屏广泛应用于各种公共场合，如汽车报站器、广告屏以及公告牌等</p></li><li><p>LED点阵屏分类</p><p>按颜色：单色、双色、全彩</p><p>按像素：8×8、16×16等（大规模的LED点阵通常由很多个小点阵拼接而成）</p></li></ul><h3 id="显示原理"><a href="#显示原理" class="headerlink" title="显示原理"></a>显示原理</h3><ul><li><p>LED点阵屏的结构类似于数码管，只不过是数码管把每一列的像素以“8”字型排列而已</p></li><li><p>LED点阵屏与数码管一样，有共阴和共阳两种接法，不同的接法对应的电路结构不同</p></li><li><p>LED点阵屏需要进行逐行或逐列扫描，才能使所有LED同时显示</p></li></ul><h3 id="LED点阵屏的连接"><a href="#LED点阵屏的连接" class="headerlink" title="LED点阵屏的连接"></a>LED点阵屏的连接</h3><p><img src="https://cdn.jsdelivr.net/gh/jiejie081/pic/img/image-20220213105907909.png" alt="LED点阵屏的连接"></p><p><img src="https://cdn.jsdelivr.net/gh/jiejie081/pic/img/image-20220213105932002.png" alt="与74HC595连接"></p><h3 id="C51的sfr、sbit"><a href="#C51的sfr、sbit" class="headerlink" title="C51的sfr、sbit"></a>C51的sfr、sbit</h3><ul><li><p>sfr（special function register）：特殊功能寄存器声明</p><p>例：sfr P0 &#x3D; 0x80;</p><p>声明P0口寄存器，物理地址为0x80</p></li><li><p>sbit（special bit）：特殊位声明</p><p>例：sbit P0_1 &#x3D; 0x81;  或  sbit P0_1 &#x3D; P0^1;</p><p>声明P0寄存器的第1位</p></li><li><p>可位寻址&#x2F;不可位寻址：在单片机系统中，操作任意寄存器或者某一位的数据时，必须给出其物理地址，又因为一个寄存器里有8位，所以位的数量是寄存器数量的8倍，单片机无法对所有位进行编码，故每8个寄存器中，只有一个是可以位寻址的。对不可位寻址的寄存器，若要只操作其中一位而不影响其它位时，可用“&amp;&#x3D;”、“|&#x3D;”、“^&#x3D;”的方法进行位操作</p></li></ul>]]></content>
      
      
      <categories>
          
          <category> 51单片机 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 51单片机 </tag>
            
            <tag> LED点阵屏 </tag>
            
            <tag> 74HC595 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>51单片机-串口通讯</title>
      <link href="/p/20016b07.html"/>
      <url>/p/20016b07.html</url>
      
        <content type="html"><![CDATA[<h2 id="串口通讯"><a href="#串口通讯" class="headerlink" title="串口通讯"></a>串口通讯</h2><h3 id="串口介绍"><a href="#串口介绍" class="headerlink" title="串口介绍"></a>串口介绍</h3><ul><li><p>串口是一种应用十分广泛的通讯接口，串口成本低、容易使用、通信线路简单，可实现两个设备的互相通信。</p></li><li><p>单片机的串口可以使单片机与单片机、单片机与电脑、单片机与各式各样的模块互相通信，极大的扩展了单片机的应用范围，增强了单片机系统的硬件实力。<strong>注意：不同设备的电平规范不同，要注意转换，否则会损坏设备</strong></p></li><li><p>51单片机内部自带UART（Universal Asynchronous Receiver Transmitter，通用异步收发器），可实现单片机的串口通信。</p></li></ul><h3 id="硬件电路"><a href="#硬件电路" class="headerlink" title="硬件电路"></a>硬件电路</h3><ul><li><p>简单双向串口通信有两根通信线（发送端TXD和接收端RXD）</p></li><li><p>TXD与RXD要交叉连接</p></li><li><p>当只需单向的数据传输时，可以直接一根通信线</p></li><li><p>当电平标准不一致时，需要加电平转换芯片</p></li></ul><p><img src="https://cdn.jsdelivr.net/gh/jiejie081/pic/img/image-20220209200625310.png" alt="简单电路"></p><h3 id="电平标准"><a href="#电平标准" class="headerlink" title="电平标准"></a>电平标准</h3><ul><li><p>电平标准是数据1和数据0的表达方式，是传输线缆中人为规定的电压与数据的对应关系，串口常用的电平标准有如下三种：</p></li><li><p>TTL电平：+5V表示1，0V表示0</p></li><li><p>RS232电平：-3 ~ -15V表示1，+3~+15V表示0</p></li><li><p>RS485电平：两线压差+2 ~ +6V表示1，-2~-6V表示0（差分信号）</p></li></ul><h3 id="常见通讯接口比较"><a href="#常见通讯接口比较" class="headerlink" title="常见通讯接口比较"></a>常见通讯接口比较</h3><table><thead><tr><th><strong>名称</strong></th><th><strong>引脚定义</strong></th><th><strong>通信方式</strong></th><th><strong>特点</strong></th></tr></thead><tbody><tr><td>UART</td><td>TXD、RXD</td><td>全双工、异步</td><td>点对点通信</td></tr><tr><td>I²C</td><td>SCL、SDA</td><td>半双工、同步</td><td>可挂载多个设备</td></tr><tr><td>SPI</td><td>SCLK、MOSI、MISO、CS</td><td>全双工、同步</td><td>可挂载多个设备</td></tr><tr><td>1-Wire</td><td>DQ</td><td>半双工、异步</td><td>可挂载多个设备</td></tr></tbody></table><ul><li>此外还有：CAN、USB等</li></ul><blockquote><p>全双工：通信双方可以在同一时刻互相传输数据</p><p>半双工：通信双方可以互相传输数据，但必须分时复用一根数据线</p><p>单工：通信只能有一方发送到另一方，不能反向传输</p><p>异步：通信双方各自约定通信速率</p><p>同步：通信双方靠一根时钟线来约定通信速率</p><p>总线：连接各个设备的数据传输线路（类似于一条马路，把路边各住户连接起来，使住户可以相互交流）</p></blockquote><h3 id="51单片机的UART"><a href="#51单片机的UART" class="headerlink" title="51单片机的UART"></a>51单片机的UART</h3><ul><li><p>STC89C52有1个UART</p></li><li><p>STC89C52的UART有四种工作模式：</p><p>模式0：同步移位寄存器</p><p>模式1：8位UART，波特率可变（常用）</p><p>模式2：9位UART，波特率固定</p><p>模式3：9位UART，波特率可变</p></li></ul><p><img src="https://cdn.jsdelivr.net/gh/jiejie081/pic/img/image-20220209200512692.png" alt="51单片机UART"></p><h3 id="串口参数时序图"><a href="#串口参数时序图" class="headerlink" title="串口参数时序图"></a>串口参数时序图</h3><ul><li><p>波特率：串口通信的速率（发送和接收各数据位的间隔时间）</p></li><li><p>检验位：用于数据验证</p></li><li><p>停止位：用于数据帧间隔</p></li></ul><p><img src="https://cdn.jsdelivr.net/gh/jiejie081/pic/img/image-20220209200752383.png" alt="串口参数时序图"></p><h3 id="串口模式图"><a href="#串口模式图" class="headerlink" title="串口模式图"></a>串口模式图</h3><p><img src="https://cdn.jsdelivr.net/gh/jiejie081/pic/img/image-20220209200828681.png" alt="串口模式图"></p><ul><li>SBUF：串口数据缓存寄存器，物理上是两个独立的寄存器，但占用相同的地址。写操作时，写入的是发送寄存器，读操作时，读出的是接收寄存器</li></ul><h3 id="串口和中断系统"><a href="#串口和中断系统" class="headerlink" title="串口和中断系统"></a>串口和中断系统</h3><p><img src="https://cdn.jsdelivr.net/gh/jiejie081/pic/img/image-20220209201426855.png" alt="串口和中断系统"></p><h3 id="串口相关寄存器"><a href="#串口相关寄存器" class="headerlink" title="串口相关寄存器"></a>串口相关寄存器</h3><p><img src="https://cdn.jsdelivr.net/gh/jiejie081/pic/img/image-20220209201518988.png" alt="串口相关寄存器"></p><h3 id="数据显示模式"><a href="#数据显示模式" class="headerlink" title="数据显示模式"></a>数据显示模式</h3><ul><li><p>HEX模式&#x2F;十六进制模式&#x2F;二进制模式：以原始数据的形式显示</p></li><li><p>文本模式&#x2F;字符模式：以原始数据编码后的形式显示   ASCII表</p></li></ul>]]></content>
      
      
      <categories>
          
          <category> 串口通讯 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 51单片机 </tag>
            
            <tag> 串口通讯 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>51单片机-矩阵键盘</title>
      <link href="/p/3a3a1fde.html"/>
      <url>/p/3a3a1fde.html</url>
      
        <content type="html"><![CDATA[<h2 id="矩阵键盘"><a href="#矩阵键盘" class="headerlink" title="矩阵键盘"></a>矩阵键盘</h2><h3 id="矩阵键盘的介绍"><a href="#矩阵键盘的介绍" class="headerlink" title="矩阵键盘的介绍"></a>矩阵键盘的介绍</h3><ul><li><p>在键盘中按键数量较多时，为了减少I&#x2F;O口的占用，通常将按键排列成矩阵形式</p></li><li><p>采用逐行或逐列的“扫描”，就可以读出任何位置按键的状态</p></li></ul><p><img src="C:\Users\zhanghuanjie\AppData\Roaming\Typora\typora-user-images\image-20220207152515265.png" alt="矩阵键盘在开发板中的连接"></p><h3 id="扫描的概念"><a href="#扫描的概念" class="headerlink" title="扫描的概念"></a>扫描的概念</h3><ul><li><p>数码管扫描（输出扫描）</p><p>原理：显示第1位→显示第2位→显示第3位→……，然后快速循环这个过程，最终实现所有数码管同时显示的效果</p></li><li><p>矩阵键盘扫描（输入扫描）</p><p>原理：读取第1行(列)→读取第2行(列) →读取第3行(列) → ……，然后快速循环这个过程，最终实现所有按键同时检测的效果</p></li><li><p>以上两种扫描方式的共性：节省I&#x2F;O口</p></li></ul><h3 id="矩阵键盘密码锁代码"><a href="#矩阵键盘密码锁代码" class="headerlink" title="矩阵键盘密码锁代码"></a>矩阵键盘密码锁代码</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;REGX52.H&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&quot;LCD1602.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&quot;MatrixKey.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> LEN 7   <span class="comment">//LEN 为密码位数加一</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">unsigned</span> <span class="keyword">char</span> pass[LEN]=<span class="string">&quot;123ABC&quot;</span>; <span class="comment">//预设密码</span></span><br><span class="line"><span class="keyword">unsigned</span> <span class="keyword">char</span> KeyNum;</span><br><span class="line"><span class="keyword">unsigned</span> <span class="keyword">char</span> key[LEN]=<span class="string">&quot;      &quot;</span>;</span><br><span class="line"><span class="keyword">unsigned</span> <span class="keyword">int</span>  a=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">unsigned</span> <span class="keyword">int</span>  i=<span class="number">0</span>;  <span class="comment">//i记录输入次数</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">LCD_Init();</span><br><span class="line">LCD_ShowString(<span class="number">1</span>,<span class="number">1</span>,<span class="string">&quot;PassWord:&quot;</span>);</span><br><span class="line"><span class="keyword">while</span>(<span class="number">1</span>)</span><br><span class="line">&#123;</span><br><span class="line">KeyNum=MatrixKey();</span><br><span class="line"><span class="keyword">if</span>(KeyNum!=<span class="number">0</span>&amp;&amp;KeyNum!=<span class="string">&#x27;*&#x27;</span>&amp;&amp;KeyNum!=<span class="string">&#x27;#&#x27;</span>&amp;&amp;a&lt;<span class="number">6</span>&amp;&amp;i&lt;<span class="number">6</span>)</span><br><span class="line">&#123;</span><br><span class="line">&#123;key[a]=KeyNum;</span><br><span class="line">LCD_ShowString(<span class="number">2</span>,<span class="number">1</span>,key);</span><br><span class="line"></span><br><span class="line">&#125;a+=<span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(KeyNum==<span class="string">&#x27;#&#x27;</span>&amp;&amp;i&lt;<span class="number">6</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(<span class="built_in">strcmp</span>(pass,key)==<span class="number">0</span>)</span><br><span class="line">&#123;LCD_ShowString(<span class="number">1</span>,<span class="number">12</span>,<span class="string">&quot;OK&quot;</span>);<span class="keyword">for</span>(a=<span class="number">0</span>;a&lt;<span class="number">6</span>;a++)key[a]=<span class="string">&#x27; &#x27;</span>;LCD_ShowString(<span class="number">2</span>,<span class="number">1</span>,key);a=<span class="number">0</span>;LCD_ShowString(<span class="number">2</span>,<span class="number">1</span>,<span class="string">&quot;Welcome!&quot;</span>);i=<span class="number">7</span>;&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;LCD_ShowString(<span class="number">1</span>,<span class="number">12</span>,<span class="string">&quot;ERR&quot;</span>);i+=<span class="number">1</span>;<span class="keyword">for</span>(a=<span class="number">0</span>;a&lt;<span class="number">6</span>;a++)key[a]=<span class="string">&#x27; &#x27;</span>;LCD_ShowString(<span class="number">2</span>,<span class="number">1</span>,key);a=<span class="number">0</span>;&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(KeyNum==<span class="string">&#x27;*&#x27;</span>&amp;&amp;i&lt;<span class="number">6</span>)</span><br><span class="line">&#123;</span><br><span class="line">a-=<span class="number">1</span>;</span><br><span class="line">key[a]=<span class="string">&#x27; &#x27;</span>;</span><br><span class="line">LCD_ShowString(<span class="number">2</span>,<span class="number">1</span>,key);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(i==<span class="number">6</span>)</span><br><span class="line">LCD_ShowString(<span class="number">2</span>,<span class="number">1</span>,<span class="string">&quot;LOCK  &quot;</span>);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 51单片机 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 51单片机 </tag>
            
            <tag> 矩阵键盘 </tag>
            
            <tag> 密码锁 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>51单片机-定时器和中断系统</title>
      <link href="/p/a4705c27.html"/>
      <url>/p/a4705c27.html</url>
      
        <content type="html"><![CDATA[<h2 id="定时器"><a href="#定时器" class="headerlink" title="定时器"></a>定时器</h2><h3 id="定时器介绍"><a href="#定时器介绍" class="headerlink" title="定时器介绍"></a>定时器介绍</h3><ul><li><p>定时器介绍：51单片机的定时器属于单片机的内部资源，其电路的连接和运转均在单片机内部完成</p></li><li><p>定时器作用：</p></li></ul><p>（1）用于计时系统，可实现软件计时，或者使程序每隔一固定时间完成一项操作</p><p>（2）替代长时间的Delay，提高CPU的运行效率和处理速度</p><p>（…）</p><h3 id="STC89C52定时器资源"><a href="#STC89C52定时器资源" class="headerlink" title="STC89C52定时器资源"></a>STC89C52定时器资源</h3><ul><li><p>定时器个数：3个（T0、T1、T2），T0和T1与传统的51单片机兼容，T2是此型号单片机增加的资源</p></li><li><p>注意：定时器的资源和单片机的型号是关联在一起的，不同的型号可能会有不同的定时器个数和操作方式，但一般来说，T0和T1的操作方式是所有51单片机所共有的</p></li></ul><h3 id="定时器框图"><a href="#定时器框图" class="headerlink" title="定时器框图"></a>定时器框图</h3><ul><li>定时器在单片机内部就像一个小闹钟一样，根据时钟的输出信号，每隔“一秒”，计数单元的数值就增加一，当计数单元数值增加到“设定的闹钟提醒时间”时，计数单元就会向中断系统发出中断申请，产生“响铃提醒”，使程序跳转到中断服务函数中执行</li></ul><p><img src="https://cdn.jsdelivr.net/gh/jiejie081/pic/img/image-20220208152101573.png" alt="定时器框图"></p><h3 id="定时器工作模式"><a href="#定时器工作模式" class="headerlink" title="定时器工作模式"></a>定时器工作模式</h3><ul><li><p>STC89C52的T0和T1均有四种工作模式：</p><p>模式0：13位定时器&#x2F;计数器</p><p>模式1：16位定时器&#x2F;计数器（常用）</p><p>模式2：8位自动重装模式</p><p>模式3：两个8位计数器</p></li><li><p>工作模式1框图：</p></li></ul><p><img src="C:\Users\zhanghuanjie\AppData\Roaming\Typora\typora-user-images\image-20220208153446579.png" alt="工作模式一框图"></p><ul><li>SYSclk：系统时钟，即晶振周期。</li></ul><h3 id="中断系统"><a href="#中断系统" class="headerlink" title="中断系统"></a>中断系统</h3><p><img src="https://cdn.jsdelivr.net/gh/jiejie081/pic/img/image-20220208153809028.png" alt="中断系统"></p><h3 id="中断系统流程"><a href="#中断系统流程" class="headerlink" title="中断系统流程"></a>中断系统流程</h3><p><img src="https://cdn.jsdelivr.net/gh/jiejie081/pic/img/image-20220208153934799.png" alt="中断系统流程"></p><h3 id="STC89C52中断资源"><a href="#STC89C52中断资源" class="headerlink" title="STC89C52中断资源"></a>STC89C52中断资源</h3><ul><li><p>中断源个数：8个（外部中断0、定时器0中断、外部中断1、定时器1中断、串口中断、定时器2中断、外部中断2、外部中断3）</p></li><li><p>中断优先级个数：4个 </p></li><li><p>中断号：</p></li></ul><p><img src="https://cdn.jsdelivr.net/gh/jiejie081/pic/img/image-20220208154415829.png" alt="中断号"></p><ul><li>注意：中断的资源和单片机的型号是关联在一起的，不同的型号可能会有不同的中断资源，例如中断源个数不同、中断优先级个数不同等等</li></ul><h3 id="定时器和中断系统"><a href="#定时器和中断系统" class="headerlink" title="定时器和中断系统"></a>定时器和中断系统</h3><p><img src="https://cdn.jsdelivr.net/gh/jiejie081/pic/img/image-20220208154601424.png" alt="传统51单片机中断系统"></p><p><img src="C:\Users\zhanghuanjie\AppData\Roaming\Typora\typora-user-images\image-20220208155129786.png" alt="STC89C52中断结构"></p><h3 id="定时器、中断系统相关寄存器"><a href="#定时器、中断系统相关寄存器" class="headerlink" title="定时器、中断系统相关寄存器"></a>定时器、中断系统相关寄存器</h3><ul><li><p><strong>主要参考数据手册</strong></p></li><li><p>寄存器是连接软硬件的媒介</p></li><li><p>在单片机中寄存器就是一段特殊的RAM存储器，一方面，寄存器可以存储和读取数据，另一方面，每一个寄存器背后都连接了一根导线，控制着电路的连接方式</p></li><li><p>寄存器相当于一个复杂机器的“操作按钮”</p></li></ul><p><img src="https://cdn.jsdelivr.net/gh/jiejie081/pic/img/image-20220208155258225.png" alt="定时器相关寄存器"></p><p><img src="https://cdn.jsdelivr.net/gh/jiejie081/pic/img/image-20220208155320816.png" alt="中断相关寄存器"></p>]]></content>
      
      
      <categories>
          
          <category> 51单片机 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 51单片机 </tag>
            
            <tag> 定时器 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>51单片机-模块化编程</title>
      <link href="/p/378f120c.html"/>
      <url>/p/378f120c.html</url>
      
        <content type="html"><![CDATA[<h2 id="模块化及调试工具"><a href="#模块化及调试工具" class="headerlink" title="模块化及调试工具"></a>模块化及调试工具</h2><h3 id="模块化编程"><a href="#模块化编程" class="headerlink" title="模块化编程"></a>模块化编程</h3><ul><li><p>传统方式编程：所有的函数均放在main.c里，若使用的模块比较多，则一个文件内会有很多的代码，不利于代码的组织和管理，而且很影响编程者的思路</p></li><li><p>模块化编程：把各个模块的代码放在不同的.c文件里，在.h文件里提供外部可调用函数的声明，其它.c文件想使用其中的代码时，只需要#include “XXX.h”文件即可。使用模块化编程可极大的提高代码的可阅读性、可维护性、可移植性等</p></li></ul><p><img src="C:\Users\zhanghuanjie\AppData\Roaming\Typora\typora-user-images\image-20220206175237766.png" alt="模块化编程框图"></p><p><strong>模块化编程注意事项</strong></p><ul><li><p>.c文件：函数、变量的定义</p></li><li><p>.h文件：可被外部调用的函数、变量的声明</p></li><li><p>任何自定义的变量、函数在调用前必须有定义或声明（同一个.c）</p></li><li><p>使用到的自定义函数的.c文件必须添加到工程参与编译</p></li><li><p>使用到的.h文件必须要放在编译器可寻找到的地方（工程文件夹根目录、安装目录、自定义）</p></li></ul><p><strong>C语言预编译</strong></p><ul><li>C语言的预编译以#开头，作用是在真正的编译开始之前，对代码 做一些处理（预编译）</li></ul><table><thead><tr><th align="left">预编译</th><th align="left">意义</th></tr></thead><tbody><tr><td align="left"><strong>#include &lt;REGX52.H&gt;</strong></td><td align="left">把 <strong>REGX52.H</strong>文件的内容搬到此处</td></tr><tr><td align="left">#define PI 3.14</td><td align="left">定义PI，将PI替换为3.14</td></tr><tr><td align="left">#define ABC</td><td align="left">定义ABC</td></tr><tr><td align="left">#ifndef <strong>XX_H</strong></td><td align="left">如果没有定义__XX_H__</td></tr><tr><td align="left">#endif</td><td align="left">与#ifndef,#if匹配，组成“括号”</td></tr></tbody></table><ul><li>此外还有#ifdef,#if,#else,#elif,#undef等</li></ul><p><strong>数码管代码模块化</strong></p><p>把delay函数 nixie函数都模块化</p><p>需要在项目中添加delay.h   delay.c    nixie.h   nixie.c  四个文件</p><p>然后main函数就写</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;REGX52.H&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;DELAY.H&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;NIXIE.H&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="keyword">while</span>(<span class="number">1</span>)&#123;</span><br><span class="line">Nixie(<span class="number">1</span>,<span class="number">1</span>);</span><br><span class="line">Nixie(<span class="number">2</span>,<span class="number">2</span>);</span><br><span class="line">Nixie(<span class="number">3</span>,<span class="number">3</span>);</span><br><span class="line">Nixie(<span class="number">4</span>,<span class="number">4</span>);</span><br><span class="line">Nixie(<span class="number">5</span>,<span class="number">8</span>);</span><br><span class="line">Nixie(<span class="number">6</span>,<span class="number">5</span>);</span><br><span class="line">Nixie(<span class="number">7</span>,<span class="number">6</span>);</span><br><span class="line">Nixie(<span class="number">8</span>,<span class="number">7</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="LCD1680调试工具"><a href="#LCD1680调试工具" class="headerlink" title="LCD1680调试工具"></a>LCD1680调试工具</h3><ul><li><p>使用LCD1602液晶屏作为调试窗口，提供类似printf函数的功能，可实时观察单片机内部数据的变换情况，便于调试和演示。</p></li><li><p>这里提供的LCD1602代码属于模块化的代码，使用者只需要知道所提供函数的作用和使用方法就可以很容易的使用LCD1602</p></li></ul><table><thead><tr><th><strong>函数</strong></th><th><strong>作用</strong></th></tr></thead><tbody><tr><td>LCD_Init();</td><td>初始化</td></tr><tr><td>LCD_ShowChar(1,1,’A’);</td><td>显示一个字符</td></tr><tr><td>LCD_ShowString(1,3,”Hello”);</td><td>显示字符串</td></tr><tr><td>LCD_ShowNum(1,9,123,3);</td><td>显示十进制数字</td></tr><tr><td>LCD_ShowSignedNum(1,13,-66,2);</td><td>显示有符号十进制数字</td></tr><tr><td>LCD_ShowHexNum(2,1,0xA8,2);</td><td>显示十六进制数字</td></tr><tr><td>LCD_ShowBinNum(2,4,0xAA,8);</td><td>显示二进制数字</td></tr></tbody></table>]]></content>
      
      
      <categories>
          
          <category> 51单片机 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 51单片机 </tag>
            
            <tag> 模块化编程 </tag>
            
            <tag> LCD1602调试工具 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>51单片机-数码管</title>
      <link href="/p/28ce68d9.html"/>
      <url>/p/28ce68d9.html</url>
      
        <content type="html"><![CDATA[<h2 id="数码管"><a href="#数码管" class="headerlink" title="数码管"></a>数码管</h2><h3 id="数码管的介绍"><a href="#数码管的介绍" class="headerlink" title="数码管的介绍"></a>数码管的介绍</h3><ul><li>LED数码管：数码管是一种简单、廉价的显示器，是由多个发光二极管封装在一起组成“8”字型的器件</li></ul><h3 id="数码管的引脚定义"><a href="#数码管的引脚定义" class="headerlink" title="数码管的引脚定义"></a>数码管的引脚定义</h3><p><img src="https://cdn.jsdelivr.net/gh/jiejie081/pic/img/image-20220204154444377.png" alt="数码管的引脚定义"></p><p><img src="https://cdn.jsdelivr.net/gh/jiejie081/pic/img/image-20220204154550802.png" alt="四位数码管的引脚定义"></p><blockquote><p>由于四位数码管四个数字的段显示是相同的连接在一个引脚上的。一共需要14个引脚。</p><p>我们称12，9，8，6为位选   11、7、4、2、1、10、5、3为段选</p><p>由此我们知道这样是不可以4位同时显示不同的数值的，要想实现这一效果我们用到了数码管扫描</p><p>我们可以使第一位显示一个数字，第二位显示一个数字，然后一直循环，因为我们人眼的视觉暂留，看起来就是同时显示了。</p></blockquote><h3 id="数码管在开发板中的连接"><a href="#数码管在开发板中的连接" class="headerlink" title="数码管在开发板中的连接"></a>数码管在开发板中的连接</h3><p><img src="https://cdn.jsdelivr.net/gh/jiejie081/pic/img/image-20220204155940561.png" alt="数码管在开发板中的连接"></p><blockquote><ul><li><p>74HC138译码器</p><p>作用：译码，用三个引脚控制8个引脚。</p><p>使用：使能端G1接高电平 G2A、G2B接低电平。A、B、C为输入端  输出端为低电平有效，其他为高电平</p><table><thead><tr><th align="center">C</th><th align="center">B</th><th align="center">A</th><th align="center">输出</th></tr></thead><tbody><tr><td align="center">0</td><td align="center">0</td><td align="center">0</td><td align="center">Y0低电压</td></tr><tr><td align="center">0</td><td align="center">0</td><td align="center">1</td><td align="center">Y1</td></tr><tr><td align="center">0</td><td align="center">1</td><td align="center">0</td><td align="center">Y2</td></tr><tr><td align="center">0</td><td align="center">1</td><td align="center">1</td><td align="center">Y3</td></tr><tr><td align="center">1</td><td align="center">0</td><td align="center">0</td><td align="center">Y4</td></tr><tr><td align="center">1</td><td align="center">0</td><td align="center">1</td><td align="center">Y5</td></tr><tr><td align="center">1</td><td align="center">1</td><td align="center">0</td><td align="center">Y6</td></tr><tr><td align="center">1</td><td align="center">1</td><td align="center">1</td><td align="center">Y7</td></tr></tbody></table></li><li><p>74HC245双向缓冲器</p><p>低电平的驱动能力强   高电平的驱动能力弱  </p><p>所以需要用一个缓冲区来加强电压</p><p>使用： OE为使能端 低电平有效 即OE端低电平芯片工作</p><p>​            DIR方向控制 高电平 A到B       低电平  B到A</p><p>​            其他引脚是一一对应的 A0 对 B0  以此类推</p></li></ul></blockquote><h3 id="代码示例"><a href="#代码示例" class="headerlink" title="代码示例"></a>代码示例</h3><h4 id="静态数码管显示"><a href="#静态数码管显示" class="headerlink" title="静态数码管显示"></a>静态数码管显示</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//静态数码管显示 第三位显示6</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;REGX52.H&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">P2_2=<span class="number">1</span>;</span><br><span class="line">P2_3=<span class="number">0</span>;</span><br><span class="line">P2_4=<span class="number">1</span>;</span><br><span class="line">P0=<span class="number">0x7D</span>;</span><br><span class="line">    <span class="keyword">while</span>(<span class="number">1</span>)；</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>优化代码</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//数码管代码模块化</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;REGX52.H&gt;</span></span></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">----------------------------------------------------------------------</span></span><br><span class="line"><span class="comment">名称：    数码管模块化代码</span></span><br><span class="line"><span class="comment">函数名称： Nixie(unsigned char Loaction,Number) Loaction 位选 Number 数字</span></span><br><span class="line"><span class="comment"> 其中Number 10为空 11为点</span></span><br><span class="line"><span class="comment">----------------------------------------------------------------------</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">unsigned</span> <span class="keyword">char</span> NixieTab[]=&#123;<span class="number">0x3F</span>,<span class="number">0x06</span>,<span class="number">0x5B</span>,<span class="number">0x4F</span>,<span class="number">0x66</span>,<span class="number">0x6D</span>,<span class="number">0x7D</span>,<span class="number">0x07</span>,<span class="number">0x7F</span>,<span class="number">0x6F</span>,<span class="number">0x00</span>,<span class="number">0x80</span>&#125;;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Nixie</span><span class="params">(<span class="keyword">unsigned</span> <span class="keyword">char</span> Loaction,Number)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">switch</span>(Loaction)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">case</span> <span class="number">1</span>:P2_4=<span class="number">1</span>;P2_3=<span class="number">1</span>;P2_2=<span class="number">1</span>;<span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="number">2</span>:P2_4=<span class="number">1</span>;P2_3=<span class="number">1</span>;P2_2=<span class="number">0</span>;<span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="number">3</span>:P2_4=<span class="number">1</span>;P2_3=<span class="number">0</span>;P2_2=<span class="number">1</span>;<span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="number">4</span>:P2_4=<span class="number">1</span>;P2_3=<span class="number">0</span>;P2_2=<span class="number">0</span>;<span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="number">5</span>:P2_4=<span class="number">0</span>;P2_3=<span class="number">1</span>;P2_2=<span class="number">1</span>;<span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="number">6</span>:P2_4=<span class="number">0</span>;P2_3=<span class="number">1</span>;P2_2=<span class="number">0</span>;<span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="number">7</span>:P2_4=<span class="number">0</span>;P2_3=<span class="number">0</span>;P2_2=<span class="number">1</span>;<span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="number">8</span>:P2_4=<span class="number">0</span>;P2_3=<span class="number">0</span>;P2_2=<span class="number">0</span>;<span class="keyword">break</span>;</span><br><span class="line"> &#125;</span><br><span class="line">P0=NixieTab[Number];</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">Nixie(<span class="number">3</span>,<span class="number">6</span>);</span><br><span class="line">    <span class="keyword">while</span>(<span class="number">1</span>)；</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="动态数码管显示"><a href="#动态数码管显示" class="headerlink" title="动态数码管显示"></a>动态数码管显示</h3><blockquote><p>数码管显示是  位选 段选 位选 段选 地重复 在重复时因为单片机速度很快 所以会有重影地现象</p><p>消影; 我们延时1微秒 然后空显示就可以了</p><p>不延时的话 亮度会明显变暗</p></blockquote><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;REGX52.H&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;INTRINS.H&gt;</span> </span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Delay</span><span class="params">(<span class="keyword">unsigned</span> <span class="keyword">int</span> ums)</span><span class="comment">//@11.0592MHz</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">while</span>(ums)&#123;</span><br><span class="line">_nop_();</span><br><span class="line">_nop_();</span><br><span class="line">_nop_();</span><br><span class="line">ums--;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">unsigned</span> <span class="keyword">char</span> NixieTab[]=&#123;<span class="number">0x3F</span>,<span class="number">0x06</span>,<span class="number">0x5B</span>,<span class="number">0x4F</span>,<span class="number">0x66</span>,<span class="number">0x6D</span>,<span class="number">0x7D</span>,<span class="number">0x07</span>,<span class="number">0x7F</span>,<span class="number">0x6F</span>,<span class="number">0x00</span>,<span class="number">0x80</span>&#125;;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Nixie</span><span class="params">(<span class="keyword">unsigned</span> <span class="keyword">char</span> Loaction,Number)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">switch</span>(Loaction)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">case</span> <span class="number">1</span>:P2_4=<span class="number">1</span>;P2_3=<span class="number">1</span>;P2_2=<span class="number">1</span>;<span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="number">2</span>:P2_4=<span class="number">1</span>;P2_3=<span class="number">1</span>;P2_2=<span class="number">0</span>;<span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="number">3</span>:P2_4=<span class="number">1</span>;P2_3=<span class="number">0</span>;P2_2=<span class="number">1</span>;<span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="number">4</span>:P2_4=<span class="number">1</span>;P2_3=<span class="number">0</span>;P2_2=<span class="number">0</span>;<span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="number">5</span>:P2_4=<span class="number">0</span>;P2_3=<span class="number">1</span>;P2_2=<span class="number">1</span>;<span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="number">6</span>:P2_4=<span class="number">0</span>;P2_3=<span class="number">1</span>;P2_2=<span class="number">0</span>;<span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="number">7</span>:P2_4=<span class="number">0</span>;P2_3=<span class="number">0</span>;P2_2=<span class="number">1</span>;<span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="number">8</span>:P2_4=<span class="number">0</span>;P2_3=<span class="number">0</span>;P2_2=<span class="number">0</span>;<span class="keyword">break</span>;</span><br><span class="line"> &#125;</span><br><span class="line">P0=NixieTab[Number];</span><br><span class="line">Delay(<span class="number">1</span>);</span><br><span class="line">P0=<span class="number">0x00</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">while</span>(<span class="number">1</span>)&#123;</span><br><span class="line">Nixie(<span class="number">1</span>,<span class="number">1</span>);</span><br><span class="line">Nixie(<span class="number">2</span>,<span class="number">2</span>);</span><br><span class="line">Nixie(<span class="number">3</span>,<span class="number">3</span>);</span><br><span class="line">Nixie(<span class="number">4</span>,<span class="number">4</span>);</span><br><span class="line">Nixie(<span class="number">5</span>,<span class="number">11</span>);</span><br><span class="line">Nixie(<span class="number">6</span>,<span class="number">5</span>);</span><br><span class="line">Nixie(<span class="number">7</span>,<span class="number">6</span>);</span><br><span class="line">Nixie(<span class="number">8</span>,<span class="number">7</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="数码管的驱动方式"><a href="#数码管的驱动方式" class="headerlink" title="数码管的驱动方式"></a>数码管的驱动方式</h3><ul><li><p>单片机直接扫描：硬件设备简单，但会耗费大量的单片机CPU时间</p></li><li><p>专用驱动芯片：内部自带显存、扫描电路，单片机只需告诉它显示什么即可</p></li></ul><p><img src="https://cdn.jsdelivr.net/gh/jiejie081/pic/img/image-20220204182603471.png" alt="TM1640"></p>]]></content>
      
      
      <categories>
          
          <category> 51单片机 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 51单片机 </tag>
            
            <tag> 数码管 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Arduino-舵机</title>
      <link href="/p/2656908c.html"/>
      <url>/p/2656908c.html</url>
      
        <content type="html"><![CDATA[<h2 id="舵机"><a href="#舵机" class="headerlink" title="舵机"></a>舵机</h2><h4 id="舵机的分类及原理"><a href="#舵机的分类及原理" class="headerlink" title="舵机的分类及原理"></a>舵机的分类及原理</h4><p>舵机分为模拟电机、数字舵机、总线舵机。舵机的讲解可以参考<code>工科孙老师的视频</code></p><p><a href="https://www.bilibili.com/video/BV15X4y157ay?share_source=copy_web">https://www.bilibili.com/video/BV15X4y157ay?share_source=copy_web</a></p><p><a href="https://www.bilibili.com/video/BV14K411F7sT?share_source=copy_web">https://www.bilibili.com/video/BV14K411F7sT?share_source=copy_web</a></p><p><strong>舵机的信号线里面传输的是一种特殊的PWM信号，这是一种周期固定为20ms的的方波，高电平的时间在0.5ms-2.5ms之间变化，0.5ms对应的是舵机旋转到0°，2.5ms是舵机旋转到180°。</strong></p><p><img src="https://cdn.jsdelivr.net/gh/jiejie081/pic/img/image-20220123144627428.png" alt="舵机的PWM信号"></p><p><img src="https://cdn.jsdelivr.net/gh/jiejie081/pic/img/image-20220123144721953.png" alt="舵机角度与PWM信号的关系"></p><h4 id="Arduino舵机的使用"><a href="#Arduino舵机的使用" class="headerlink" title="Arduino舵机的使用"></a>Arduino舵机的使用</h4><p>这是官网的参考<a href="https://www.arduino.cc/reference/en/libraries/servo/">伺服 - Arduino 参考</a></p><ol><li>舵机的连接</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">servo.attach(pin) ;</span><br><span class="line">servo.attach(pin, min, max);</span><br><span class="line">//*servo：类型变量Servo</span><br><span class="line">//*pin：舵机连接到的引脚</span><br><span class="line">//*min（可选）：脉冲宽度，以微秒为单位，对应于舵机上的最小（0度）角（默认为544）</span><br><span class="line">//*max（可选）：脉冲宽度，以微秒为单位，对应于舵机上的最大（180度）角度（默认为2400）</span><br><span class="line">//所以默认的舵机0°和180°是由偏差的，所以我们可以servo.attach(pin,500, 2500);来改为标准的0°与180°</span><br></pre></td></tr></table></figure><ol start="2"><li>舵机角度控制</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">servo.write(angle)；</span><br><span class="line">//*servo:舵机类型的变量</span><br><span class="line">//*angle: 写入舵机的值，从0到180</span><br></pre></td></tr></table></figure><h3 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a>注意事项</h3><ol><li><p>虽然是PWM信号但是因为舵机用到的频率很低，servo库是通过软件模拟出来的，不是用的硬件（晶振）模拟，所以不支持PWM的引脚也是可以控制舵机的。但是软件模拟运用到了TIME1计时器，所以9号和10号引脚就没有PWM输出功能了。（Uno中有三个计时器Timer0、Timer1、Timer2，TIME0控制5，6引脚，Timer1控制9，10引脚，Timer2控制3，11引脚） 。所以为了避免影响其他引脚的使用一般使用9，10号引脚连接舵机。</p></li><li><p>舵机有180°的360°，180°不可以转一圈，但是可以转指定角度。360°的可以圈，但是不可以指定角度，只可以控制转速与方向。</p><p>360度舵机是没有反馈的舵机，因此我们只能控制舵机正反转以及速度。同样用Servo.h舵机控制库来控制。</p><p>当我们把程序烧录进去后可以看到360度舵机在周期性正反转，我们通过修改值来改变旋转方向和速度（小于90为顺时针，大于90为逆时针），不同的值代表不同的速度，靠近90速度越小（可能因为舵机不同而不同，多尝试，<code>myservo.write(90);</code>为停止。</p><p>也可以用<code>servo.writeMicroseconds(us)</code>。参考：<a href="https://www.arduino.cc/reference/en/libraries/servo/writemicroseconds/">Servo - writeMicroseconds（）</a></p></li></ol>]]></content>
      
      
      <categories>
          
          <category> Arduino </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Arduino </tag>
            
            <tag> 舵机 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Arduino-蜂鸣器</title>
      <link href="/p/ed6db4dd.html"/>
      <url>/p/ed6db4dd.html</url>
      
        <content type="html"><![CDATA[<h2 id="蜂鸣器"><a href="#蜂鸣器" class="headerlink" title="蜂鸣器"></a>蜂鸣器</h2><p><strong>蜂鸣器分两种一种是<code>有源蜂鸣器</code>,一种是<code>无源蜂鸣器</code>。</strong></p><p><img src="https://cdn.jsdelivr.net/gh/jiejie081/pic/img/image-20220121162009900.png" alt="有源蜂鸣器与无源蜂鸣器"></p><p>区别：</p><ol><li>有源蜂鸣器有震荡源，而无源蜂鸣器没有</li><li>有源蜂鸣器直流就可以驱动，但是只有一个频率，而无源蜂鸣器只要调整脉冲频率就可以发出不同频率的声音</li><li>有源蜂鸣器贵，无源蜂鸣器比有源蜂鸣器便宜</li></ol><h3 id="无源蜂鸣器使用"><a href="#无源蜂鸣器使用" class="headerlink" title="无源蜂鸣器使用"></a>无源蜂鸣器使用</h3><p>Arduino使用无源蜂鸣器可以用analogWrite()输出不同频率的脉冲电流，也可以用tone()来输出不同的脉冲电流。注意：analogWrite()需要支持PWM 的引脚，而tone()没有引脚要求。</p><h4 id="tone"><a href="#tone" class="headerlink" title="tone()"></a>tone()</h4><p>语法： 具体可查官网参考<a href="https://www.arduino.cc/reference/en/language/functions/advanced-io/tone/">tone()</a></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">tone(pin, frequency);<span class="comment">//需要与noTone()结合使用，停止声音</span></span><br><span class="line">tone(pin, frequency, duration);</span><br><span class="line"><span class="comment">//pin：用于生成音调的 Arduino 引脚。</span></span><br><span class="line"><span class="comment">//frequency ：音调的频率（以赫兹为单位）。允许的数据类型：。</span></span><br><span class="line"><span class="comment">//duration ：音调的持续时间（以毫秒为单位）（可选）。允许的数据类型：。frequencyunsigned intdurationunsigned long</span></span><br></pre></td></tr></table></figure><p>来首桥边姑娘吧！</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> a[] = &#123;<span class="number">0</span>, <span class="number">523</span>, <span class="number">587</span>, <span class="number">659</span>, <span class="number">698</span>, <span class="number">784</span>, <span class="number">880</span>, <span class="number">988</span>, <span class="number">440</span>, <span class="number">392</span>&#125;;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">setup</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  pinMode(<span class="number">7</span>, OUTPUT);</span><br><span class="line">  tone(<span class="number">7</span>, a[<span class="number">3</span>], <span class="number">600</span>);</span><br><span class="line">  delay(<span class="number">700</span>);<span class="comment">//这里要延时要不然后直接被后面的覆盖，700&gt;600是为了中间有一点点停顿</span></span><br><span class="line">  tone(<span class="number">7</span>, a[<span class="number">5</span>], <span class="number">600</span>);</span><br><span class="line">  delay(<span class="number">700</span>);</span><br><span class="line">  tone(<span class="number">7</span>, a[<span class="number">5</span>], <span class="number">900</span>);</span><br><span class="line">  delay(<span class="number">1000</span>);</span><br><span class="line">  tone(<span class="number">7</span>, a[<span class="number">1</span>], <span class="number">300</span>);</span><br><span class="line">  delay(<span class="number">400</span>);</span><br><span class="line"></span><br><span class="line">  tone(<span class="number">7</span>, a[<span class="number">5</span>], <span class="number">600</span>);</span><br><span class="line">  delay(<span class="number">700</span>);</span><br><span class="line">  tone(<span class="number">7</span>, a[<span class="number">5</span>], <span class="number">600</span>);</span><br><span class="line">  delay(<span class="number">700</span>);</span><br><span class="line">  tone(<span class="number">7</span>, a[<span class="number">5</span>], <span class="number">900</span>);</span><br><span class="line">  delay(<span class="number">1000</span>);</span><br><span class="line">  tone(<span class="number">7</span>, a[<span class="number">8</span>], <span class="number">300</span>);</span><br><span class="line">  delay(<span class="number">400</span>);</span><br><span class="line"></span><br><span class="line">  tone(<span class="number">7</span>, a[<span class="number">1</span>], <span class="number">600</span>);</span><br><span class="line">  delay(<span class="number">700</span>);</span><br><span class="line">  tone(<span class="number">7</span>, a[<span class="number">8</span>], <span class="number">600</span>);</span><br><span class="line">  delay(<span class="number">700</span>);</span><br><span class="line">  tone(<span class="number">7</span>, a[<span class="number">1</span>], <span class="number">600</span>);</span><br><span class="line">  delay(<span class="number">700</span>);</span><br><span class="line">  tone(<span class="number">7</span>, a[<span class="number">5</span>], <span class="number">600</span>);</span><br><span class="line">  delay(<span class="number">700</span>);</span><br><span class="line"></span><br><span class="line">  tone(<span class="number">7</span>, a[<span class="number">3</span>], <span class="number">1800</span>);</span><br><span class="line">  delay(<span class="number">1900</span>);</span><br><span class="line">  tone(<span class="number">7</span>, a[<span class="number">9</span>], <span class="number">600</span>);</span><br><span class="line">  delay(<span class="number">700</span>);</span><br><span class="line"></span><br><span class="line">  tone(<span class="number">7</span>, a[<span class="number">8</span>], <span class="number">600</span>);</span><br><span class="line">  delay(<span class="number">700</span>);</span><br><span class="line">  tone(<span class="number">7</span>, a[<span class="number">1</span>], <span class="number">300</span>);</span><br><span class="line">  delay(<span class="number">400</span>);</span><br><span class="line">  tone(<span class="number">7</span>, a[<span class="number">1</span>], <span class="number">300</span>);</span><br><span class="line">  delay(<span class="number">400</span>);</span><br><span class="line">  tone(<span class="number">7</span>, a[<span class="number">1</span>], <span class="number">600</span>);</span><br><span class="line">  delay(<span class="number">700</span>);</span><br><span class="line">  tone(<span class="number">7</span>, a[<span class="number">8</span>], <span class="number">600</span>);</span><br><span class="line">  delay(<span class="number">700</span>);</span><br><span class="line"></span><br><span class="line">  tone(<span class="number">7</span>, a[<span class="number">9</span>], <span class="number">600</span>);</span><br><span class="line">  delay(<span class="number">700</span>);</span><br><span class="line">  tone(<span class="number">7</span>, a[<span class="number">1</span>], <span class="number">600</span>);</span><br><span class="line">  delay(<span class="number">700</span>);</span><br><span class="line">  tone(<span class="number">7</span>, a[<span class="number">1</span>], <span class="number">900</span>);</span><br><span class="line">  delay(<span class="number">1000</span>);</span><br><span class="line">  tone(<span class="number">7</span>, a[<span class="number">8</span>], <span class="number">300</span>);</span><br><span class="line">  delay(<span class="number">400</span>);</span><br><span class="line"></span><br><span class="line">  tone(<span class="number">7</span>, a[<span class="number">1</span>], <span class="number">600</span>);</span><br><span class="line">  delay(<span class="number">700</span>);</span><br><span class="line">  tone(<span class="number">7</span>, a[<span class="number">1</span>], <span class="number">300</span>);</span><br><span class="line">  delay(<span class="number">300</span>);</span><br><span class="line">  tone(<span class="number">7</span>, a[<span class="number">8</span>], <span class="number">300</span>);</span><br><span class="line">  delay(<span class="number">400</span>);</span><br><span class="line">  tone(<span class="number">7</span>, a[<span class="number">8</span>], <span class="number">600</span>);</span><br><span class="line">  delay(<span class="number">700</span>);</span><br><span class="line">  tone(<span class="number">7</span>, a[<span class="number">3</span>], <span class="number">600</span>);</span><br><span class="line">  delay(<span class="number">700</span>);</span><br><span class="line"></span><br><span class="line">  tone(<span class="number">7</span>, a[<span class="number">2</span>], <span class="number">2400</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">loop</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>附上音调对应频率</p><p><img src="https://cdn.jsdelivr.net/gh/jiejie081/pic/img/image-20220121163457014.png" alt="音调对应的频率"></p><h4 id="analogWrite"><a href="#analogWrite" class="headerlink" title="analogWrite()"></a>analogWrite()</h4><p>用analogWrite()也可以是无源蜂鸣器发声，但是一般不怎么做。用这种方法音调收到PWM频率以及占空比的影响，较难输出特定的音调。</p><p><img src="https://cdn.jsdelivr.net/gh/jiejie081/pic/img/image-20220121165926834.png" alt="Uno PWM引脚及频率"></p>]]></content>
      
      
      <categories>
          
          <category> Arduino </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Arduino </tag>
            
            <tag> 蜂鸣器 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Arduino-模拟I/O的使用</title>
      <link href="/p/acdc2291.html"/>
      <url>/p/acdc2291.html</url>
      
        <content type="html"><![CDATA[<h2 id="模拟I-x2F-O的使用"><a href="#模拟I-x2F-O的使用" class="headerlink" title="模拟I&#x2F;O的使用"></a>模拟I&#x2F;O的使用</h2><h3 id="呼吸灯（模拟信号输出）"><a href="#呼吸灯（模拟信号输出）" class="headerlink" title="呼吸灯（模拟信号输出）"></a>呼吸灯（模拟信号输出）</h3><h4 id="电路图"><a href="#电路图" class="headerlink" title="电路图"></a>电路图</h4><p><img src="https://cdn.jsdelivr.net/gh/jiejie081/pic/img/image-20220119181626208.png" alt="呼吸灯电路图"></p><h4 id="程序代码"><a href="#程序代码" class="headerlink" title="程序代码"></a>程序代码</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> i;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">setup</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  pinMode(<span class="number">3</span>, OUTPUT);<span class="comment">/*这一句不要也可以，在analogWrite() 和analogRead() 函数内部，已经完成了引脚的初始化，因此不用在Setup() 函数中进行初始化操作。*/</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">loop</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt;= <span class="number">255</span>; i += <span class="number">5</span>)</span><br><span class="line">  &#123; analogWrite(<span class="number">3</span>, i);</span><br><span class="line">    delay(<span class="number">50</span>);<span class="comment">//延时50ms 便于观察</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">for</span> (i = <span class="number">255</span>; i &gt;= <span class="number">0</span>; i -= <span class="number">5</span>)</span><br><span class="line">  &#123; analogWrite(<span class="number">3</span>, i);</span><br><span class="line">    delay(<span class="number">50</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="可调电阻、电位器控制LED亮度"><a href="#可调电阻、电位器控制LED亮度" class="headerlink" title="可调电阻、电位器控制LED亮度"></a>可调电阻、电位器控制LED亮度</h3><p>当然我们可以用初中就学过的直接用电阻大小来控制LED的亮度</p><p><img src="https://cdn.jsdelivr.net/gh/jiejie081/pic/img/image-20220119183631214.png" alt="可调电阻控制LED亮度"></p><p>我们知道Arduino 模拟输入功能有10位精度即 2^10^&#x3D;1024 ，即可以将0～5V的电压信号转换为0～1023的整数形式表示。</p><p>模拟输出功能PWM 的脉冲宽度范围为是0~255</p><p>我们可以用0 ~ 1023来表示0 ~ 255从而用可调电阻来调节LED的亮度</p><h4 id="电路图-1"><a href="#电路图-1" class="headerlink" title="电路图"></a>电路图</h4><p><img src="https://cdn.jsdelivr.net/gh/jiejie081/pic/img/image-20220119223542460.png" alt="可调电阻控制LED亮度"></p><h4 id="程序代码-1"><a href="#程序代码-1" class="headerlink" title="程序代码"></a>程序代码</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">int</span> i;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">setup</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  Serial.begin(<span class="number">9600</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">loop</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  i = analogRead(A0);</span><br><span class="line">  Serial.println(i);</span><br><span class="line">  delay(<span class="number">500</span>);</span><br><span class="line">  i = <span class="built_in">map</span>(i, <span class="number">0</span>, <span class="number">1023</span>, <span class="number">0</span>, <span class="number">255</span>);</span><br><span class="line">  analogWrite(<span class="number">3</span>, i)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>这段代码中我们利用了map()函数，转换两个范围。map()的语法</p><p>map(改变前的变量,改变前初值，改变前末值，改变前终值，改变后的初值，改变后的末值)</p><p>语法详细可参照官网<a href="https://www.arduino.cc/reference/en/language/functions/math/map/">map（） - Arduino Reference</a></p><p>这段代码还用到了串口通信</p><blockquote><p>我们使用USB线连接Arduino Uno与计算机时，Arduino Uno会在计算机上虚拟出一个串口设备，此时两者之间便建立了串口连接。通过此连接，Arduino Uno便可与计算机互传数据。</p><p>使用串口与计算机通信，需要先使用Serial.begin() 初始化Arduino的串口通信功能。</p><p><strong>串口初始化</strong></p><p><code>Serial.begin(speed);</code></p><p>参数speed是指串口通信波特率，这是设定串口通信速率的参数。串口通信的双方必须使用同样的波特率，方能正常进行通信。</p><p><strong>波特率</strong>是一个衡量通信速度的参数。它表示每秒钟传送的bit的个数。例如9600波特表示每秒发送9600bit的数据。通信双方需要使用一致的的波特率才能正常通信。Arduino串口通信通常会使用以下波特率：</p><p>300、600、1200、2400、4800、9600、14400、19200、28800、38400、57600、115200。</p><p>波特率越大，说明串口通信的速率越快。</p><p><strong>串口输出</strong></p><p>串口初始化完成后，我们便可以使用Serial.print() 或Serial.println() 向计算机发送信息了。</p><p><code>Serial.print(val);</code></p><p>参数val是你要输出的数据，各种类型的数据均可。</p><p><code>Serial.println(val)</code></p><p>Serial.println(val) 语句也是使用串口输出数据，不同的是println() 函数会在输出完指定数据后，再输出一组回车换行符。</p><p>开启串口输出后，我们可以通过串口监视器查看到串口传来的信息，也可以向连接的设备发送信息。需要注意的是，在串口监视器右下角，有一个波特率设置下拉框，波特率设置必须和烧入程序中设置的一致，才能正常收发数据。</p><p>全面的串口使用参考社区<a href="https://www.arduino.cn/thread-76060-1-1.html">Arduino串口的使用 </a></p></blockquote></blockquote><h3 id="光敏电阻控制LDE亮灭"><a href="#光敏电阻控制LDE亮灭" class="headerlink" title="光敏电阻控制LDE亮灭"></a>光敏电阻控制LDE亮灭</h3><p><strong>光敏电阻</strong> 一种电阻值随照射光强度增加而下降的电阻。</p><p>光敏电阻的使用方法很简单，将其作为一个电阻接入电路中，然后使用analogRead() 读取电压即可。这里我们将光敏电阻和一个普通电阻串联（如图2-42），根据串联分压的方法来读取到光敏电阻上的电压。</p><p><img src="https://cdn.jsdelivr.net/gh/jiejie081/pic/img/212143ftefuxxovvanrvat.jpg" alt="光敏电阻的使用"></p><h4 id="通过串口监视器读取光敏电路的电压模拟值"><a href="#通过串口监视器读取光敏电路的电压模拟值" class="headerlink" title="通过串口监视器读取光敏电路的电压模拟值"></a>通过串口监视器读取光敏电路的电压模拟值</h4><p>我们可以通过模拟输入口A0读取分压后得到的电压。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">setup</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="comment">// 初始化串口</span></span><br><span class="line">  Serial.begin(<span class="number">9600</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">loop</span><span class="params">()</span> </span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="comment">// 读出当前光线强度，并输出到串口显示</span></span><br><span class="line">  <span class="keyword">int</span> sensorValue = analogRead(A0);</span><br><span class="line">  Serial.println(sensorValue);</span><br><span class="line">  delay(<span class="number">1000</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>如果你需要知道当前环境下光敏电阻的阻值，可以使用以下公式计算：</p><p><img src="https://cdn.jsdelivr.net/gh/jiejie081/pic/img/image-20220120001748148.png"></p><p>由于电源波动或外界干扰等原因，输出的数据可能也会受到一定的影响，例如波动较大等现象，这时你可以通过读取多次传感器数值，求平均数的方法，减小数据的波动。</p></blockquote><h4 id="电路图-2"><a href="#电路图-2" class="headerlink" title="电路图"></a>电路图</h4><p><img src="https://cdn.jsdelivr.net/gh/jiejie081/pic/img/image-20220119233151894.png" alt="光敏电阻控制LED亮灭电路图"></p><h4 id="程序代码-2"><a href="#程序代码-2" class="headerlink" title="程序代码"></a>程序代码</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> i;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">setup</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  pinMode(<span class="number">4</span>, OUTPUT);</span><br><span class="line">  Serial.begin(<span class="number">9600</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">loop</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  i = analogRead(A0);</span><br><span class="line">  Serial.println(i);</span><br><span class="line">  delay(<span class="number">500</span>);</span><br><span class="line">  <span class="keyword">if</span> (i &lt;=<span class="number">400</span>)<span class="comment">//数值要根据环境测量</span></span><br><span class="line">  &#123;</span><br><span class="line">    digitalWrite(<span class="number">4</span>, HIGH);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">else</span></span><br><span class="line">  &#123; digitalWrite(<span class="number">4</span>, LOW);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Arduino </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Arduino </tag>
            
            <tag> 模拟信号 </tag>
            
            <tag> 呼吸灯 </tag>
            
            <tag> 串口通信 </tag>
            
            <tag> 光敏电阻 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Arduino-数字I/O的使用</title>
      <link href="/p/f94946b5.html"/>
      <url>/p/f94946b5.html</url>
      
        <content type="html"><![CDATA[<h2 id="数字I-x2F-O的使用"><a href="#数字I-x2F-O的使用" class="headerlink" title="数字I&#x2F;O的使用"></a>数字I&#x2F;O的使用</h2><h3 id="流水灯"><a href="#流水灯" class="headerlink" title="流水灯"></a>流水灯</h3><h4 id="电路图"><a href="#电路图" class="headerlink" title="电路图"></a>电路图</h4><p><img src="https://cdn.jsdelivr.net/gh/jiejie081/pic/img/image-20220118185017345.png" alt="流水灯电路图"></p><h4 id="程序代码"><a href="#程序代码" class="headerlink" title="程序代码"></a>程序代码</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">setup</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">2</span>; i &lt; <span class="number">7</span>; i++)</span><br><span class="line">    pinMode(i, OUTPUT);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">loop</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123; <span class="comment">// 从引脚2到引脚6，逐个点亮LED，等待1秒再熄灭LED</span></span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">2</span>; i &lt; <span class="number">7</span>; i++)</span><br><span class="line">  &#123;</span><br><span class="line">    digitalWrite(i, HIGH);</span><br><span class="line">    delay(<span class="number">500</span>);</span><br><span class="line">    digitalWrite(i, LOW);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="按键控制LED"><a href="#按键控制LED" class="headerlink" title="按键控制LED"></a>按键控制LED</h3><h4 id="电路图-1"><a href="#电路图-1" class="headerlink" title="电路图"></a>电路图</h4><p><img src="https://cdn.jsdelivr.net/gh/jiejie081/pic/img/image-20220118170409353.png" alt="按键控制LED电路图"></p><p>图中使用到了两个电阻 一个是<code>限流电阻</code> 一个是<code>下拉电阻</code></p><p>【限流电阻】</p><p>一般LED的最大能承受的电流为25mA，如若直接将LED连接到电路中，当其点亮时，如果电流过大，很容易烧毁。这样做可以控制流过LED的电流，防止损坏LED。这个电阻我们称之为限流电阻。</p><p>【下拉电阻】</p><p>在Arduino的4号引脚到GND之前，连接了一个阻值10K的电阻。如果没有该电阻，当未按下按键时，4号引脚会一直处于悬空 状态，此时使用digitalRead() 读取2号引脚状态，会得到一个不稳定的值（可能是高，也可能是低）。添加这个电阻到地就是为了稳定引脚的电平，当引脚悬空时，就会识别为低电平。而这种将某节点通过电阻接地的做法，叫做下拉，这个电阻叫做下拉电阻。</p><blockquote><p><img src="https://cdn.jsdelivr.net/gh/jiejie081/pic/img/image-20220118172159102.png" alt="上拉电阻与下拉电阻"></p><p>为什么需用上拉电阻、下拉电阻？</p><p>如果没有上拉电阻、下拉电阻，电路会受到用电器等的电磁干扰而电压是不稳定的，</p><p>但是有了上拉电阻、下拉电阻就可以使得电路某点的电压稳定。</p></blockquote><h4 id="程序代码-1"><a href="#程序代码-1" class="headerlink" title="程序代码"></a>程序代码</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> i;<span class="comment">//输入数字信号</span></span><br><span class="line"><span class="keyword">int</span> j = <span class="number">1</span>;<span class="comment">//LED状态</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">setup</span><span class="params">()</span> </span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  pinMode(<span class="number">3</span>, OUTPUT);</span><br><span class="line">  pinMode(<span class="number">4</span>, INPUT);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">loop</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"></span><br><span class="line">  i = digitalRead(<span class="number">4</span>);</span><br><span class="line">  <span class="keyword">if</span> (i == <span class="number">1</span>)</span><br><span class="line">  &#123; delay(<span class="number">50</span>);<span class="comment">//消除按键抖动</span></span><br><span class="line">      <span class="keyword">while</span> (i == <span class="number">1</span>)</span><br><span class="line">    &#123;</span><br><span class="line">      i = digitalRead(<span class="number">4</span>);</span><br><span class="line">      delay(<span class="number">50</span>);<span class="comment">//消除按键抖动</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    digitalWrite(<span class="number">3</span>, j);</span><br><span class="line">    j = !j;<span class="comment">//状态取反</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="按键控制LED进阶版"><a href="#按键控制LED进阶版" class="headerlink" title="按键控制LED进阶版"></a>按键控制LED进阶版</h3><p>我们可以使用引脚上的内部上拉电阻，等效于在该引脚到VCC之间连接一个外部上拉电阻。</p><p>我们需要把引脚的配置模式改为<code>INPUT_PULLUP     输入上拉模式</code></p><h4 id="电路图-2"><a href="#电路图-2" class="headerlink" title="电路图"></a>电路图</h4><p><img src="https://cdn.jsdelivr.net/gh/jiejie081/pic/img/image-20220118174836749.png" alt="按键控制LED进阶版"></p><h4 id="程序代码-2"><a href="#程序代码-2" class="headerlink" title="程序代码"></a>程序代码</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> i;<span class="comment">//输入数字信号</span></span><br><span class="line"><span class="keyword">int</span> j = <span class="number">1</span>;<span class="comment">//LED状态</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">setup</span><span class="params">()</span> </span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  pinMode(<span class="number">3</span>, OUTPUT);</span><br><span class="line">  pinMode(<span class="number">4</span>, INPUT_PULLUP);<span class="comment">//输入上拉模式</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">loop</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"></span><br><span class="line">  i = digitalRead(<span class="number">4</span>);</span><br><span class="line">  <span class="keyword">if</span> (i == <span class="number">1</span>)</span><br><span class="line">  &#123; delay(<span class="number">50</span>);<span class="comment">//消除按键抖动</span></span><br><span class="line">      <span class="keyword">while</span> (i == <span class="number">1</span>)</span><br><span class="line">    &#123;</span><br><span class="line">      i = digitalRead(<span class="number">4</span>);</span><br><span class="line">      delay(<span class="number">50</span>);<span class="comment">//消除按键抖动</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    digitalWrite(<span class="number">3</span>, j);</span><br><span class="line">    j = !j;<span class="comment">//状态取反</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Arduino </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Arduino </tag>
            
            <tag> 流水灯 </tag>
            
            <tag> 按键控制LED </tag>
            
            <tag> 上拉电阻 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Arduino01-认识Arduino</title>
      <link href="/p/c408c0c4.html"/>
      <url>/p/c408c0c4.html</url>
      
        <content type="html"><![CDATA[<h2 id="认识Arduino-UNO"><a href="#认识Arduino-UNO" class="headerlink" title="认识Arduino UNO"></a>认识Arduino UNO</h2><p><img src="https://cdn.jsdelivr.net/gh/jiejie081/pic/img/210906pl8cbzbqyeiq8ill.jpg" alt="img"></p><blockquote><p>Arduino 是开源的，板子的数据，PCB原理图都可以上官网查看。</p><p>[Arduino UNO R3](<a href="https://docs.arduino.cc/hardware/uno-rev3">UNO R3 | Arduino Documentation | Arduino Documentation</a>)</p></blockquote><h2 id="数字信号与模拟信号"><a href="#数字信号与模拟信号" class="headerlink" title="数字信号与模拟信号"></a>数字信号与模拟信号</h2><h3 id="数字信号"><a href="#数字信号" class="headerlink" title="数字信号"></a>数字信号</h3><blockquote><p> 数字信号是以0、1表示的电平不连续变化的信号，也就是以二进制的形式表示的信号。 在Arduino中数字信号通过高低电平来表示，高电平则为数字信号1，低电平则为数字信号0 。</p></blockquote><p>Arduino上每一个带有数字编号的引脚，都是数字引脚，包括写有“A”编号的模拟输入引脚。使用这些引脚，可以完成输入输出数字信号的功能。</p><p>在使用输入或输出功能前，你需要先通过pinMode() 函数配置引脚的模式为输入模式或输出模式。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pinMode(pin, mode);</span><br></pre></td></tr></table></figure><p>参数pin为指定配置的引脚编号；参数mode为指定的配置模式。<br>可使用的三种模式:<br><strong>INPUT</strong>                      输入模式<br><strong>OUTPUT</strong>                  输出模式<br><strong>INPUT_PULLUP</strong>     输入上拉模式</p><p>数字引脚 既可以输入数字信号 也可以输出数字信号</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//数字信号输出</span></span><br><span class="line">digitalWrite(pin, value);</span><br><span class="line"><span class="comment">//参数pin为指定输出的引脚编号；参数value为你要指定输出的电平，使用HIGH指定输出高电平，或是使用LOW指定输出低电平。</span></span><br></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//数字信号输入</span></span><br><span class="line"><span class="keyword">int</span> value = digitalRead(pin);</span><br><span class="line"><span class="comment">//参数pin为指定读取状态的引脚编号；返回值value为获取到的信号状态，1为高电平，0为低电平。</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//Arduino UNO会将大于3V的输入电压视为高电平识别，小于1.5V的电压视为低电平识别。所以，即使输入电压不太准确，Arduino UNO也可以正常识别。需要注意的是，超过5V的输入电压可能会损坏Arduino UNO。（不同型号的Arduino有所不同）</span></span><br></pre></td></tr></table></figure><blockquote><p>在Arduino核心库中，OUTPUT被定义等于1，INPUT被定义等于0，HIGH被定义等于1，LOW被定义等于0。</p><p>所以OUTPUT，INPUT，HIGH，LOW都是可以用1或0代替的。</p></blockquote><h3 id="模拟信号"><a href="#模拟信号" class="headerlink" title="模拟信号"></a>模拟信号</h3><blockquote><p>模拟信号是指用连续变化的物理量表示的信息，其信号的幅度，或频率，或相位随时间作连续变化，或在一段连续的时间间隔内，其代表信息的特征量可以在任意瞬间呈现为任意数值的信号。</p><p>生活中，接触到的大多数信号都是模拟信号，如声音、温度的变化等。模拟信号是用连续变化的物理量表示的信息，信号随时间作连续变化。在Arduino UNO上，可以接受0～5V的模拟信号。</p></blockquote><h4 id="模拟信号输出"><a href="#模拟信号输出" class="headerlink" title="模拟信号输出"></a>模拟信号输出</h4><p>Arduino 中使用analogWrite() 函数实现模拟信号输出功能。但该函数并不是输出真正意义上的模拟值，而是以一种特殊的方式来达到输出近似模拟值的效果，这种方式叫做脉冲宽度调制（PWM，Pulse Width Modulation）。<br>在Arduino UNO中，提供PWM功能的引脚为3、5、6、9、10、11。</p><blockquote><p>脉宽调制（PWM）是一种使用数字手段获得模拟结果的技术。数字控制用于产生方波，即在开和关之间切换的信号。这种开关模式可以通过改变信号花费的时间与信号关闭的时间，来模拟电路板全Vcc(5V)和关断(0V)之间的电压。”导通时间”的持续时间称为脉冲宽度。要获得不同的模拟值，请更改或调制该脉冲宽度。例如，如果使用 LED 以足够快的速度重复此开关模式，则结果就好像信号是介于 0 和 Vcc 之间的稳定电压，用于控制 LED 的亮度。</p><p><img src="https://cdn.jsdelivr.net/gh/jiejie081/pic/img/image-20220118153948131.png" alt="image-20220118153948131"></p></blockquote><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//模拟信号输出</span></span><br><span class="line">analogWrite(pin,value)；</span><br><span class="line"><span class="comment">//参数pin是指定要输出PWM波的引脚，参数value指定是PWM的脉冲宽度，范围为0～255。   0表示0V   255表示5V</span></span><br><span class="line"><span class="comment">//在analogWrite() 和analogRead() 函数内部，已经完成了引脚的初始化，因此不用在Setup() 函数中进行初始化操作。    </span></span><br></pre></td></tr></table></figure><h4 id="模拟信号输入"><a href="#模拟信号输入" class="headerlink" title="模拟信号输入"></a>模拟信号输入</h4><p>模拟输入引脚是带有ADC（Analog-to-Digital Converter，模数转换器）功能的引脚。它可以将外部输入的模拟信号转换为芯片运算时可以识别的数字信号，从而实现读入模拟值的功能。</p><p>Arduino 模拟输入功能有10位精度，即可以将0～5V的电压信号转换为0～1023的整数形式表示。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//模拟信号输入</span></span><br><span class="line"><span class="keyword">int</span> value = analogRead(pin)；</span><br><span class="line"><span class="comment">//参数pin是指定要读取模拟值的引脚，被指定的引脚必须是模拟输入引脚。如analogRead(A0)即是读取A0引脚上的模拟值。</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Arduino </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Arduino </tag>
            
            <tag> 数字信号 </tag>
            
            <tag> 模拟信号 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>51单片机-独立按键</title>
      <link href="/p/ea6589cc.html"/>
      <url>/p/ea6589cc.html</url>
      
        <content type="html"><![CDATA[<h2 id="按键介绍"><a href="#按键介绍" class="headerlink" title="按键介绍"></a>按键介绍</h2><ul><li>轻触按键：相当于是一种电子开关，按下时开关接通，松开时开关断开，实现原理是通过轻触按键内部的金属弹片受力弹动来实现接通和断开</li></ul><p><img src="https://cdn.jsdelivr.net/gh/jiejie081/pic/img/image-20220113151119921.png" alt="独立按键"></p><ul><li><p>内部结构：</p><p><img src="https://cdn.jsdelivr.net/gh/jiejie081/pic/img/image-20220113152440031.png" alt="独立按键内部结构1"></p></li><li><p>独立按键在开发板中的连接</p></li></ul><p><img src="https://cdn.jsdelivr.net/gh/jiejie081/pic/img/image-20220113153120180.png" alt="独立按键在开发板中的连接"></p><h2 id="独立按键控制LED亮灭"><a href="#独立按键控制LED亮灭" class="headerlink" title="独立按键控制LED亮灭"></a>独立按键控制LED亮灭</h2><blockquote><p>因为按键一端连接的是GND，又因为单片机引脚默认是高电平，所以按下按键引脚检测到的就成了低电平。</p></blockquote><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//按住亮 松开灭</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;REGX52.H&gt;</span></span></span><br><span class="line">main()</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">while</span>(<span class="number">1</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(P3_1==<span class="number">0</span>)<span class="comment">//如果P_3引脚是低电平</span></span><br><span class="line">P2_0=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">P2_0=<span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>但是按键存在抖动</p><ul><li><p>按键的抖动</p><p>对于机械开关，当机械触点断开、闭合时，由于机械触点的弹性作用，一个开关在闭合时不会马上稳定地接通，在断开时也不会一下子断开，所以在开关闭合及断开的瞬间会伴随一连串的抖动</p></li></ul><p><img src="https://cdn.jsdelivr.net/gh/jiejie081/pic/img/image-20220113154316370.png" alt="按键的抖动"></p><blockquote><p>为了防止这一现象，我们可以利用程序消抖</p><p>因为按键按下、弹起的时候存在抖动</p><p>所以我们在按键按下、弹起前一段20ms的延时</p><p>从而起到消除抖动的作用</p></blockquote><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//按一下亮 再按一下灭</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;REGX52.H&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Delay</span><span class="params">(<span class="keyword">unsigned</span> <span class="keyword">int</span> xms)</span><span class="comment">//@11.0592MHz</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">unsigned</span> <span class="keyword">char</span> i, j;</span><br><span class="line"><span class="keyword">while</span>(xms)</span><br><span class="line">    &#123;</span><br><span class="line">i = <span class="number">180</span>;</span><br><span class="line">j = <span class="number">73</span>;</span><br><span class="line"><span class="keyword">do</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">while</span> (--j);</span><br><span class="line">        &#125; <span class="keyword">while</span> (--i);</span><br><span class="line">    xms--;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">mian</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">while</span>(<span class="number">1</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(P3_1==<span class="number">0</span>)</span><br><span class="line">&#123;</span><br><span class="line">Delay(<span class="number">20</span>);</span><br><span class="line"><span class="keyword">while</span>(P3_1==<span class="number">0</span>);<span class="comment">//直到松手，弹片弹起</span></span><br><span class="line">Delay(<span class="number">20</span>);</span><br><span class="line"></span><br><span class="line">P2_0=~P2_0;<span class="comment">//取反~0=1 ~1=0</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="按键控制LED显示二进制"><a href="#按键控制LED显示二进制" class="headerlink" title="按键控制LED显示二进制"></a>按键控制LED显示二进制</h2><blockquote><p>P2默认状态是1111  1111</p><p>要是二级制</p><p>1就是P2&#x3D;1111 1110  </p><p>2就是P2&#x3D;1111 1101</p><p>以此类推即可  </p><p>我们可以每按下一次 P2– ；来实现LED显示二进制</p></blockquote><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//按键控制LED显示二进制，按一下变化一次</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;REGX52.H&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Delay</span><span class="params">(<span class="keyword">unsigned</span> <span class="keyword">int</span> xms)</span><span class="comment">//@11.0592MHz</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">unsigned</span> <span class="keyword">char</span> i, j;</span><br><span class="line"><span class="keyword">while</span>(xms)</span><br><span class="line">    &#123;</span><br><span class="line">i = <span class="number">180</span>;</span><br><span class="line">j = <span class="number">73</span>;</span><br><span class="line"><span class="keyword">do</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">while</span> (--j);</span><br><span class="line">        &#125; <span class="keyword">while</span> (--i);</span><br><span class="line">    xms--;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">while</span>(<span class="number">1</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(P3_1==<span class="number">0</span>)</span><br><span class="line">&#123;</span><br><span class="line">Delay(<span class="number">20</span>);</span><br><span class="line"><span class="keyword">while</span>(P3_1==<span class="number">0</span>);<span class="comment">//直到松手，弹片弹起</span></span><br><span class="line">Delay(<span class="number">20</span>);</span><br><span class="line"></span><br><span class="line">P2--;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="独立按键控制LED移位"><a href="#独立按键控制LED移位" class="headerlink" title="独立按键控制LED移位"></a>独立按键控制LED移位</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;REGX52.H&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Delay</span><span class="params">(<span class="keyword">unsigned</span> <span class="keyword">int</span> xms)</span><span class="comment">//@11.0592MHz</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">unsigned</span> <span class="keyword">char</span> i, j;</span><br><span class="line"><span class="keyword">while</span>(xms)</span><br><span class="line">    &#123;</span><br><span class="line">i = <span class="number">180</span>;</span><br><span class="line">j = <span class="number">73</span>;</span><br><span class="line"><span class="keyword">do</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">while</span> (--j);</span><br><span class="line">        &#125; <span class="keyword">while</span> (--i);</span><br><span class="line">    xms--;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">unsigned</span> <span class="keyword">char</span> lednum;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">P2=~<span class="number">0x01</span>; <span class="comment">//1111 1110</span></span><br><span class="line"><span class="keyword">while</span>(<span class="number">1</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(P3_1==<span class="number">0</span>)</span><br><span class="line">&#123;</span><br><span class="line">Delay(<span class="number">20</span>);</span><br><span class="line"><span class="keyword">while</span>(P3_0==<span class="number">0</span>);</span><br><span class="line">Delay(<span class="number">20</span>);</span><br><span class="line"></span><br><span class="line">lednum++;</span><br><span class="line"><span class="keyword">if</span>(lednum&gt;=<span class="number">8</span>)<span class="comment">//最后一个灯向右，回到第一个灯</span></span><br><span class="line">lednum=<span class="number">0</span>;</span><br><span class="line">P2=~(<span class="number">0x01</span>&lt;&lt;lednum);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(P3_0==<span class="number">0</span>)</span><br><span class="line">&#123;</span><br><span class="line">Delay(<span class="number">20</span>);</span><br><span class="line"><span class="keyword">while</span>(P3_0==<span class="number">0</span>);</span><br><span class="line">Delay(<span class="number">20</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(lednum==<span class="number">0</span>)<span class="comment">//第一个灯向左，到最后一个灯</span></span><br><span class="line">lednum=<span class="number">8</span>;</span><br><span class="line">lednum--;</span><br><span class="line">P2=~(<span class="number">0x01</span>&lt;&lt;lednum);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 51单片机 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 51单片机 </tag>
            
            <tag> 独立按键 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>51单片机-LED</title>
      <link href="/p/11c433a2.html"/>
      <url>/p/11c433a2.html</url>
      
        <content type="html"><![CDATA[<p>学会LED，正式成为一位电灯大师</p><h2 id="LED介绍"><a href="#LED介绍" class="headerlink" title="LED介绍"></a>LED介绍</h2><ul><li><p>中文名：发光二极管</p></li><li><p>外文名：Light Emitting Diode</p></li><li><p>简称：LED</p></li><li><p>用途：照明、广告灯、指引灯、屏幕</p></li></ul><p><img src="https://cdn.jsdelivr.net/gh/jiejie081/pic/img/image-20220112223944602.png" alt="发光二极管"><img src="https://cdn.jsdelivr.net/gh/jiejie081/pic/img/image-20220112224014433.png" alt="发光二极管的引脚"><img src="https://cdn.jsdelivr.net/gh/jiejie081/pic/img/image-20220112224546139.png" alt="发光二极管符号"></p><h2 id="创建一个工程项目"><a href="#创建一个工程项目" class="headerlink" title="创建一个工程项目"></a>创建一个工程项目</h2><ol><li>打开Keil  </li><li><kbd>Project</kbd> >> <kbd>New Project</kbd> </li><li>选择单片机型号 <code>AT89C52</code></li><li>不添加启动文件 点<code>否</code></li><li>右键 <code>Source Group 1</code>添加 一个新的文件 <code>Add New Item</code></li><li>选择C语言</li><li>注：要生成<code>hex</code>文件 需要在<code>设置（Options）</code> 中打开<code>Creat HEX File</code>选项</li></ol><h2 id="LED-在开发板中的连接方式"><a href="#LED-在开发板中的连接方式" class="headerlink" title="LED 在开发板中的连接方式"></a>LED 在开发板中的连接方式</h2><p><img src="https://cdn.jsdelivr.net/gh/jiejie081/pic/img/image-20220113104542258.png" alt="LED模块在开发板中的连接"></p><h2 id="点亮一个LED"><a href="#点亮一个LED" class="headerlink" title="点亮一个LED"></a>点亮一个LED</h2><blockquote><p>因为LED 非连接单片机一端连的是VCC， 所以连接单片机引脚的一端 要输出低电压 才可以使得LED点亮</p><p>基本原理：</p><p><code>CPU</code> 执行程序给 <code>P2寄存器</code>（8个为一组 分别为 P2_0 — P2_7 ）输入数字信号 0为低电平 1为高电平(【TTL电平】高电平：5V 低电平： 0V) 每个寄存器连一个驱动器连接引脚 由驱动器控制高低电平 从而控制LED  </p><p>因为引脚默认输出的是高电平，所以我们只需要对想要点亮的LED对应引脚输出低电平就可以了</p><p>也可以对整组寄存器进行控制</p><p>因为一组寄存器是8位  2^4^&#x3D;16 所以可以用两个十六进制控制一组寄存器   </p><p>十六进制表示方式 ：    0x</p></blockquote><p><img src="https://cdn.jsdelivr.net/gh/jiejie081/pic/img/image-20220113121643604.png" alt="进制转换"></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;REGX52.H&gt;</span>   <span class="comment">//头文件</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">P2_0=<span class="number">0</span>;</span><br><span class="line">  <span class="comment">//P2=0xFE; //1111 1110  P2从右往左以此是P2_0—P2_7</span></span><br><span class="line">  <span class="comment">//也可以用十六进制控制整组寄存器</span></span><br><span class="line"><span class="keyword">while</span>(<span class="number">1</span>);<span class="comment">//加一个循环，防止反复对P2 进行操作</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="LED闪烁"><a href="#LED闪烁" class="headerlink" title="LED闪烁"></a>LED闪烁</h2><blockquote><p>我们可以是用STC-ISP 的软件延时计算器工具  生成延时函数 </p><p>注意：调整系统频率,就是晶振的频率 我的是11.0592MHz</p><p>​            8051指令集为Y1</p></blockquote><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;REGX52.H&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;INTRINS.H&gt;</span>  <span class="comment">//_nop_();语句的头文件</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Delay500ms</span><span class="params">()</span><span class="comment">//@11.0592MHz  500ms延时函数</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">unsigned</span> <span class="keyword">char</span> i, j, k;</span><br><span class="line"></span><br><span class="line">_nop_();</span><br><span class="line">i = <span class="number">4</span>;</span><br><span class="line">j = <span class="number">129</span>;</span><br><span class="line">k = <span class="number">119</span>;</span><br><span class="line"><span class="keyword">do</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">do</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">while</span> (--k);</span><br><span class="line">&#125; <span class="keyword">while</span> (--j);</span><br><span class="line">&#125; <span class="keyword">while</span> (--i);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">while</span>(<span class="number">1</span>)</span><br><span class="line">&#123;</span><br><span class="line">P2_0=<span class="number">0</span>;<span class="comment">//P2=0xFE;</span></span><br><span class="line">Delay500ms();</span><br><span class="line">P2_0=<span class="number">1</span>;<span class="comment">//p2=0xFF;</span></span><br><span class="line">Delay500ms();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="LED流水灯"><a href="#LED流水灯" class="headerlink" title="LED流水灯"></a>LED流水灯</h2><blockquote><p>与LED闪烁一样我们只需要用延时函数，然后依次控制每个灯就可以了</p></blockquote><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;REGX52.H&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;INTRINS.H&gt;</span><span class="comment">//因为头文件</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Delay</span><span class="params">(<span class="keyword">unsigned</span> <span class="keyword">int</span> xms)</span><span class="comment">//@11.0592MHz 延时函数</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">unsigned</span> <span class="keyword">char</span> i, j;</span><br><span class="line"><span class="keyword">while</span>(xms)&#123;</span><br><span class="line">_nop_();</span><br><span class="line">i = <span class="number">2</span>;</span><br><span class="line">j = <span class="number">199</span>;</span><br><span class="line"><span class="keyword">do</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">while</span> (--j);</span><br><span class="line">&#125; <span class="keyword">while</span> (--i);</span><br><span class="line">xms--;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">while</span>(<span class="number">1</span>)</span><br><span class="line">&#123;</span><br><span class="line">P2=<span class="number">0xFE</span>;<span class="comment">//1111 1110</span></span><br><span class="line">Delay(<span class="number">500</span>);</span><br><span class="line">P2=<span class="number">0xFD</span>;<span class="comment">//1111 1101</span></span><br><span class="line">Delay(<span class="number">500</span>);</span><br><span class="line">P2=<span class="number">0xFB</span>;<span class="comment">//1111 1011</span></span><br><span class="line">Delay(<span class="number">500</span>);</span><br><span class="line">P2=<span class="number">0xF7</span>;<span class="comment">//1111 0111</span></span><br><span class="line">Delay(<span class="number">500</span>);</span><br><span class="line">P2=<span class="number">0xEF</span>;<span class="comment">//1110 1111</span></span><br><span class="line">Delay(<span class="number">500</span>);</span><br><span class="line">P2=<span class="number">0xDF</span>;<span class="comment">//1101 1111</span></span><br><span class="line">Delay(<span class="number">500</span>);</span><br><span class="line">P2=<span class="number">0xBF</span>;<span class="comment">//1011 1111</span></span><br><span class="line">Delay(<span class="number">500</span>);</span><br><span class="line">P2=<span class="number">0x7F</span>;<span class="comment">//0111 1111</span></span><br><span class="line">Delay(<span class="number">500</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>到这里我已成为一名合格的电灯大师！！！</p><h2 id="流水灯的几种写法"><a href="#流水灯的几种写法" class="headerlink" title="流水灯的几种写法"></a>流水灯的几种写法</h2><h3 id="方法一"><a href="#方法一" class="headerlink" title="方法一"></a>方法一</h3><p>如上代码</p><h3 id="方法二"><a href="#方法二" class="headerlink" title="方法二"></a>方法二</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//方法二 利用数组</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;REGX52.H&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;INTRINS.H&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Delay</span><span class="params">(<span class="keyword">unsigned</span> <span class="keyword">int</span> xms)</span><span class="comment">//@11.0592MHz 延时函数</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">unsigned</span> <span class="keyword">char</span> i, j;</span><br><span class="line"><span class="keyword">while</span>(xms)&#123;</span><br><span class="line">_nop_();</span><br><span class="line">i = <span class="number">2</span>;</span><br><span class="line">j = <span class="number">199</span>;</span><br><span class="line"><span class="keyword">do</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">while</span> (--j);</span><br><span class="line">&#125; <span class="keyword">while</span> (--i);</span><br><span class="line">xms--;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">unsigned</span> <span class="keyword">char</span> LED[<span class="number">8</span>]=&#123;<span class="number">0xFE</span>,<span class="number">0xFD</span>,<span class="number">0xFB</span>,<span class="number">0xF7</span>,<span class="number">0xEF</span>,<span class="number">0xDF</span>,<span class="number">0xBF</span>,<span class="number">0x7F</span>&#125;;<span class="comment">//定义数组</span></span><br><span class="line"><span class="keyword">unsigned</span> <span class="keyword">int</span> i = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"> <span class="keyword">while</span>(<span class="number">1</span>)&#123;</span><br><span class="line"> <span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;<span class="number">8</span>;i++)</span><br><span class="line"> &#123;</span><br><span class="line"> P1 = LED[i];</span><br><span class="line"> Delay(<span class="number">500</span>);</span><br><span class="line"> &#125;</span><br><span class="line"> &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="方法三"><a href="#方法三" class="headerlink" title="方法三"></a>方法三</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//方法三  利用 &lt;&lt; 位移</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;REGX52.H&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;INTRINS.H&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Delay</span><span class="params">(<span class="keyword">unsigned</span> <span class="keyword">int</span> xms)</span><span class="comment">//@11.0592MHz 延时函数</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">unsigned</span> <span class="keyword">char</span> i, j;</span><br><span class="line"><span class="keyword">while</span>(xms)&#123;</span><br><span class="line">_nop_();</span><br><span class="line">i = <span class="number">2</span>;</span><br><span class="line">j = <span class="number">199</span>;</span><br><span class="line"><span class="keyword">do</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">while</span> (--j);</span><br><span class="line">&#125; <span class="keyword">while</span> (--i);</span><br><span class="line">xms--;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">unsigned</span> <span class="keyword">char</span> i = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">while</span>(<span class="number">1</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;<span class="number">8</span>;i++)</span><br><span class="line">&#123;</span><br><span class="line">P1 = ~(<span class="number">0x01</span> &lt;&lt; i );  <span class="comment">//目标是1111 1110 写0000 0001 然后取反</span></span><br><span class="line">Delay(<span class="number">500</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//当然还可以先a = 0xFE;然后定义P1 = a;a = (a &lt;&lt; 1)+1;</span></span><br><span class="line"><span class="comment">//还可以每次都P1 &lt;&lt; 1; P1 |= 0X01;</span></span><br></pre></td></tr></table></figure><h3 id="方法四"><a href="#方法四" class="headerlink" title="方法四"></a>方法四</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//方法四  利用&lt;INTRINS.H&gt;库中的_corl_()函数</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;REGX52.H&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;INTRINS.H&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Delay</span><span class="params">(<span class="keyword">unsigned</span> <span class="keyword">int</span> xms)</span><span class="comment">//@11.0592MHz 延时函数</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">unsigned</span> <span class="keyword">char</span> i, j;</span><br><span class="line"><span class="keyword">while</span>(xms)&#123;</span><br><span class="line">_nop_();</span><br><span class="line">i = <span class="number">2</span>;</span><br><span class="line">j = <span class="number">199</span>;</span><br><span class="line"><span class="keyword">do</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">while</span> (--j);</span><br><span class="line">&#125; <span class="keyword">while</span> (--i);</span><br><span class="line">xms--;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">unsigned</span> <span class="keyword">char</span> a=<span class="number">0xFE</span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">while</span>(<span class="number">1</span>)</span><br><span class="line">    &#123;</span><br><span class="line">    P1 =  a;</span><br><span class="line">Delay(<span class="number">500</span>);</span><br><span class="line">a=_crol_(a,<span class="number">1</span>)  ; </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 51单片机 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 51单片机 </tag>
            
            <tag> LED </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>51单片机-51单片机介绍</title>
      <link href="/p/440ecb0c.html"/>
      <url>/p/440ecb0c.html</url>
      
        <content type="html"><![CDATA[<h2 id="开发工具"><a href="#开发工具" class="headerlink" title="开发工具"></a>开发工具</h2><ul><li><p><code>Keil C51</code> （Keil C51是美国Keil Software公司出品的51系列兼容单片机C语言软件开发系统）</p><p>下载地址： <a href="www.keil.com">Keil 官网</a>    或者  <code>软件管家</code>   </p></li><li><p><code>STC-ISP</code> （STC芯片烧录工具）及 <code>驱动程序</code></p><p>下载地址： <a href="https://www.stcmcudata.com/">STC官网</a></p></li></ul><h2 id="单片机"><a href="#单片机" class="headerlink" title="单片机"></a>单片机</h2><h3 id="单片机介绍"><a href="#单片机介绍" class="headerlink" title="单片机介绍"></a>单片机介绍</h3><ul><li><p>单片机，英文Micro Controller Unit，简称MCU</p></li><li><p>内部集成了CPU、RAM、ROM、定时器、中断系统、通讯接口等一系列电脑的常用硬件功能</p></li><li><p>单片机的任务是信息采集（依靠传感器）、处理（依靠CPU）和硬件设备（例如电机，LED等）的控制</p></li><li><p>单片机跟计算机相比，单片机算是一个袖珍版计算机，一个芯片就能构成完整的计算机系统。但在性能上，与计算机相差甚远，但单片机成本低、体积小、结构简单，在生活和工业控制领域大有所用</p></li><li><p>同时，学习使用单片机是了解计算机原理与结构的最佳选择</p></li></ul><h3 id="单片机的应用"><a href="#单片机的应用" class="headerlink" title="单片机的应用"></a>单片机的应用</h3><ul><li>单片机的使用领域已十分广泛，如智能仪表、实时工控、通讯设备、导航系统、家用电器等。各种产品一旦用上了单片机，就能起到使产品升级换代的功效，常在产品名称前冠以形容词——“智能型”，如智能型洗衣机等</li></ul><h3 id="STC89C52单片机"><a href="#STC89C52单片机" class="headerlink" title="STC89C52单片机"></a>STC89C52单片机</h3><ul><li><p>所属系列：51单片机系列                  </p></li><li><p>公司：STC公司</p></li><li><p>位数：8位</p></li><li><p>RAM：512字节</p></li><li><p>ROM：8K（Flash）</p></li><li><p>工作频率：12MHz（开发板使用）</p><p><img src="https://cdn.jsdelivr.net/gh/jiejie081/pic/img/image-20220327103315953.png" alt="image-20220327103315953"></p><p><img src="https://cdn.jsdelivr.net/gh/jiejie081/pic/img/image-20220112220854850.png" alt="STC89C52"></p></li></ul><h3 id="命名规则"><a href="#命名规则" class="headerlink" title="命名规则"></a>命名规则</h3><p><img src="https://cdn.jsdelivr.net/gh/jiejie081/pic/img/image-20220112223254939.png" alt="STC89C52"></p><p><img src="https://cdn.jsdelivr.net/gh/jiejie081/pic/img/image-20220112223228105.png" alt="STC89C52命名规则"></p><h2 id="单片机内部结构"><a href="#单片机内部结构" class="headerlink" title="单片机内部结构"></a>单片机内部结构</h2><p><img src="https://cdn.jsdelivr.net/gh/jiejie081/pic/img/image-20220113181229166.png" alt="单片机内部结构"></p><p><img src="https://cdn.jsdelivr.net/gh/jiejie081/pic/img/image-20220113181313175.png" alt="STC89C52系列内部结构框图"></p><h2 id="单片机最小系统"><a href="#单片机最小系统" class="headerlink" title="单片机最小系统"></a>单片机最小系统</h2><p><img src="https://cdn.jsdelivr.net/gh/jiejie081/pic/img/image-20220113181807671.png" alt="单片机最小系统"></p>]]></content>
      
      
      <categories>
          
          <category> 51单片机 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 51单片机 </tag>
            
            <tag> Keil </tag>
            
            <tag> STC </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Git与GitHub常用命令</title>
      <link href="/p/8dde43cf.html"/>
      <url>/p/8dde43cf.html</url>
      
        <content type="html"><![CDATA[<h1 id="Git与GitHub常用命令"><a href="#Git与GitHub常用命令" class="headerlink" title="Git与GitHub常用命令"></a>Git与GitHub常用命令</h1><h2 id="Git"><a href="#Git" class="headerlink" title="Git"></a>Git</h2><ul><li>创库初始化</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git init</span><br></pre></td></tr></table></figure><ul><li>查看当前git本地仓库状态</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git status</span><br></pre></td></tr></table></figure><ul><li>添加文件到本地缓存区</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git add [file]</span><br></pre></td></tr></table></figure><ul><li>将文件从缓存区移除</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git rm -cached [file]</span><br></pre></td></tr></table></figure><ul><li>提交缓存区内容到本地库并附加提交信息</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git commit -m &quot;附加信息&quot;</span><br><span class="line">git commit -m &quot;附加信息&quot; [file]  #仅将file文件提交</span><br></pre></td></tr></table></figure><ul><li>查看历史记录</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">git log</span><br><span class="line">git log--pretty=oneline</span><br><span class="line">git reflog</span><br></pre></td></tr></table></figure><ul><li>版本前进后退</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">基于索引值操作[推荐]</span></span><br><span class="line"></span><br><span class="line">git reset --hard [局部索引值]</span><br><span class="line">git reset --hard a6ace91</span><br><span class="line"><span class="meta">#</span><span class="bash">使用^符号：只能后退</span></span><br><span class="line">git reset --hard HEAD^ 注：一个^表示后退一步，n 个表示后退 n 步</span><br><span class="line"><span class="meta">#</span><span class="bash">使用~符号：只能后退</span></span><br><span class="line">git reset --hard HEAD~n</span><br><span class="line"><span class="meta">#</span><span class="bash">注：表示后退 n</span></span><br></pre></td></tr></table></figure><ul><li>签名设置</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">git config user.name [name]</span><br><span class="line">git comfig user.email [email]</span><br><span class="line"><span class="meta">#</span><span class="bash">项目（仓库）级别签名，仅对该项目有效 信息保存在 ./.git/config</span></span><br><span class="line">git config --global user.name [name]</span><br><span class="line">git comfig --global user.email [email]</span><br><span class="line"><span class="meta">#</span><span class="bash">系统级别签名，对当前操作系统的用户有效 ~/.gitconfig 文件</span></span><br></pre></td></tr></table></figure><ul><li>分支操作</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">创建分支</span></span><br><span class="line">git branch [分支名]</span><br><span class="line"><span class="meta">#</span><span class="bash">查看分支</span></span><br><span class="line">git branch -v</span><br><span class="line"><span class="meta">#</span><span class="bash">切换分支</span></span><br><span class="line">git checkout [分支名]</span><br><span class="line"><span class="meta">#</span><span class="bash">合并分支</span></span><br><span class="line"><span class="meta">#</span><span class="bash">第一步：切换到接受修改的分支（被合并，增加新内容）上</span></span><br><span class="line">git checkout [被合并分支名]</span><br><span class="line"><span class="meta">#</span><span class="bash">第二步：执行 merge 命令</span></span><br><span class="line">git merge [有新内容分支名]</span><br><span class="line"><span class="meta">#</span><span class="bash">合并时分支相同文件，不同内容回产生冲突</span></span><br><span class="line"><span class="meta">#</span><span class="bash">第一步：编辑文件，删除特殊符号</span></span><br><span class="line"><span class="meta">#</span><span class="bash">第二步：把文件修改到满意的程度，保存退出</span></span><br><span class="line"><span class="meta">#</span><span class="bash">第三步：git add [文件名]</span></span><br><span class="line"><span class="meta">#</span><span class="bash">第四步：git commit -m <span class="string">&quot;日志信息&quot;</span>   注意：此时 commit 一定不能</span></span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash">删除分支a</span></span><br><span class="line">git branch -d a</span><br><span class="line"><span class="meta">#</span><span class="bash">强制删除分支a</span></span><br><span class="line">git branch -D a</span><br></pre></td></tr></table></figure><ul><li>版本标签以及切换</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">为当前的状态打一个v1.0的标签</span></span><br><span class="line">git tag v1.0</span><br><span class="line"><span class="meta">#</span><span class="bash">查看历史tag记录</span></span><br><span class="line">git tag</span><br><span class="line"><span class="meta">#</span><span class="bash">切换到v1.0状态</span></span><br><span class="line">git checkout v1.0</span><br></pre></td></tr></table></figure><h2 id="GitHub"><a href="#GitHub" class="headerlink" title="GitHub"></a>GitHub</h2><h3 id="密钥"><a href="#密钥" class="headerlink" title="密钥"></a>密钥</h3><p>在向 GitHub 提交代码前，需要 SSH 授权，因此要创建 SSH Key</p><ol><li><p>生成密钥</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssh-keygen -t rsa -C &quot;email&quot;</span><br></pre></td></tr></table></figure><p>rsa 算法生成密钥，接着连续三个回车键（不需要输入密码），然后就会生成两个文件 id_rsa 和 id_rsa.pub。命令执行结果会告诉你文件默认路径, 其中 id_rsa 是密钥（ &#x2F;c&#x2F;Users&#x2F;yu&#x2F;.ssh&#x2F;id_rsa ）， id_rsa.pub 就是公钥（ &#x2F;c&#x2F;Users&#x2F;yu&#x2F;.ssh&#x2F;id_rsa.pub ）</p></li><li><p>在github上添加 ssh key</p></li></ol><ul><li>进入自己的 GitHub 的设置界面，如图：</li><li>点击 New SSH Key 按钮，并把上述 id_rsa.pub 中的内容填入下面 Key 输入框中，如图：</li><li>点击 Add SSH Key 就可以了</li></ul><ol start="3"><li><p>测试秘钥是否成功</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssh -T git@github.com  </span><br></pre></td></tr></table></figure></li></ol><p>第一次使用可能提示 github.com 无法验是否证可信任，输入 yes</p><h3 id="推送"><a href="#推送" class="headerlink" title="推送"></a>推送</h3><ul><li><p>创建远程库地址别名</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git remote -v #查看当前所有远程库别名</span><br><span class="line">git remote add [别名] [远程库地址]</span><br></pre></td></tr></table></figure></li><li><p>推送</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git push [别名] [分支名]</span><br></pre></td></tr></table></figure></li><li><p>克隆</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git clone [远程地址]</span><br></pre></td></tr></table></figure></li><li><p>拉取</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> pull=fetch+merge</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> fetch （拿来）拉去但是没有对本地更改</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> merge （合并）对本地进行更改</span></span><br><span class="line">git fetch [远程库地址别名] [远程分支名]</span><br><span class="line">git merge [远程库地址别名/远程分支名]</span><br><span class="line">git pull [远程库地址别名] </span><br></pre></td></tr></table></figure></li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> git </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>GitHub+Hexo 个人博客</title>
      <link href="/p/8306de21.html"/>
      <url>/p/8306de21.html</url>
      
        <content type="html"><![CDATA[<h1 id=""><a href="#" class="headerlink" title=""></a><mark class="hl-label blue">GitHub+Hexo个人博客</mark> </h1><h2 id="环境准备"><a href="#环境准备" class="headerlink" title="环境准备"></a>环境准备</h2><ol><li><p>git            <a href="https://git-scm.com/">Git 官网</a></p></li><li><p>node.js   <a href="https://nodejs.org/en/">node官网</a></p></li><li><p>Hexo      <a href="https://hexo.io/zh-cn/index.html">Hexo官网</a></p></li></ol><p>   或者直接用命令：</p>   <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo-cli -g</span><br></pre></td></tr></table></figure><h2 id="创建并绑定GitHub"><a href="#创建并绑定GitHub" class="headerlink" title="创建并绑定GitHub"></a>创建并绑定GitHub</h2><ol><li><p>创建一个GitHub账号</p></li><li><p>创建一个库 名字为 [name].github.io</p></li><li><p>生成ssh</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssh-keygen -t rsa -C &quot;email&quot;</span><br></pre></td></tr></table></figure><p>rsa 算法生成密钥，接着连续三个回车键（不需要输入密码），然后就会生成两个文件 id_rsa 和 id_rsa.pub。命令执行结果会告诉你文件默认路径, 其中 id_rsa 是密钥（ &#x2F;c&#x2F;Users&#x2F;yu&#x2F;.ssh&#x2F;id_rsa ）， id_rsa.pub 就是公钥（ &#x2F;c&#x2F;Users&#x2F;yu&#x2F;.ssh&#x2F;id_rsa.pub ）</p></li><li><p>在github上添加 ssh key</p></li></ol><ul><li>进入自己的 GitHub 的设置界面</li><li>点击 New SSH Key 按钮，并把上述 id_rsa.pub 中的内容填入下面 Key 输入框中，如图：</li><li>点击 Add SSH Key 就可以了</li></ul><ol start="5"><li><p>测试秘钥是否成功</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssh -T git@github.com  </span><br></pre></td></tr></table></figure></li></ol><p>第一次使用可能提示 github.com 无法验是否证可信任，输入 yes</p><ol start="6"><li>生成令牌</li></ol><ul><li>进入自己的 GitHub 的设置界面（settings）</li><li>点击 Developer settings 按钮 </li><li>点击 Personal access tokens</li><li>点击 Generate new token </li><li>Note 随便填 Expiration可以设置令牌时间 Select scopes全选</li><li>点击 Generate 就可以了</li><li>注意：令牌只有在生成的时候显示，要复制一下记下来</li></ul><h2 id="Hexo博客搭建"><a href="#Hexo博客搭建" class="headerlink" title="Hexo博客搭建"></a>Hexo博客搭建</h2><ol><li><p>新建一个名为blog的文件夹，在文件夹内 git bash here</p></li><li><p>初始化hexo 博客</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo init</span><br></pre></td></tr></table></figure></li><li><p>安装deploy插件</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo-deployer-git --save</span><br></pre></td></tr></table></figure></li><li><p>配置_config.yml文件</p><p>用Notepad++打开</p><p>最后面配置为</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">deploy:</span><br><span class="line">  type: git</span><br><span class="line">  repo: [远程库地址]</span><br><span class="line">  branch: main</span><br></pre></td></tr></table></figure></li><li><p>签名设置</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">git config user.name [name]</span><br><span class="line">git config user.email [email]</span><br><span class="line"><span class="meta">#</span><span class="bash">项目（仓库）级别签名，仅对该项目有效 信息保存在 ./.git/config</span></span><br><span class="line">git config --global user.name [name]</span><br><span class="line">git config --global user.email [email]</span><br><span class="line"><span class="meta">#</span><span class="bash">系统级别签名，对当前操作系统的用户有效 ~/.gitconfig 文件</span></span><br></pre></td></tr></table></figure><p>可以直接找到.deploy_git&#x2F;.git&#x2F;config 在文件中加入</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[user]</span><br><span class="line">name = [name]</span><br><span class="line">eamil = [eamil]</span><br></pre></td></tr></table></figure><p>6.生成页面上传</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">hexo c #清理缓存</span><br><span class="line">hexo g #生成页面</span><br><span class="line">hexo s #生成静态页面</span><br><span class="line"><span class="meta">#</span><span class="bash"> Ctrl+c 退出</span></span><br><span class="line">hexo d #上传github</span><br></pre></td></tr></table></figure></li></ol><p>第一次hexo d要登录github 第一个输入name 第二个输入令牌</p><h2 id="利用gtihub备份博客"><a href="#利用gtihub备份博客" class="headerlink" title="利用gtihub备份博客"></a>利用gtihub备份博客</h2><ul><li>上传</li></ul><ol><li><p>创建一个新的远程github仓库</p></li><li><p>.gitignore文件可以是一些没有必要的文件备份到仓库</p></li><li><p>根据提示将博客文件夹push到远程库</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">git add .</span><br><span class="line">git commit -m &quot; &quot;</span><br><span class="line">git remote [别名] [远程库地址]</span><br><span class="line">git push [别名] [分支]</span><br></pre></td></tr></table></figure></li></ol><ul><li>克隆</li></ul><ol><li><p>在要下载到的地址 git bash here</p></li><li><p>输入命令</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git clone [远程库地址]</span><br></pre></td></tr></table></figure></li><li><p>打开文件夹安装依赖</p></li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install</span><br></pre></td></tr></table></figure><p>在初始化hexo 的时候自动安装了依赖</p><p>而上传的时候没有上传依赖</p><p>所以就clone下来就要安装依赖</p><ol start="4"><li>和正常一样使用</li></ol>]]></content>
      
      
      <categories>
          
          <category> 教程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 教程 </tag>
            
            <tag> github </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
