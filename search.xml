<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>51单片机入门（三）</title>
      <link href="/2022/01/13/51%E5%8D%95%E7%89%87%E6%9C%BA%E5%85%A5%E9%97%A8%EF%BC%88%E4%B8%89%EF%BC%89/"/>
      <url>/2022/01/13/51%E5%8D%95%E7%89%87%E6%9C%BA%E5%85%A5%E9%97%A8%EF%BC%88%E4%B8%89%EF%BC%89/</url>
      
        <content type="html"><![CDATA[<h2 id="按键介绍"><a href="#按键介绍" class="headerlink" title="按键介绍"></a>按键介绍</h2><ul><li>轻触按键：相当于是一种电子开关，按下时开关接通，松开时开关断开，实现原理是通过轻触按键内部的金属弹片受力弹动来实现接通和断开</li></ul><p><img src="https://cdn.jsdelivr.net/gh/jiejie081/pic/img/image-20220113151119921.png" alt="独立按键"></p><ul><li><p>内部结构：</p><p><img src="https://cdn.jsdelivr.net/gh/jiejie081/pic/img/image-20220113152440031.png" alt="独立按键内部结构1"></p></li><li><p>独立按键在开发板中的连接</p></li></ul><p><img src="https://cdn.jsdelivr.net/gh/jiejie081/pic/img/image-20220113153120180.png" alt="独立按键在开发板中的连接"></p><h2 id="独立按键控制LED亮灭"><a href="#独立按键控制LED亮灭" class="headerlink" title="独立按键控制LED亮灭"></a>独立按键控制LED亮灭</h2><blockquote><p>因为按键一端连接的是GND，又因为单片机引脚默认是高电平，所以按下按键引脚检测到的就成了低电平。</p></blockquote><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//按住亮 松开灭</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;REGX52.H&gt;</span></span></span><br><span class="line">main()</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">while</span>(<span class="number">1</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(P3_1==<span class="number">0</span>)<span class="comment">//如果P_3引脚是低电平</span></span><br><span class="line">P2_0=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">P2_0=<span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>但是按键存在抖动</p><ul><li><p>按键的抖动</p><p>对于机械开关，当机械触点断开、闭合时，由于机械触点的弹性作用，一个开关在闭合时不会马上稳定地接通，在断开时也不会一下子断开，所以在开关闭合及断开的瞬间会伴随一连串的抖动</p></li></ul><p><img src="https://cdn.jsdelivr.net/gh/jiejie081/pic/img/image-20220113154316370.png" alt="按键的抖动"></p><blockquote><p>为了防止这一现象，我们可以利用程序消抖</p><p>因为按键按下、弹起的时候存在抖动</p><p>所以我们在按键按下、弹起前一段20ms的延时</p><p>从而起到消除抖动的作用</p></blockquote><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//按一下亮 再按一下灭</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;REGX52.H&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Delay</span><span class="params">(<span class="keyword">unsigned</span> <span class="keyword">int</span> xms)</span><span class="comment">//@11.0592MHz</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">unsigned</span> <span class="keyword">char</span> i, j;</span><br><span class="line"><span class="keyword">while</span>(xms)</span><br><span class="line">    &#123;</span><br><span class="line">i = <span class="number">180</span>;</span><br><span class="line">j = <span class="number">73</span>;</span><br><span class="line"><span class="keyword">do</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">while</span> (--j);</span><br><span class="line">        &#125; <span class="keyword">while</span> (--i);</span><br><span class="line">    xms--;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">mian</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">while</span>(<span class="number">1</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(P3_1==<span class="number">0</span>)</span><br><span class="line">&#123;</span><br><span class="line">Delay(<span class="number">20</span>);</span><br><span class="line"><span class="keyword">while</span>(P3_1==<span class="number">0</span>);<span class="comment">//知道松手，弹片弹起</span></span><br><span class="line">Delay(<span class="number">20</span>);</span><br><span class="line"></span><br><span class="line">P2_0=~P2_0;<span class="comment">//取反~0=1 ~1=0</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="按键控制LED显示二进制"><a href="#按键控制LED显示二进制" class="headerlink" title="按键控制LED显示二进制"></a>按键控制LED显示二进制</h2><blockquote><p>P2默认状态是1111  1111</p><p>要是二级制</p><p>1就是P2=1111 1110  </p><p>2就是P2=1111 1101</p><p>以此类推即可  </p><p>我们可以每按下一次 P2— ；来实现LED显示二进制</p></blockquote><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//按键控制LED显示二进制，按一下变化一次</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;REGX52.H&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Delay</span><span class="params">(<span class="keyword">unsigned</span> <span class="keyword">int</span> xms)</span><span class="comment">//@11.0592MHz</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">unsigned</span> <span class="keyword">char</span> i, j;</span><br><span class="line"><span class="keyword">while</span>(xms)</span><br><span class="line">    &#123;</span><br><span class="line">i = <span class="number">180</span>;</span><br><span class="line">j = <span class="number">73</span>;</span><br><span class="line"><span class="keyword">do</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">while</span> (--j);</span><br><span class="line">        &#125; <span class="keyword">while</span> (--i);</span><br><span class="line">    xms--;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">while</span>(<span class="number">1</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(P3_1==<span class="number">0</span>)</span><br><span class="line">&#123;</span><br><span class="line">Delay(<span class="number">20</span>);</span><br><span class="line"><span class="keyword">while</span>(P3_1==<span class="number">0</span>);</span><br><span class="line">Delay(<span class="number">20</span>);</span><br><span class="line"></span><br><span class="line">P2--;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="独立按键控制LED移位"><a href="#独立按键控制LED移位" class="headerlink" title="独立按键控制LED移位"></a>独立按键控制LED移位</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;REGX52.H&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Delay</span><span class="params">(<span class="keyword">unsigned</span> <span class="keyword">int</span> xms)</span><span class="comment">//@11.0592MHz</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">unsigned</span> <span class="keyword">char</span> i, j;</span><br><span class="line"><span class="keyword">while</span>(xms)</span><br><span class="line">    &#123;</span><br><span class="line">i = <span class="number">180</span>;</span><br><span class="line">j = <span class="number">73</span>;</span><br><span class="line"><span class="keyword">do</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">while</span> (--j);</span><br><span class="line">        &#125; <span class="keyword">while</span> (--i);</span><br><span class="line">    xms--;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">unsigned</span> <span class="keyword">char</span> lednum;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">P2=~<span class="number">0x01</span>; <span class="comment">//1111 1110</span></span><br><span class="line"><span class="keyword">while</span>(<span class="number">1</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(P3_1==<span class="number">0</span>)</span><br><span class="line">&#123;</span><br><span class="line">Delay(<span class="number">20</span>);</span><br><span class="line"><span class="keyword">while</span>(P3_0==<span class="number">0</span>);</span><br><span class="line">Delay(<span class="number">20</span>);</span><br><span class="line"></span><br><span class="line">lednum++;</span><br><span class="line"><span class="keyword">if</span>(lednum&gt;=<span class="number">8</span>)<span class="comment">//最后一个灯向右，回到第一个灯</span></span><br><span class="line">lednum=<span class="number">0</span>;</span><br><span class="line">P2=~(<span class="number">0x01</span>&lt;&lt;lednum);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(P3_0==<span class="number">0</span>)</span><br><span class="line">&#123;</span><br><span class="line">Delay(<span class="number">20</span>);</span><br><span class="line"><span class="keyword">while</span>(P3_0==<span class="number">0</span>);</span><br><span class="line">Delay(<span class="number">20</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(lednum==<span class="number">0</span>)<span class="comment">//第一个灯向左，到最后一个灯</span></span><br><span class="line">lednum=<span class="number">8</span>;</span><br><span class="line">lednum--;</span><br><span class="line">P2=~(<span class="number">0x01</span>&lt;&lt;lednum);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 51单片机 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 51单片机 </tag>
            
            <tag> 独立按键 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>51单片机入门（二）</title>
      <link href="/2022/01/12/51%E5%8D%95%E7%89%87%E6%9C%BA%E5%85%A5%E9%97%A8%EF%BC%88%E4%BA%8C%EF%BC%89/"/>
      <url>/2022/01/12/51%E5%8D%95%E7%89%87%E6%9C%BA%E5%85%A5%E9%97%A8%EF%BC%88%E4%BA%8C%EF%BC%89/</url>
      
        <content type="html"><![CDATA[<p>学会LED，正式成为一位电灯大师</p><h2 id="LED介绍"><a href="#LED介绍" class="headerlink" title="LED介绍"></a>LED介绍</h2><ul><li><p>中文名：发光二极管</p></li><li><p>外文名：Light Emitting Diode</p></li><li><p>简称：LED</p></li><li><p>用途：照明、广告灯、指引灯、屏幕</p></li></ul><p><img src="https://cdn.jsdelivr.net/gh/jiejie081/pic/img/image-20220112223944602.png" alt="发光二极管"><img src="https://cdn.jsdelivr.net/gh/jiejie081/pic/img/image-20220112224014433.png" alt="发光二极管的引脚"><img src="https://cdn.jsdelivr.net/gh/jiejie081/pic/img/image-20220112224546139.png" alt="发光二极管符号"></p><h2 id="创建一个工程项目"><a href="#创建一个工程项目" class="headerlink" title="创建一个工程项目"></a>创建一个工程项目</h2><ol><li>打开Keil  </li><li><kbd>Project</kbd> >> <kbd>New Project</kbd> </li><li>选择单片机型号 <code>AT89C52</code></li><li>不添加启动文件 点<code>否</code></li><li>右键 <code>Source Group 1</code>添加 一个新的文件 <code>Add New Item</code></li><li>选择C语言</li><li>注：要生成<code>hex</code>文件 需要在<code>设置（Options）</code> 中打开<code>Creat HEX File</code>选项</li></ol><h2 id="LED-在开发板中的连接方式"><a href="#LED-在开发板中的连接方式" class="headerlink" title="LED 在开发板中的连接方式"></a>LED 在开发板中的连接方式</h2><p><img src="https://cdn.jsdelivr.net/gh/jiejie081/pic/img/image-20220113104542258.png" alt="LED模块在开发板中的连接"></p><h2 id="点亮一个LED"><a href="#点亮一个LED" class="headerlink" title="点亮一个LED"></a>点亮一个LED</h2><blockquote><p>因为LED 非连接单片机一端连的是VCC， 所以连接单片机引脚的一端 要输出低电压 才可以使得LED点亮</p><p>基本原理：</p><p><code>CPU</code> 执行程序给 <code>P2寄存器</code>（8个为一组 分别为 P2_0 — P2_7 ）输入数字信号 0为低电平 1为高电平(【TTL电平】高电平：5V 低电平： 0V) 每个寄存器连一个驱动器连接引脚 由驱动器控制高低电平 从而控制LED  </p><p>因为引脚默认输出的是高电平，所以我们只需要对想要点亮的LED对应引脚输出低电平就可以了</p><p>也可以对整组寄存器进行控制</p><p>因为一组寄存器是8位  2^4^=16 所以可以用两个十六进制控制一组寄存器   </p><p>十六进制表示方式 ：    0x</p></blockquote><p><img src="https://cdn.jsdelivr.net/gh/jiejie081/pic/img/image-20220113121643604.png" alt="进制转换"></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;REGX52.H&gt;</span>   <span class="comment">//头文件</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">P2_0=<span class="number">0</span>;</span><br><span class="line">  <span class="comment">//P2=0xFE; //1111 1110  P2从右往左以此是P2_0—P2_7</span></span><br><span class="line">  <span class="comment">//也可以用十六进制控制整组寄存器</span></span><br><span class="line"><span class="keyword">while</span>(<span class="number">1</span>);<span class="comment">//加一个循环，防止反复对P2 进行操作</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="LED闪烁"><a href="#LED闪烁" class="headerlink" title="LED闪烁"></a>LED闪烁</h2><blockquote><p>我们可以是用STC-ISP 的软件延时计算器工具  生成延时函数 </p><p>注意：调整系统频率,就是晶振的频率 我的是11.0592MHz</p><p>​            8051指令集为Y1</p></blockquote><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;REGX52.H&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;INTRINS.H&gt;</span>  <span class="comment">//_nop_();语句的头文件</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Delay500ms</span><span class="params">()</span><span class="comment">//@11.0592MHz  500ms延时函数</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">unsigned</span> <span class="keyword">char</span> i, j, k;</span><br><span class="line"></span><br><span class="line">_nop_();</span><br><span class="line">i = <span class="number">4</span>;</span><br><span class="line">j = <span class="number">129</span>;</span><br><span class="line">k = <span class="number">119</span>;</span><br><span class="line"><span class="keyword">do</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">do</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">while</span> (--k);</span><br><span class="line">&#125; <span class="keyword">while</span> (--j);</span><br><span class="line">&#125; <span class="keyword">while</span> (--i);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">while</span>(<span class="number">1</span>)</span><br><span class="line">&#123;</span><br><span class="line">P2_0=<span class="number">0</span>;<span class="comment">//P2=0xFE;</span></span><br><span class="line">Delay500ms();</span><br><span class="line">P2_0=<span class="number">1</span>;<span class="comment">//p2=0xFF;</span></span><br><span class="line">Delay500ms();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="LED流水灯"><a href="#LED流水灯" class="headerlink" title="LED流水灯"></a>LED流水灯</h2><blockquote><p>与LED闪烁一样我们只需要用延时函数，然后依次控制每个灯就可以了</p></blockquote><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;REGX52.H&gt;</span></span></span><br><span class="line"><span class="comment">//#include &lt;INTRINS.H&gt;  //因为没有_nop_();语句 所以可以不要这个头文件</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Delay</span><span class="params">(<span class="keyword">unsigned</span> <span class="keyword">int</span> xms)</span><span class="comment">//@11.0592MHz 定义一个延时带参数延时函数 参数控制延时时间 调整参数大小就可以控制流水等快慢</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">unsigned</span> <span class="keyword">char</span> i, j;</span><br><span class="line"><span class="keyword">while</span>(xms)</span><br><span class="line">    &#123;</span><br><span class="line">i = <span class="number">180</span>;</span><br><span class="line">j = <span class="number">73</span>;</span><br><span class="line"><span class="keyword">do</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">while</span> (--j);</span><br><span class="line">        &#125; <span class="keyword">while</span> (--i);</span><br><span class="line">    xms--;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">while</span>(<span class="number">1</span>)</span><br><span class="line">&#123;</span><br><span class="line">P2=<span class="number">0xFE</span>;<span class="comment">//1111 1110</span></span><br><span class="line">Delay(<span class="number">500</span>);</span><br><span class="line">P2=<span class="number">0xFD</span>;<span class="comment">//1111 1101</span></span><br><span class="line">Delay(<span class="number">500</span>);</span><br><span class="line">P2=<span class="number">0xFB</span>;<span class="comment">//1111 1011</span></span><br><span class="line">Delay(<span class="number">500</span>);</span><br><span class="line">P2=<span class="number">0xF7</span>;<span class="comment">//1111 0111</span></span><br><span class="line">Delay(<span class="number">500</span>);</span><br><span class="line">P2=<span class="number">0xEF</span>;<span class="comment">//1110 1111</span></span><br><span class="line">Delay(<span class="number">500</span>);</span><br><span class="line">P2=<span class="number">0xDF</span>;<span class="comment">//1101 1111</span></span><br><span class="line">Delay(<span class="number">500</span>);</span><br><span class="line">P2=<span class="number">0xBF</span>;<span class="comment">//1011 1111</span></span><br><span class="line">Delay(<span class="number">500</span>);</span><br><span class="line">P2=<span class="number">0x7F</span>;<span class="comment">//0111 1111</span></span><br><span class="line">Delay(<span class="number">500</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>到这里我已成为一名合格的电灯大师！！！</p>]]></content>
      
      
      <categories>
          
          <category> 51单片机 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 51单片机 </tag>
            
            <tag> LED </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>51单片机入门（一）</title>
      <link href="/2022/01/10/51%E5%8D%95%E7%89%87%E6%9C%BA%E5%85%A5%E9%97%A8%EF%BC%88%E4%B8%80%EF%BC%89/"/>
      <url>/2022/01/10/51%E5%8D%95%E7%89%87%E6%9C%BA%E5%85%A5%E9%97%A8%EF%BC%88%E4%B8%80%EF%BC%89/</url>
      
        <content type="html"><![CDATA[<h2 id="开发工具"><a href="#开发工具" class="headerlink" title="开发工具"></a>开发工具</h2><ul><li><p><code>Keil C51</code> （Keil C51是美国Keil Software公司出品的51系列兼容单片机C语言软件开发系统）</p><p>下载地址： <a href="www.keil.com">Keil 官网</a>    或者  <code>软件管家</code>   </p></li><li><p><code>STC-ISP</code> （STC芯片烧录工具）及 <code>驱动程序</code></p><p>下载地址： <a href="https://www.stcmcudata.com/">STC官网</a></p></li></ul><h2 id="单片机"><a href="#单片机" class="headerlink" title="单片机"></a>单片机</h2><h3 id="单片机介绍"><a href="#单片机介绍" class="headerlink" title="单片机介绍"></a>单片机介绍</h3><ul><li><p>单片机，英文Micro Controller Unit，简称MCU</p></li><li><p>内部集成了CPU、RAM、ROM、定时器、中断系统、通讯接口等一系列电脑的常用硬件功能</p></li><li><p>单片机的任务是信息采集（依靠传感器）、处理（依靠CPU）和硬件设备（例如电机，LED等）的控制</p></li><li><p>单片机跟计算机相比，单片机算是一个袖珍版计算机，一个芯片就能构成完整的计算机系统。但在性能上，与计算机相差甚远，但单片机成本低、体积小、结构简单，在生活和工业控制领域大有所用</p></li><li><p>同时，学习使用单片机是了解计算机原理与结构的最佳选择</p></li></ul><h3 id="单片机的应用"><a href="#单片机的应用" class="headerlink" title="单片机的应用"></a>单片机的应用</h3><ul><li>单片机的使用领域已十分广泛，如智能仪表、实时工控、通讯设备、导航系统、家用电器等。各种产品一旦用上了单片机，就能起到使产品升级换代的功效，常在产品名称前冠以形容词——“智能型”，如智能型洗衣机等</li></ul><h3 id="STC89C52单片机"><a href="#STC89C52单片机" class="headerlink" title="STC89C52单片机"></a>STC89C52单片机</h3><ul><li><p>所属系列：51单片机系列                  </p></li><li><p>公司：STC公司</p></li><li><p>位数：8位</p></li><li><p>RAM：512字节</p></li><li><p>ROM：8K（Flash）</p></li><li><p>工作频率：12MHz（开发板使用）</p><p><img src="https://cdn.jsdelivr.net/gh/jiejie081/pic/img/image-20220112220854850.png" alt="STC89C52"></p></li></ul><h3 id="命名规则"><a href="#命名规则" class="headerlink" title="命名规则"></a>命名规则</h3><p><img src="C:\Users\zhanghuanjie\AppData\Roaming\Typora\typora-user-images\image-20220112223254939.png" alt="STC89C52"></p><p><img src="https://cdn.jsdelivr.net/gh/jiejie081/pic/img/image-20220112223228105.png" alt="STC89C52命名规则"></p><h2 id="单片机内部结构"><a href="#单片机内部结构" class="headerlink" title="单片机内部结构"></a>单片机内部结构</h2><p><img src="https://cdn.jsdelivr.net/gh/jiejie081/pic/img/image-20220113181229166.png" alt="单片机内部结构"></p><p><img src="https://cdn.jsdelivr.net/gh/jiejie081/pic/img/image-20220113181313175.png" alt="STC89C52系列内部结构框图"></p><h2 id="单片机最小系统"><a href="#单片机最小系统" class="headerlink" title="单片机最小系统"></a>单片机最小系统</h2><p><img src="https://cdn.jsdelivr.net/gh/jiejie081/pic/img/image-20220113181807671.png" alt="单片机最小系统"></p>]]></content>
      
      
      <categories>
          
          <category> 51单片机 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 51单片机 </tag>
            
            <tag> Keil </tag>
            
            <tag> STC </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Git与GitHub常用命令</title>
      <link href="/2022/01/08/Git%E4%B8%8EGitHub%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/"/>
      <url>/2022/01/08/Git%E4%B8%8EGitHub%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/</url>
      
        <content type="html"><![CDATA[<h1 id="Git与GitHub常用命令"><a href="#Git与GitHub常用命令" class="headerlink" title="Git与GitHub常用命令"></a>Git与GitHub常用命令</h1><h2 id="Git"><a href="#Git" class="headerlink" title="Git"></a>Git</h2><ul><li>创库初始化</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git init</span><br></pre></td></tr></table></figure><ul><li>查看当前git本地仓库状态</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git status</span><br></pre></td></tr></table></figure><ul><li>添加文件到本地缓存区</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git add [file]</span><br></pre></td></tr></table></figure><ul><li>将文件从缓存区移除</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git rm -cached [file]</span><br></pre></td></tr></table></figure><ul><li>提交缓存区内容到本地库并附加提交信息</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git commit -m &quot;附加信息&quot;</span><br><span class="line">git commit -m &quot;附加信息&quot; [file]  #仅将file文件提交</span><br></pre></td></tr></table></figure><ul><li>查看历史记录</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">git log</span><br><span class="line">git log--pretty=oneline</span><br><span class="line">git reflog</span><br></pre></td></tr></table></figure><ul><li>版本前进后退</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">基于索引值操作[推荐]</span></span><br><span class="line"></span><br><span class="line">git reset --hard [局部索引值]</span><br><span class="line">git reset --hard a6ace91</span><br><span class="line"><span class="meta">#</span><span class="bash">使用^符号：只能后退</span></span><br><span class="line">git reset --hard HEAD^ 注：一个^表示后退一步，n 个表示后退 n 步</span><br><span class="line"><span class="meta">#</span><span class="bash">使用~符号：只能后退</span></span><br><span class="line">git reset --hard HEAD~n</span><br><span class="line"><span class="meta">#</span><span class="bash">注：表示后退 n</span></span><br></pre></td></tr></table></figure><ul><li>签名设置</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">git config user.name [name]</span><br><span class="line">git comfig user.email [email]</span><br><span class="line"><span class="meta">#</span><span class="bash">项目（仓库）级别签名，仅对该项目有效 信息保存在 ./.git/config</span></span><br><span class="line">git config --global user.name [name]</span><br><span class="line">git comfig --global user.email [email]</span><br><span class="line"><span class="meta">#</span><span class="bash">系统级别签名，对当前操作系统的用户有效 ~/.gitconfig 文件</span></span><br></pre></td></tr></table></figure><ul><li>分支操作</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">创建分支</span></span><br><span class="line">git branch [分支名]</span><br><span class="line"><span class="meta">#</span><span class="bash">查看分支</span></span><br><span class="line">git branch -v</span><br><span class="line"><span class="meta">#</span><span class="bash">切换分支</span></span><br><span class="line">git checkout [分支名]</span><br><span class="line"><span class="meta">#</span><span class="bash">合并分支</span></span><br><span class="line"><span class="meta">#</span><span class="bash">第一步：切换到接受修改的分支（被合并，增加新内容）上</span></span><br><span class="line">git checkout [被合并分支名]</span><br><span class="line"><span class="meta">#</span><span class="bash">第二步：执行 merge 命令</span></span><br><span class="line">git merge [有新内容分支名]</span><br><span class="line"><span class="meta">#</span><span class="bash">合并时分支相同文件，不同内容回产生冲突</span></span><br><span class="line"><span class="meta">#</span><span class="bash">第一步：编辑文件，删除特殊符号</span></span><br><span class="line"><span class="meta">#</span><span class="bash">第二步：把文件修改到满意的程度，保存退出</span></span><br><span class="line"><span class="meta">#</span><span class="bash">第三步：git add [文件名]</span></span><br><span class="line"><span class="meta">#</span><span class="bash">第四步：git commit -m <span class="string">&quot;日志信息&quot;</span>   注意：此时 commit 一定不能</span></span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash">删除分支a</span></span><br><span class="line">git branch -d a</span><br><span class="line"><span class="meta">#</span><span class="bash">强制删除分支a</span></span><br><span class="line">git branch -D a</span><br></pre></td></tr></table></figure><ul><li>版本标签以及切换</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">为当前的状态打一个v1.0的标签</span></span><br><span class="line">git tag v1.0</span><br><span class="line"><span class="meta">#</span><span class="bash">查看历史tag记录</span></span><br><span class="line">git tag</span><br><span class="line"><span class="meta">#</span><span class="bash">切换到v1.0状态</span></span><br><span class="line">git checkout v1.0</span><br></pre></td></tr></table></figure><h2 id="GitHub"><a href="#GitHub" class="headerlink" title="GitHub"></a>GitHub</h2><h3 id="密钥"><a href="#密钥" class="headerlink" title="密钥"></a>密钥</h3><p>在向 GitHub 提交代码前，需要 SSH 授权，因此要创建 SSH Key</p><ol><li><p>生成密钥</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssh-keygen -t rsa -C &quot;email&quot;</span><br></pre></td></tr></table></figure><p>rsa 算法生成密钥，接着连续三个回车键（不需要输入密码），然后就会生成两个文件 id_rsa 和 id_rsa.pub。命令执行结果会告诉你文件默认路径, 其中 id_rsa 是密钥（ /c/Users/yu/.ssh/id_rsa ）， id_rsa.pub 就是公钥（ /c/Users/yu/.ssh/id_rsa.pub ）</p></li><li><p>在github上添加 ssh key</p></li></ol><ul><li>进入自己的 GitHub 的设置界面，如图：</li><li>点击 New SSH Key 按钮，并把上述 id_rsa.pub 中的内容填入下面 Key 输入框中，如图：</li><li>点击 Add SSH Key 就可以了</li></ul><ol><li><p>测试秘钥是否成功</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssh -T git@github.com  </span><br></pre></td></tr></table></figure></li></ol><p>第一次使用可能提示 github.com 无法验是否证可信任，输入 yes</p><h3 id="推送"><a href="#推送" class="headerlink" title="推送"></a>推送</h3><ul><li><p>创建远程库地址别名</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git remote -v #查看当前所有远程库别名</span><br><span class="line">git remote add [别名] [远程库地址]</span><br></pre></td></tr></table></figure></li><li><p>推送</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git push [别名] [分支名]</span><br></pre></td></tr></table></figure></li><li><p>克隆</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git clone [远程地址]</span><br></pre></td></tr></table></figure></li><li><p>拉取</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> pull=fetch+merge</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> fetch （拿来）拉去但是没有对本地更改</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> merge （合并）对本地进行更改</span></span><br><span class="line">git fetch [远程库地址别名] [远程分支名]</span><br><span class="line">git merge [远程库地址别名/远程分支名]</span><br><span class="line">git pull [远程库地址别名] </span><br></pre></td></tr></table></figure><p>​</p></li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> git </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>GitHub+Hexo 个人博客</title>
      <link href="/2022/01/08/GitHub+Hexo%20%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/"/>
      <url>/2022/01/08/GitHub+Hexo%20%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/</url>
      
        <content type="html"><![CDATA[<h1 id=""><a href="#" class="headerlink" title=""></a><mark class="hl-label blue">GitHub+Hexo个人博客</mark> </h1><h2 id="环境准备"><a href="#环境准备" class="headerlink" title="环境准备"></a>环境准备</h2><ol><li><p>git            <a href="https://git-scm.com/">Git 官网</a></p></li><li><p>node.js   <a href="https://nodejs.org/en/">node官网</a></p></li><li><p>Hexo      <a href="https://hexo.io/zh-cn/index.html">Hexo官网</a>  </p><p>或者直接用命令：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo-cli -g</span><br></pre></td></tr></table></figure></li></ol><h2 id="创建并绑定GitHub"><a href="#创建并绑定GitHub" class="headerlink" title="创建并绑定GitHub"></a>创建并绑定GitHub</h2><ol><li><p>创建一个GitHub账号</p></li><li><p>创建一个库 名字为 [name].github.io</p></li><li><p>生成ssh</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssh-keygen -t rsa -C &quot;email&quot;</span><br></pre></td></tr></table></figure><p>rsa 算法生成密钥，接着连续三个回车键（不需要输入密码），然后就会生成两个文件 id_rsa 和 id_rsa.pub。命令执行结果会告诉你文件默认路径, 其中 id_rsa 是密钥（ /c/Users/yu/.ssh/id_rsa ）， id_rsa.pub 就是公钥（ /c/Users/yu/.ssh/id_rsa.pub ）</p></li><li><p>在github上添加 ssh key</p></li></ol><ul><li>进入自己的 GitHub 的设置界面</li><li>点击 New SSH Key 按钮，并把上述 id_rsa.pub 中的内容填入下面 Key 输入框中，如图：</li><li>点击 Add SSH Key 就可以了</li></ul><ol><li><p>测试秘钥是否成功</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssh -T git@github.com  </span><br></pre></td></tr></table></figure></li></ol><p>第一次使用可能提示 github.com 无法验是否证可信任，输入 yes</p><ol><li>生成令牌</li></ol><ul><li>进入自己的 GitHub 的设置界面（settings）</li><li>点击 Developer settings 按钮 </li><li>点击 Personal access tokens</li><li>点击 Generate new token </li><li>Note 随便填 Expiration可以设置令牌时间 Select scopes全选</li><li>点击 Generate 就可以了</li><li>注意：令牌只有在生成的时候显示，要复制一下记下来</li></ul><h2 id="Hexo博客搭建"><a href="#Hexo博客搭建" class="headerlink" title="Hexo博客搭建"></a>Hexo博客搭建</h2><ol><li><p>新建一个名为blog的文件夹，在文件夹内 git bash here</p></li><li><p>初始化hexo 博客</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo init</span><br></pre></td></tr></table></figure></li><li><p>安装deploy插件</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo-deployer-git --save</span><br></pre></td></tr></table></figure></li><li><p>配置_config.yml文件</p><p>用Notepad++打开</p><p>最后面配置为</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">deploy:</span><br><span class="line">  type: git</span><br><span class="line">  repo: [远程库地址]</span><br><span class="line">  branch: main</span><br></pre></td></tr></table></figure></li><li><p>签名设置</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">git config user.name [name]</span><br><span class="line">git config user.email [email]</span><br><span class="line"><span class="meta">#</span><span class="bash">项目（仓库）级别签名，仅对该项目有效 信息保存在 ./.git/config</span></span><br><span class="line">git config --global user.name [name]</span><br><span class="line">git config --global user.email [email]</span><br><span class="line"><span class="meta">#</span><span class="bash">系统级别签名，对当前操作系统的用户有效 ~/.gitconfig 文件</span></span><br></pre></td></tr></table></figure><p>可以直接找到.deploy_git/.git/config 在文件中加入</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[user]</span><br><span class="line">name = [name]</span><br><span class="line">eamil = [eamil]</span><br></pre></td></tr></table></figure><p>6.生成页面上传</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">hexo c #清理缓存</span><br><span class="line">hexo g #生成页面</span><br><span class="line">hexo s #生成静态页面</span><br><span class="line"><span class="meta">#</span><span class="bash"> Ctrl+c 退出</span></span><br><span class="line">hexo d #上传github</span><br></pre></td></tr></table></figure></li></ol><p>第一次hexo d要登录github 第一个输入name 第二个输入令牌</p><h2 id="利用gtihub备份博客"><a href="#利用gtihub备份博客" class="headerlink" title="利用gtihub备份博客"></a>利用gtihub备份博客</h2><ul><li>上传</li></ul><ol><li><p>创建一个新的远程github仓库</p></li><li><p>.gitignore文件可以是一些没有必要的文件备份到仓库</p></li><li><p>根据提示将博客文件夹push到远程库</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">git add .</span><br><span class="line">git commit -m &quot; &quot;</span><br><span class="line">git remote [别名] [远程库地址]</span><br><span class="line">git push [别名] [分支]</span><br></pre></td></tr></table></figure></li></ol><ul><li>克隆</li></ul><ol><li><p>在要下载到的地址 git bash here</p></li><li><p>输入命令</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git clone [远程库地址]</span><br></pre></td></tr></table></figure></li><li><p>打开文件夹安装依赖</p></li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install</span><br></pre></td></tr></table></figure><p>在初始化hexo 的时候自动安装了依赖</p><p>而上传的时候没有上传依赖</p><p>所以就clone下来就要安装依赖</p><ol><li>和正常一样使用</li></ol>]]></content>
      
      
      <categories>
          
          <category> 教程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 教程 </tag>
            
            <tag> github </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
