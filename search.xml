<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>Git与GitHub常用命令</title>
      <link href="/2022/01/08/Git%E4%B8%8EGitHub%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/"/>
      <url>/2022/01/08/Git%E4%B8%8EGitHub%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/</url>
      
        <content type="html"><![CDATA[<h1 id="Git与GitHub常用命令"><a href="#Git与GitHub常用命令" class="headerlink" title="Git与GitHub常用命令"></a>Git与GitHub常用命令</h1><h2 id="Git"><a href="#Git" class="headerlink" title="Git"></a>Git</h2><ul><li>创库初始化</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git init</span><br></pre></td></tr></table></figure><ul><li>查看当前git本地仓库状态</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git status</span><br></pre></td></tr></table></figure><ul><li>添加文件到本地缓存区</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git add [file]</span><br></pre></td></tr></table></figure><ul><li>将文件从缓存区移除</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git rm -cached [file]</span><br></pre></td></tr></table></figure><ul><li>提交缓存区内容到本地库并附加提交信息</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git commit -m &quot;附加信息&quot;</span><br><span class="line">git commit -m &quot;附加信息&quot; [file]  #仅将file文件提交</span><br></pre></td></tr></table></figure><ul><li>查看历史记录</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">git log</span><br><span class="line">git log--pretty=oneline</span><br><span class="line">git reflog</span><br></pre></td></tr></table></figure><ul><li>版本前进后退</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">基于索引值操作[推荐]</span></span><br><span class="line"></span><br><span class="line">git reset --hard [局部索引值]</span><br><span class="line">git reset --hard a6ace91</span><br><span class="line"><span class="meta">#</span><span class="bash">使用^符号：只能后退</span></span><br><span class="line">git reset --hard HEAD^ 注：一个^表示后退一步，n 个表示后退 n 步</span><br><span class="line"><span class="meta">#</span><span class="bash">使用~符号：只能后退</span></span><br><span class="line">git reset --hard HEAD~n</span><br><span class="line"><span class="meta">#</span><span class="bash">注：表示后退 n</span></span><br></pre></td></tr></table></figure><ul><li>签名设置</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">git config user.name [name]</span><br><span class="line">git comfig user.email [email]</span><br><span class="line"><span class="meta">#</span><span class="bash">项目（仓库）级别签名，仅对该项目有效 信息保存在 ./.git/config</span></span><br><span class="line">git config --global user.name [name]</span><br><span class="line">git comfig --global user.email [email]</span><br><span class="line"><span class="meta">#</span><span class="bash">系统级别签名，对当前操作系统的用户有效 ~/.gitconfig 文件</span></span><br></pre></td></tr></table></figure><ul><li>分支操作</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">创建分支</span></span><br><span class="line">git branch [分支名]</span><br><span class="line"><span class="meta">#</span><span class="bash">查看分支</span></span><br><span class="line">git branch -v</span><br><span class="line"><span class="meta">#</span><span class="bash">切换分支</span></span><br><span class="line">git checkout [分支名]</span><br><span class="line"><span class="meta">#</span><span class="bash">合并分支</span></span><br><span class="line"><span class="meta">#</span><span class="bash">第一步：切换到接受修改的分支（被合并，增加新内容）上</span></span><br><span class="line">git checkout [被合并分支名]</span><br><span class="line"><span class="meta">#</span><span class="bash">第二步：执行 merge 命令</span></span><br><span class="line">git merge [有新内容分支名]</span><br><span class="line"><span class="meta">#</span><span class="bash">合并时分支相同文件，不同内容回产生冲突</span></span><br><span class="line"><span class="meta">#</span><span class="bash">第一步：编辑文件，删除特殊符号</span></span><br><span class="line"><span class="meta">#</span><span class="bash">第二步：把文件修改到满意的程度，保存退出</span></span><br><span class="line"><span class="meta">#</span><span class="bash">第三步：git add [文件名]</span></span><br><span class="line"><span class="meta">#</span><span class="bash">第四步：git commit -m <span class="string">&quot;日志信息&quot;</span>   注意：此时 commit 一定不能</span></span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash">删除分支a</span></span><br><span class="line">git branch -d a</span><br><span class="line"><span class="meta">#</span><span class="bash">强制删除分支a</span></span><br><span class="line">git branch -D a</span><br></pre></td></tr></table></figure><ul><li>版本标签以及切换</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">为当前的状态打一个v1.0的标签</span></span><br><span class="line">git tag v1.0</span><br><span class="line"><span class="meta">#</span><span class="bash">查看历史tag记录</span></span><br><span class="line">git tag</span><br><span class="line"><span class="meta">#</span><span class="bash">切换到v1.0状态</span></span><br><span class="line">git checkout v1.0</span><br></pre></td></tr></table></figure><h2 id="GitHub"><a href="#GitHub" class="headerlink" title="GitHub"></a>GitHub</h2><h3 id="密钥"><a href="#密钥" class="headerlink" title="密钥"></a>密钥</h3><p>在向 GitHub 提交代码前，需要 SSH 授权，因此要创建 SSH Key</p><ol><li><p>生成密钥</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssh-keygen -t rsa -C &quot;email&quot;</span><br></pre></td></tr></table></figure><p>rsa 算法生成密钥，接着连续三个回车键（不需要输入密码），然后就会生成两个文件 id_rsa 和 id_rsa.pub。命令执行结果会告诉你文件默认路径, 其中 id_rsa 是密钥（ /c/Users/yu/.ssh/id_rsa ）， id_rsa.pub 就是公钥（ /c/Users/yu/.ssh/id_rsa.pub ）</p></li><li><p>在github上添加 ssh key</p></li></ol><ul><li>进入自己的 GitHub 的设置界面，如图：</li><li>点击 New SSH Key 按钮，并把上述 id_rsa.pub 中的内容填入下面 Key 输入框中，如图：</li><li>点击 Add SSH Key 就可以了</li></ul><ol start="3"><li><p>测试秘钥是否成功</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssh -T git@github.com  </span><br></pre></td></tr></table></figure></li></ol><p>第一次使用可能提示 github.com 无法验是否证可信任，输入 yes</p><h3 id="推送"><a href="#推送" class="headerlink" title="推送"></a>推送</h3><ul><li><p>创建远程库地址别名</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git remote -v #查看当前所有远程库别名</span><br><span class="line">git remote add [别名] [远程库地址]</span><br></pre></td></tr></table></figure></li><li><p>推送</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git push [别名] [分支名]</span><br></pre></td></tr></table></figure></li><li><p>克隆</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git clone [远程地址]</span><br></pre></td></tr></table></figure></li><li><p>拉取</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> pull=fetch+merge</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> fetch （拿来）拉去但是没有对本地更改</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> merge （合并）对本地进行更改</span></span><br><span class="line">git fetch [远程库地址别名] [远程分支名]</span><br><span class="line">git merge [远程库地址别名/远程分支名]</span><br><span class="line">git pull [远程库地址别名] </span><br></pre></td></tr></table></figure><p>​</p></li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> git </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>GitHub+Hexo 个人博客</title>
      <link href="/2022/01/08/GitHub+Hexo%20%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/"/>
      <url>/2022/01/08/GitHub+Hexo%20%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/</url>
      
        <content type="html"><![CDATA[<h1 id="GitHub-Hexo-个人博客"><a href="#GitHub-Hexo-个人博客" class="headerlink" title="GitHub+Hexo 个人博客"></a>GitHub+Hexo 个人博客</h1><h2 id="环境准备"><a href="#环境准备" class="headerlink" title="环境准备"></a>环境准备</h2><ol><li><p>git            <a href="https://git-scm.com/">Git 官网</a></p></li><li><p>node.js   <a href="https://nodejs.org/en/">node官网</a></p></li><li><p> Hexo      <a href="https://hexo.io/zh-cn/index.html">Hexo官网</a>  </p></li></ol><p>   或者直接用命令：</p>   <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo-cli -g</span><br></pre></td></tr></table></figure><h2 id="创建并绑定GitHub"><a href="#创建并绑定GitHub" class="headerlink" title="创建并绑定GitHub"></a>创建并绑定GitHub</h2><ol><li><p>创建一个GitHub账号</p></li><li><p>创建一个库 名字为 [name].github.io</p></li><li><p>生成ssh</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssh-keygen -t rsa -C &quot;email&quot;</span><br></pre></td></tr></table></figure><p>rsa 算法生成密钥，接着连续三个回车键（不需要输入密码），然后就会生成两个文件 id_rsa 和 id_rsa.pub。命令执行结果会告诉你文件默认路径, 其中 id_rsa 是密钥（ /c/Users/yu/.ssh/id_rsa ）， id_rsa.pub 就是公钥（ /c/Users/yu/.ssh/id_rsa.pub ）</p></li><li><p>在github上添加 ssh key</p></li></ol><ul><li>进入自己的 GitHub 的设置界面</li><li>点击 New SSH Key 按钮，并把上述 id_rsa.pub 中的内容填入下面 Key 输入框中，如图：</li><li>点击 Add SSH Key 就可以了</li></ul><ol start="5"><li><p>测试秘钥是否成功</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssh -T git@github.com  </span><br></pre></td></tr></table></figure></li></ol><p>第一次使用可能提示 github.com 无法验是否证可信任，输入 yes</p><ol start="6"><li>生成令牌</li></ol><ul><li>进入自己的 GitHub 的设置界面（settings）</li><li>点击 Developer settings 按钮 </li><li>点击 Personal access tokens</li><li>点击 Generate new token </li><li>Note 随便填 Expiration可以设置令牌时间 Select scopes全选</li><li>点击 Generate 就可以了</li><li>注意：令牌只有在生成的时候显示，要复制一下记下来</li></ul><h2 id="Hexo博客搭建"><a href="#Hexo博客搭建" class="headerlink" title="Hexo博客搭建"></a>Hexo博客搭建</h2><ol><li><p>新建一个名为blog的文件夹，在文件夹内 git bash here</p></li><li><p>初始化hexo 博客</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo init</span><br></pre></td></tr></table></figure></li><li><p>安装deploy插件</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo-deployer-git --save</span><br></pre></td></tr></table></figure></li><li><p>配置_config.yml文件</p><p>用Notepad++打开</p><p>最后面配置为</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">deploy:</span><br><span class="line">  type: git</span><br><span class="line">  repo: [远程库地址]</span><br><span class="line">  branch: main</span><br></pre></td></tr></table></figure></li><li><p>签名设置</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">git config user.name [name]</span><br><span class="line">git config user.email [email]</span><br><span class="line"><span class="meta">#</span><span class="bash">项目（仓库）级别签名，仅对该项目有效 信息保存在 ./.git/config</span></span><br><span class="line">git config --global user.name [name]</span><br><span class="line">git config --global user.email [email]</span><br><span class="line"><span class="meta">#</span><span class="bash">系统级别签名，对当前操作系统的用户有效 ~/.gitconfig 文件</span></span><br></pre></td></tr></table></figure><p>可以直接找到.deploy_git/.git/config 在文件中加入</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[user]</span><br><span class="line">name = [name]</span><br><span class="line">eamil = [eamil]</span><br></pre></td></tr></table></figure><p>6.生成页面上传</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">hexo c #清理缓存</span><br><span class="line">hexo g #生成页面</span><br><span class="line">hexo s #生成静态页面</span><br><span class="line"><span class="meta">#</span><span class="bash"> Ctrl+c 退出</span></span><br><span class="line">hexo d #上传github</span><br></pre></td></tr></table></figure></li></ol><p>第一次hexo d要登录github 第一个输入name 第二个输入令牌</p><h2 id="利用gtihub备份博客"><a href="#利用gtihub备份博客" class="headerlink" title="利用gtihub备份博客"></a>利用gtihub备份博客</h2><ul><li>上传</li></ul><ol><li><p>创建一个新的远程github仓库</p></li><li><p>.gitignore文件可以是一些没有必要的文件备份到仓库</p></li><li><p>根据提示将博客文件夹push到远程库</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">git add .</span><br><span class="line">git commit -m &quot; &quot;</span><br><span class="line">git remote [别名] [远程库地址]</span><br><span class="line">git push [别名] [分支]</span><br></pre></td></tr></table></figure></li></ol><ul><li>克隆</li></ul><ol><li><p>在要下载到的地址 git bash here</p></li><li><p>输入命令</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git clone [远程库地址]</span><br></pre></td></tr></table></figure></li><li><p>打开文件夹安装依赖</p></li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install</span><br></pre></td></tr></table></figure><p>在初始化hexo 的时候自动安装了依赖</p><p>而上传的时候没有上传依赖</p><p>所以就clone下来就要安装依赖</p><ol start="4"><li>和正常一样使用</li></ol>]]></content>
      
      
      <categories>
          
          <category> 教程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 教程 </tag>
            
            <tag> github </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
